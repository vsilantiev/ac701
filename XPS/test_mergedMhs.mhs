
 PARAMETER VERSION = 2.1.0


 PORT processing_system7_0_MIO = processing_system7_0_MIO, DIR = IO, VEC = [53:0], ASSIGNMENT = OPTIONAL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = TRUE, ENABLE = SINGLE, TRI_I = , TRI_O = , TRI_T = , IOB_STATE = INFER
 PORT processing_system7_0_PS_SRSTB = processing_system7_0_PS_SRSTB, DIR = I, ASSIGNMENT = OPTIONAL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT processing_system7_0_PS_CLK = processing_system7_0_PS_CLK, DIR = I, SIGIS = CLK, ASSIGNMENT = OPTIONAL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER
 PORT processing_system7_0_PS_PORB = processing_system7_0_PS_PORB, DIR = I, ASSIGNMENT = OPTIONAL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT processing_system7_0_DDR_Clk = processing_system7_0_DDR_Clk, DIR = IO, SIGIS = CLK, ASSIGNMENT = OPTIONAL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = TRUE, ENABLE = SINGLE, TRI_I = , TRI_O = , TRI_T = , IOB_STATE = INFER
 PORT processing_system7_0_DDR_Clk_n = processing_system7_0_DDR_Clk_n, DIR = IO, SIGIS = CLK, ASSIGNMENT = OPTIONAL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = TRUE, ENABLE = SINGLE, TRI_I = , TRI_O = , TRI_T = , IOB_STATE = INFER
 PORT processing_system7_0_DDR_CKE = processing_system7_0_DDR_CKE, DIR = IO, ASSIGNMENT = OPTIONAL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = TRUE, ENABLE = SINGLE, TRI_I = , TRI_O = , TRI_T = , IOB_STATE = INFER
 PORT processing_system7_0_DDR_CS_n = processing_system7_0_DDR_CS_n, DIR = IO, ASSIGNMENT = OPTIONAL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = TRUE, ENABLE = SINGLE, TRI_I = , TRI_O = , TRI_T = , IOB_STATE = INFER
 PORT processing_system7_0_DDR_RAS_n = processing_system7_0_DDR_RAS_n, DIR = IO, ASSIGNMENT = OPTIONAL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = TRUE, ENABLE = SINGLE, TRI_I = , TRI_O = , TRI_T = , IOB_STATE = INFER
 PORT processing_system7_0_DDR_CAS_n = processing_system7_0_DDR_CAS_n, DIR = IO, ASSIGNMENT = OPTIONAL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = TRUE, ENABLE = SINGLE, TRI_I = , TRI_O = , TRI_T = , IOB_STATE = INFER
 PORT processing_system7_0_DDR_WEB_pin = processing_system7_0_DDR_WEB, DIR = O, ASSIGNMENT = OPTIONAL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT processing_system7_0_DDR_BankAddr = processing_system7_0_DDR_BankAddr, DIR = IO, VEC = [2:0], ASSIGNMENT = OPTIONAL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = TRUE, ENABLE = SINGLE, TRI_I = , TRI_O = , TRI_T = , IOB_STATE = INFER
 PORT processing_system7_0_DDR_Addr = processing_system7_0_DDR_Addr, DIR = IO, VEC = [14:0], ASSIGNMENT = OPTIONAL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = TRUE, ENABLE = SINGLE, TRI_I = , TRI_O = , TRI_T = , IOB_STATE = INFER
 PORT processing_system7_0_DDR_ODT = processing_system7_0_DDR_ODT, DIR = IO, ASSIGNMENT = OPTIONAL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = TRUE, ENABLE = SINGLE, TRI_I = , TRI_O = , TRI_T = , IOB_STATE = INFER
 PORT processing_system7_0_DDR_DRSTB = processing_system7_0_DDR_DRSTB, DIR = IO, SIGIS = RST, ASSIGNMENT = OPTIONAL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = TRUE, ENABLE = SINGLE, TRI_I = , TRI_O = , TRI_T = , IOB_STATE = INFER
 PORT processing_system7_0_DDR_DQ = processing_system7_0_DDR_DQ, DIR = IO, VEC = [31:0], ASSIGNMENT = OPTIONAL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = TRUE, ENABLE = SINGLE, TRI_I = , TRI_O = , TRI_T = , IOB_STATE = INFER
 PORT processing_system7_0_DDR_DM = processing_system7_0_DDR_DM, DIR = IO, VEC = [3:0], ASSIGNMENT = OPTIONAL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = TRUE, ENABLE = SINGLE, TRI_I = , TRI_O = , TRI_T = , IOB_STATE = INFER
 PORT processing_system7_0_DDR_DQS = processing_system7_0_DDR_DQS, DIR = IO, VEC = [3:0], ASSIGNMENT = OPTIONAL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = TRUE, ENABLE = SINGLE, TRI_I = , TRI_O = , TRI_T = , IOB_STATE = INFER
 PORT processing_system7_0_DDR_DQS_n = processing_system7_0_DDR_DQS_n, DIR = IO, VEC = [3:0], ASSIGNMENT = OPTIONAL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = TRUE, ENABLE = SINGLE, TRI_I = , TRI_O = , TRI_T = , IOB_STATE = INFER
 PORT processing_system7_0_DDR_VRN = processing_system7_0_DDR_VRN, DIR = IO, ASSIGNMENT = OPTIONAL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = TRUE, ENABLE = SINGLE, TRI_I = , TRI_O = , TRI_T = , IOB_STATE = INFER
 PORT processing_system7_0_DDR_VRP = processing_system7_0_DDR_VRP, DIR = IO, ASSIGNMENT = OPTIONAL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = TRUE, ENABLE = SINGLE, TRI_I = , TRI_O = , TRI_T = , IOB_STATE = INFER


BEGIN processing_system7
 PARAMETER INSTANCE = processing_system7_0
 PARAMETER C_INTERCONNECT_M_AXI_GP0_BASE_ID = 0b0000000000000000, DT = std_logic_vector, TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Unique Master ID, LONG_DESC = The unique master ID of the master interface. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , BITWIDTH = 16, BUS = M_AXI_GP0, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0b0000000000000000, ISVALID = (C_USE_M_AXI_GP0 == 1), RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_INTERCONNECT_M_AXI_GP0_IS_ACLK_ASYNC = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Is ACLK Asynchronous to Interconnect_ACLK, LONG_DESC = Is ACLK asynchronous with respect to the interconnect's ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_GP0, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_USE_M_AXI_GP0 == 1), RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_INTERCONNECT_M_AXI_GP0_ACLK_RATIO = 1, DT = integer, RANGE = (1 : 2147483647), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = UPDATE, DESC = ACLK Frequency Ratio, LONG_DESC = In relation to C_INTERCONNECT_ACLK_RATIO on the interconnect, indicates the ratio of the ACLK frequency of this bus interface to the frequency of INTERCONNECT_ACLK. Automatically set to the ACLK frequency in Hz., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_GP0, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 1, ISVALID = (C_USE_M_AXI_GP0 == 1), RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_INTERCONNECT_M_AXI_GP0_ARB_PRIORITY = 0, DT = integer, RANGE = (0:15), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Arbitration Priority, LONG_DESC = Arbitration priority. Higher values indicate higher priority. Round-robin arbitration is used among all masters with priority value 0, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_GP0, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_USE_M_AXI_GP0 == 1), RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_INTERCONNECT_M_AXI_GP0_AW_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AW channel, LONG_DESC = Insert register slice on AW channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_GP0, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_USE_M_AXI_GP0 == 1), RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_INTERCONNECT_M_AXI_GP0_AR_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AR channel, LONG_DESC = Insert register slice on AR channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_GP0, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_USE_M_AXI_GP0 == 1), RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_INTERCONNECT_M_AXI_GP0_W_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on W channel, LONG_DESC = Insert register slice on W channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_GP0, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_USE_M_AXI_GP0 == 1), RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_INTERCONNECT_M_AXI_GP0_R_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on R channel, LONG_DESC = Insert register slice on R channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_GP0, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_USE_M_AXI_GP0 == 1), RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_INTERCONNECT_M_AXI_GP0_B_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on B channel, LONG_DESC = Insert register slice on B channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_GP0, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_USE_M_AXI_GP0 == 1), RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_INTERCONNECT_M_AXI_GP0_WRITE_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Write Data FIFO Depth, LONG_DESC = Depth of bus interface write data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_GP0, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_USE_M_AXI_GP0 == 1), RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_INTERCONNECT_M_AXI_GP0_WRITE_FIFO_DELAY = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Write Data FIFO Burst Delay, LONG_DESC = Delay issuing AWVALID to arbiter until complete burst is stored in write data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_GP0, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_USE_M_AXI_GP0 == 1), RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_INTERCONNECT_M_AXI_GP0_READ_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Read Data FIFO Depth, LONG_DESC = Depth of bus interface read data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_GP0, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_USE_M_AXI_GP0 == 1), RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_INTERCONNECT_M_AXI_GP0_READ_FIFO_DELAY = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Read Data FIFO Burst Delay, LONG_DESC = Delay issuing ARVALID to arbiter until read data FIFO has vacancy to store entire burst length, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_GP0, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_USE_M_AXI_GP0 == 1), RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_INTERCONNECT_M_AXI_GP0_WRITE_ISSUING = 8, RANGE = (1:32), ASSOCIATION = MASTER, DESC = Write Transaction Issuing Limit, LONG_DESC = Maximum number of active write transactions that the bus interface can generate. This parameter is ignored when the IP is connected to an interconnect in Shared-Access mode., CONST_RANGE = , IS_RANGE_CONST = TRUE, AXI_VER = 1.06.a, BUS_TYPE = MASTER, ISVALID = (C_USE_M_AXI_GP0 == 1), DT = INTEGER, BUS = M_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, GUI_PERMIT = , MPD_VALUE = 8, RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_INTERCONNECT_M_AXI_GP0_READ_ISSUING = 8, RANGE = (1:32), ASSOCIATION = MASTER, DESC = Read Transaction Issuing Limit, LONG_DESC = Maximum number of active read transactions that the bus interface can generate. This parameter is ignored when the IP is connected to an interconnect in Shared-Access mode., CONST_RANGE = , IS_RANGE_CONST = TRUE, AXI_VER = 1.06.a, BUS_TYPE = MASTER, ISVALID = (C_USE_M_AXI_GP0 == 1), DT = INTEGER, BUS = M_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, GUI_PERMIT = , MPD_VALUE = 8, RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_INTERCONNECT_M_AXI_GP0_SINGLE_THREAD = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Accept only one ID thread at a time, LONG_DESC = Transaction requests are withheld from AW/AR channel arbitration as long as there are any outstanding transactions from the same master with a different ID value., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_GP0, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_USE_M_AXI_GP0 == 1), RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_M_AXI_GP0_ADDED_AXI_PARAMS = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_M_AXI_GP0_AXI_VER = 1.06.a, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_INTERCONNECT_M_AXI_GP1_BASE_ID = 0x00, DT = std_logic_vector, TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Unique Master ID, LONG_DESC = The unique master ID of the master interface. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , BITWIDTH = 8, BUS = M_AXI_GP1, AXI_VER = 1.01.a, BUS_TYPE = MASTER, MPD_VALUE = 0x00, ISVALID = (C_USE_M_AXI_GP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_M_AXI_GP1_IS_ACLK_ASYNC = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Is ACLK Asynchronous to Interconnect_ACLK, LONG_DESC = Is ACLK asynchronous with respect to the interconnect's ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_GP1, AXI_VER = 1.01.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_USE_M_AXI_GP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_M_AXI_GP1_ACLK_RATIO = 1, DT = integer, TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = UPDATE, DESC = ACLK Frequency Ratio, LONG_DESC = In relation to C_INTERCONNECT_ACLK_RATIO on the interconnect, indicates the ratio of the ACLK frequency of this bus interface to the frequency of Interconnect_ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , BUS = M_AXI_GP1, AXI_VER = 1.01.a, BUS_TYPE = MASTER, MPD_VALUE = 1, ISVALID = (C_USE_M_AXI_GP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_M_AXI_GP1_ARB_PRIORITY = 0, DT = integer, RANGE = (0:15), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Arbitration Priority, LONG_DESC = Arbitration priority. Higher values indicate higher priority. Round-robin arbitration is used among all masters with priority value 0, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_GP1, AXI_VER = 1.01.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_USE_M_AXI_GP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_M_AXI_GP1_AW_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AW channel, LONG_DESC = Insert register slice on AW channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_GP1, AXI_VER = 1.01.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_USE_M_AXI_GP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_M_AXI_GP1_AR_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AR channel, LONG_DESC = Insert register slice on AR channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_GP1, AXI_VER = 1.01.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_USE_M_AXI_GP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_M_AXI_GP1_W_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on W channel, LONG_DESC = Insert register slice on W channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_GP1, AXI_VER = 1.01.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_USE_M_AXI_GP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_M_AXI_GP1_R_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on R channel, LONG_DESC = Insert register slice on R channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_GP1, AXI_VER = 1.01.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_USE_M_AXI_GP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_M_AXI_GP1_B_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on B channel, LONG_DESC = Insert register slice on B channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_GP1, AXI_VER = 1.01.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_USE_M_AXI_GP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_M_AXI_GP1_WRITE_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Write Data FIFO Depth, LONG_DESC = Depth of bus interface write data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_GP1, AXI_VER = 1.01.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_USE_M_AXI_GP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_M_AXI_GP1_READ_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Read Data FIFO Depth, LONG_DESC = Depth of bus interface read data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_GP1, AXI_VER = 1.01.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_USE_M_AXI_GP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_M_AXI_GP1_WRITE_ISSUING = 8, RANGE = (1, 2, 4, 8, 16, 32), ASSOCIATION = MASTER, DESC = Write Transaction Issuance Limit, LONG_DESC = Maximum number of active write transactions that the bus interface can generate. This parameter is ignored when the IP is connected to an interconnect in SASD mode., CONST_RANGE = , IS_RANGE_CONST = TRUE, AXI_VER = 1.01.a, BUS_TYPE = MASTER, ISVALID = (C_USE_M_AXI_GP1 == 1), DT = INTEGER, BUS = M_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, GUI_PERMIT = , MPD_VALUE = 8, RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_M_AXI_GP1_READ_ISSUING = 8, RANGE = (1, 2, 4, 8, 16, 32), ASSOCIATION = MASTER, DESC = Read Transaction Issuance Limit, LONG_DESC = Maximum number of active read transactions that the bus interface can generate. This parameter is ignored when the IP is connected to an interconnect in SASD mode., CONST_RANGE = , IS_RANGE_CONST = TRUE, AXI_VER = 1.01.a, BUS_TYPE = MASTER, ISVALID = (C_USE_M_AXI_GP1 == 1), DT = INTEGER, BUS = M_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, GUI_PERMIT = , MPD_VALUE = 8, RESOLVED_BUS = 
 PARAMETER C_M_AXI_GP1_ADDED_AXI_PARAMS = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_M_AXI_GP1_AXI_VER = 1.01.a, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_INTERCONNECT_S_AXI_GP0_MASTERS = none, DT = string, TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Masters that can talk to this slave, LONG_DESC = The '&' separated list of master interfaces that can access this slave, GUI_PERMIT = , BUS = S_AXI_GP0, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = none, ISVALID = (C_USE_S_AXI_GP0 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP0_IS_ACLK_ASYNC = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Is ACLK Asynchronous to Interconnect_ACLK, LONG_DESC = Is ACLK asynchronous with respect to the interconnect's ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_GP0, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_GP0 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP0_ACLK_RATIO = 1, DT = integer, TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = UPDATE, DESC = ACLK Frequency Ratio, LONG_DESC = In relation to C_INTERCONNECT_ACLK_RATIO on the interconnect, indicates the ratio of the ACLK frequency of this bus interface to the frequency of Interconnect_ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , BUS = S_AXI_GP0, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 1, ISVALID = (C_USE_S_AXI_GP0 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP0_SECURE = 0, DT = integer, RANGE = (0,1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Require TrustZone Secure on all accesses, LONG_DESC = All accesses to slave required to be secure, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_GP0, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_GP0 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP0_AW_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AW channel, LONG_DESC = Insert register slice on AW channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_GP0, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_GP0 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP0_AR_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AR channel, LONG_DESC = Insert register slice on AR channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_GP0, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_GP0 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP0_W_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on W channel, LONG_DESC = Insert register slice on W channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_GP0, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_GP0 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP0_R_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on R channel, LONG_DESC = Insert register slice on R channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_GP0, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_GP0 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP0_B_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on B channel, LONG_DESC = Insert register slice on B channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_GP0, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_GP0 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP0_WRITE_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Write Data FIFO Depth, LONG_DESC = Depth of bus interface write data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_GP0, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_GP0 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP0_READ_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Read Data FIFO Depth, LONG_DESC = Depth of bus interface read data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_GP0, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_GP0 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP0_WRITE_ACCEPTANCE = 8, RANGE = (1, 2, 4, 8, 16, 32), ASSOCIATION = SLAVE, DESC = Write Transaction Acceptance Limit, LONG_DESC = Maximum number of active write transactions that the bus interface can accept. This parameter is ignored when the IP is connected to an interconnect in SASD mode., CONST_RANGE = , IS_RANGE_CONST = TRUE, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, ISVALID = (C_USE_S_AXI_GP0 == 1), BUS = S_AXI_GP0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, GUI_PERMIT = , MPD_VALUE = 8, RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP0_READ_ACCEPTANCE = 8, RANGE = (1, 2, 4, 8, 16, 32), ASSOCIATION = SLAVE, DESC = Read Transaction Acceptance Limit, LONG_DESC = Maximum number of active read transactions that the bus interface can accept. This parameter is ignored when the IP is connected to an interconnect in SASD mode., CONST_RANGE = , IS_RANGE_CONST = TRUE, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, ISVALID = (C_USE_S_AXI_GP0 == 1), BUS = S_AXI_GP0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, GUI_PERMIT = , MPD_VALUE = 8, RESOLVED_BUS = 
 PARAMETER C_S_AXI_GP0_ADDED_AXI_PARAMS = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_S_AXI_GP0_AXI_VER = 1.01.a, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_INTERCONNECT_S_AXI_GP1_MASTERS = none, DT = string, TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Masters that can talk to this slave, LONG_DESC = The '&' separated list of master interfaces that can access this slave, GUI_PERMIT = , BUS = S_AXI_GP1, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = none, ISVALID = (C_USE_S_AXI_GP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP1_IS_ACLK_ASYNC = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Is ACLK Asynchronous to Interconnect_ACLK, LONG_DESC = Is ACLK asynchronous with respect to the interconnect's ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_GP1, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_GP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP1_ACLK_RATIO = 1, DT = integer, TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = UPDATE, DESC = ACLK Frequency Ratio, LONG_DESC = In relation to C_INTERCONNECT_ACLK_RATIO on the interconnect, indicates the ratio of the ACLK frequency of this bus interface to the frequency of Interconnect_ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , BUS = S_AXI_GP1, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 1, ISVALID = (C_USE_S_AXI_GP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP1_SECURE = 0, DT = integer, RANGE = (0,1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Require TrustZone Secure on all accesses, LONG_DESC = All accesses to slave required to be secure, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_GP1, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_GP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP1_AW_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AW channel, LONG_DESC = Insert register slice on AW channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_GP1, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_GP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP1_AR_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AR channel, LONG_DESC = Insert register slice on AR channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_GP1, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_GP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP1_W_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on W channel, LONG_DESC = Insert register slice on W channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_GP1, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_GP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP1_R_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on R channel, LONG_DESC = Insert register slice on R channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_GP1, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_GP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP1_B_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on B channel, LONG_DESC = Insert register slice on B channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_GP1, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_GP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP1_WRITE_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Write Data FIFO Depth, LONG_DESC = Depth of bus interface write data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_GP1, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_GP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP1_READ_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Read Data FIFO Depth, LONG_DESC = Depth of bus interface read data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_GP1, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_GP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP1_WRITE_ACCEPTANCE = 8, RANGE = (1, 2, 4, 8, 16, 32), ASSOCIATION = SLAVE, DESC = Write Transaction Acceptance Limit, LONG_DESC = Maximum number of active write transactions that the bus interface can accept. This parameter is ignored when the IP is connected to an interconnect in SASD mode., CONST_RANGE = , IS_RANGE_CONST = TRUE, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, ISVALID = (C_USE_S_AXI_GP1 == 1), BUS = S_AXI_GP1, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, GUI_PERMIT = , MPD_VALUE = 8, RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_GP1_READ_ACCEPTANCE = 8, RANGE = (1, 2, 4, 8, 16, 32), ASSOCIATION = SLAVE, DESC = Read Transaction Acceptance Limit, LONG_DESC = Maximum number of active read transactions that the bus interface can accept. This parameter is ignored when the IP is connected to an interconnect in SASD mode., CONST_RANGE = , IS_RANGE_CONST = TRUE, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, ISVALID = (C_USE_S_AXI_GP1 == 1), BUS = S_AXI_GP1, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, GUI_PERMIT = , MPD_VALUE = 8, RESOLVED_BUS = 
 PARAMETER C_S_AXI_GP1_ADDED_AXI_PARAMS = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_S_AXI_GP1_AXI_VER = 1.01.a, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_INTERCONNECT_S_AXI_ACP_MASTERS = none, DT = string, TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Masters that can talk to this slave, LONG_DESC = The '&' separated list of master interfaces that can access this slave, GUI_PERMIT = , BUS = S_AXI_ACP, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = none, ISVALID = (C_USE_S_AXI_ACP == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_ACP_IS_ACLK_ASYNC = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Is ACLK Asynchronous to Interconnect_ACLK, LONG_DESC = Is ACLK asynchronous with respect to the interconnect's ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_ACP, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_ACP == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_ACP_ACLK_RATIO = 1, DT = integer, TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = UPDATE, DESC = ACLK Frequency Ratio, LONG_DESC = In relation to C_INTERCONNECT_ACLK_RATIO on the interconnect, indicates the ratio of the ACLK frequency of this bus interface to the frequency of Interconnect_ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , BUS = S_AXI_ACP, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 1, ISVALID = (C_USE_S_AXI_ACP == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_ACP_SECURE = 0, DT = integer, RANGE = (0,1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Require TrustZone Secure on all accesses, LONG_DESC = All accesses to slave required to be secure, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_ACP, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_ACP == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_ACP_AW_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AW channel, LONG_DESC = Insert register slice on AW channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_ACP, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_ACP == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_ACP_AR_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AR channel, LONG_DESC = Insert register slice on AR channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_ACP, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_ACP == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_ACP_W_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on W channel, LONG_DESC = Insert register slice on W channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_ACP, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_ACP == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_ACP_R_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on R channel, LONG_DESC = Insert register slice on R channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_ACP, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_ACP == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_ACP_B_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on B channel, LONG_DESC = Insert register slice on B channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_ACP, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_ACP == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_ACP_WRITE_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Write Data FIFO Depth, LONG_DESC = Depth of bus interface write data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_ACP, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_ACP == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_ACP_READ_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Read Data FIFO Depth, LONG_DESC = Depth of bus interface read data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_ACP, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_ACP == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_ACP_WRITE_ACCEPTANCE = 8, ASSOCIATION = SLAVE, DESC = Write Transaction Acceptance Limit, LONG_DESC = Maximum number of active write transactions that the bus interface can accept. This parameter is ignored when the IP is connected to an interconnect in SASD mode., AXI_VER = 1.01.a, BUS_TYPE = SLAVE, ISVALID = (C_USE_S_AXI_ACP == 1), BUS = S_AXI_ACP, DT = INTEGER, RANGE = (1:8), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8, RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_ACP_READ_ACCEPTANCE = 8, ASSOCIATION = SLAVE, DESC = Read Transaction Acceptance Limit, LONG_DESC = Maximum number of active read transactions that the bus interface can accept. This parameter is ignored when the IP is connected to an interconnect in SASD mode., AXI_VER = 1.01.a, BUS_TYPE = SLAVE, ISVALID = (C_USE_S_AXI_ACP == 1), BUS = S_AXI_ACP, DT = INTEGER, RANGE = (1:8), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8, RESOLVED_BUS = 
 PARAMETER C_S_AXI_ACP_ADDED_AXI_PARAMS = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_S_AXI_ACP_AXI_VER = 1.01.a, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_INTERCONNECT_S_AXI_HP0_MASTERS = axi_dma_0.M_AXI_SG & axi_dma_0.M_AXI_MM2S & axi_dma_0.M_AXI_S2MM, DT = string, TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Masters that can talk to this slave, LONG_DESC = The '&' separated list of master interfaces that can access this slave, GUI_PERMIT = , BUS = S_AXI_HP0, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = none, ISVALID = (C_USE_S_AXI_HP0 == 1), MHS_VALUE = axi_dma_0.M_AXI_SG & axi_dma_0.M_AXI_MM2S & axi_dma_0.M_AXI_S2MM, RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_INTERCONNECT_S_AXI_HP0_IS_ACLK_ASYNC = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Is ACLK Asynchronous to Interconnect_ACLK, LONG_DESC = Is ACLK asynchronous with respect to the interconnect's ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP0, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP0 == 1), RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_INTERCONNECT_S_AXI_HP0_ACLK_RATIO = 1, DT = integer, RANGE = (1 : 2147483647), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = UPDATE, DESC = ACLK Frequency Ratio, LONG_DESC = In relation to C_INTERCONNECT_ACLK_RATIO on the interconnect, indicates the ratio of the ACLK frequency of this bus interface to the frequency of INTERCONNECT_ACLK. Automatically set to the ACLK frequency in Hz., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP0, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 1, ISVALID = (C_USE_S_AXI_HP0 == 1), RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_INTERCONNECT_S_AXI_HP0_SECURE = 0, DT = integer, RANGE = (0,1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Require TrustZone Secure on all accesses, LONG_DESC = All accesses to slave required to be secure, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP0, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP0 == 1), RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_INTERCONNECT_S_AXI_HP0_AW_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AW channel, LONG_DESC = Insert register slice on AW channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP0, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP0 == 1), RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_INTERCONNECT_S_AXI_HP0_AR_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AR channel, LONG_DESC = Insert register slice on AR channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP0, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP0 == 1), RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_INTERCONNECT_S_AXI_HP0_W_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on W channel, LONG_DESC = Insert register slice on W channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP0, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP0 == 1), RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_INTERCONNECT_S_AXI_HP0_R_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on R channel, LONG_DESC = Insert register slice on R channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP0, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP0 == 1), RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_INTERCONNECT_S_AXI_HP0_B_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on B channel, LONG_DESC = Insert register slice on B channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP0, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP0 == 1), RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_INTERCONNECT_S_AXI_HP0_WRITE_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Write Data FIFO Depth, LONG_DESC = Depth of bus interface write data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP0, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP0 == 1), RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_INTERCONNECT_S_AXI_HP0_WRITE_FIFO_DELAY = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Write Data FIFO Burst Delay, LONG_DESC = Delay issuing M_AXI_AWVALID until complete burst is stored in write data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP0, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP0 == 1), RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_INTERCONNECT_S_AXI_HP0_READ_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Read Data FIFO Depth, LONG_DESC = Depth of bus interface read data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP0, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP0 == 1), RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_INTERCONNECT_S_AXI_HP0_READ_FIFO_DELAY = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Read Data FIFO Burst Delay, LONG_DESC = Delay issuing M_AXI_ARVALID until read data FIFO has vacancy to store entire burst length, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP0, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP0 == 1), RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_INTERCONNECT_S_AXI_HP0_WRITE_ACCEPTANCE = 8, ASSOCIATION = SLAVE, DESC = Write Transaction Acceptance Limit, LONG_DESC = Maximum number of active write transactions that the bus interface can accept. This parameter is ignored when the IP is connected to an interconnect in Shared-Access mode., AXI_VER = 1.06.a, BUS_TYPE = SLAVE, ISVALID = (C_USE_S_AXI_HP0 == 1), BUS = S_AXI_HP0, DT = INTEGER, RANGE = (1:8), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8, RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_INTERCONNECT_S_AXI_HP0_READ_ACCEPTANCE = 8, ASSOCIATION = SLAVE, DESC = Read Transaction Acceptance Limit, LONG_DESC = Maximum number of active read transactions that the bus interface can accept. This parameter is ignored when the IP is connected to an interconnect in Shared-Access mode., AXI_VER = 1.06.a, BUS_TYPE = SLAVE, ISVALID = (C_USE_S_AXI_HP0 == 1), BUS = S_AXI_HP0, DT = INTEGER, RANGE = (1:8), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8, RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_S_AXI_HP0_ADDED_AXI_PARAMS = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_S_AXI_HP0_AXI_VER = 1.06.a, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_INTERCONNECT_S_AXI_HP1_MASTERS = none, DT = string, TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Masters that can talk to this slave, LONG_DESC = The '&' separated list of master interfaces that can access this slave, GUI_PERMIT = , BUS = S_AXI_HP1, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = none, ISVALID = (C_USE_S_AXI_HP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP1_IS_ACLK_ASYNC = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Is ACLK Asynchronous to Interconnect_ACLK, LONG_DESC = Is ACLK asynchronous with respect to the interconnect's ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP1, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP1_ACLK_RATIO = 1, DT = integer, TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = UPDATE, DESC = ACLK Frequency Ratio, LONG_DESC = In relation to C_INTERCONNECT_ACLK_RATIO on the interconnect, indicates the ratio of the ACLK frequency of this bus interface to the frequency of Interconnect_ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , BUS = S_AXI_HP1, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 1, ISVALID = (C_USE_S_AXI_HP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP1_SECURE = 0, DT = integer, RANGE = (0,1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Require TrustZone Secure on all accesses, LONG_DESC = All accesses to slave required to be secure, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP1, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP1_AW_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AW channel, LONG_DESC = Insert register slice on AW channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP1, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP1_AR_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AR channel, LONG_DESC = Insert register slice on AR channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP1, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP1_W_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on W channel, LONG_DESC = Insert register slice on W channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP1, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP1_R_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on R channel, LONG_DESC = Insert register slice on R channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP1, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP1_B_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on B channel, LONG_DESC = Insert register slice on B channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP1, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP1_WRITE_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Write Data FIFO Depth, LONG_DESC = Depth of bus interface write data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP1, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP1_READ_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Read Data FIFO Depth, LONG_DESC = Depth of bus interface read data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP1, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP1 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP1_WRITE_ACCEPTANCE = 8, ASSOCIATION = SLAVE, DESC = Write Transaction Acceptance Limit, LONG_DESC = Maximum number of active write transactions that the bus interface can accept. This parameter is ignored when the IP is connected to an interconnect in SASD mode., AXI_VER = 1.01.a, BUS_TYPE = SLAVE, ISVALID = (C_USE_S_AXI_HP1 == 1), BUS = S_AXI_HP1, DT = INTEGER, RANGE = (1:8), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8, RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP1_READ_ACCEPTANCE = 8, ASSOCIATION = SLAVE, DESC = Read Transaction Acceptance Limit, LONG_DESC = Maximum number of active read transactions that the bus interface can accept. This parameter is ignored when the IP is connected to an interconnect in SASD mode., AXI_VER = 1.01.a, BUS_TYPE = SLAVE, ISVALID = (C_USE_S_AXI_HP1 == 1), BUS = S_AXI_HP1, DT = INTEGER, RANGE = (1:8), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP1_ADDED_AXI_PARAMS = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_S_AXI_HP1_AXI_VER = 1.01.a, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_INTERCONNECT_S_AXI_HP2_MASTERS = none, DT = string, TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Masters that can talk to this slave, LONG_DESC = The '&' separated list of master interfaces that can access this slave, GUI_PERMIT = , BUS = S_AXI_HP2, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = none, ISVALID = (C_USE_S_AXI_HP2 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP2_IS_ACLK_ASYNC = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Is ACLK Asynchronous to Interconnect_ACLK, LONG_DESC = Is ACLK asynchronous with respect to the interconnect's ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP2, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP2 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP2_ACLK_RATIO = 1, DT = integer, TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = UPDATE, DESC = ACLK Frequency Ratio, LONG_DESC = In relation to C_INTERCONNECT_ACLK_RATIO on the interconnect, indicates the ratio of the ACLK frequency of this bus interface to the frequency of Interconnect_ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , BUS = S_AXI_HP2, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 1, ISVALID = (C_USE_S_AXI_HP2 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP2_SECURE = 0, DT = integer, RANGE = (0,1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Require TrustZone Secure on all accesses, LONG_DESC = All accesses to slave required to be secure, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP2, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP2 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP2_AW_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AW channel, LONG_DESC = Insert register slice on AW channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP2, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP2 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP2_AR_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AR channel, LONG_DESC = Insert register slice on AR channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP2, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP2 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP2_W_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on W channel, LONG_DESC = Insert register slice on W channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP2, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP2 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP2_R_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on R channel, LONG_DESC = Insert register slice on R channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP2, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP2 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP2_B_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on B channel, LONG_DESC = Insert register slice on B channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP2, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP2 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP2_WRITE_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Write Data FIFO Depth, LONG_DESC = Depth of bus interface write data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP2, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP2 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP2_READ_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Read Data FIFO Depth, LONG_DESC = Depth of bus interface read data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP2, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP2 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP2_WRITE_ACCEPTANCE = 8, ASSOCIATION = SLAVE, DESC = Write Transaction Acceptance Limit, LONG_DESC = Maximum number of active write transactions that the bus interface can accept. This parameter is ignored when the IP is connected to an interconnect in SASD mode., AXI_VER = 1.01.a, BUS_TYPE = SLAVE, ISVALID = (C_USE_S_AXI_HP2 == 1), BUS = S_AXI_HP2, DT = INTEGER, RANGE = (1:8), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8, RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP2_READ_ACCEPTANCE = 8, ASSOCIATION = SLAVE, DESC = Read Transaction Acceptance Limit, LONG_DESC = Maximum number of active read transactions that the bus interface can accept. This parameter is ignored when the IP is connected to an interconnect in SASD mode., AXI_VER = 1.01.a, BUS_TYPE = SLAVE, ISVALID = (C_USE_S_AXI_HP2 == 1), BUS = S_AXI_HP2, DT = INTEGER, RANGE = (1:8), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP2_ADDED_AXI_PARAMS = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_S_AXI_HP2_AXI_VER = 1.01.a, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_INTERCONNECT_S_AXI_HP3_MASTERS = none, DT = string, TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Masters that can talk to this slave, LONG_DESC = The '&' separated list of master interfaces that can access this slave, GUI_PERMIT = , BUS = S_AXI_HP3, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = none, ISVALID = (C_USE_S_AXI_HP3 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP3_IS_ACLK_ASYNC = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Is ACLK Asynchronous to Interconnect_ACLK, LONG_DESC = Is ACLK asynchronous with respect to the interconnect's ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP3, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP3 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP3_ACLK_RATIO = 1, DT = integer, TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = UPDATE, DESC = ACLK Frequency Ratio, LONG_DESC = In relation to C_INTERCONNECT_ACLK_RATIO on the interconnect, indicates the ratio of the ACLK frequency of this bus interface to the frequency of Interconnect_ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , BUS = S_AXI_HP3, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 1, ISVALID = (C_USE_S_AXI_HP3 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP3_SECURE = 0, DT = integer, RANGE = (0,1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Require TrustZone Secure on all accesses, LONG_DESC = All accesses to slave required to be secure, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP3, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP3 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP3_AW_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AW channel, LONG_DESC = Insert register slice on AW channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP3, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP3 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP3_AR_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AR channel, LONG_DESC = Insert register slice on AR channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP3, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP3 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP3_W_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on W channel, LONG_DESC = Insert register slice on W channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP3, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP3 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP3_R_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on R channel, LONG_DESC = Insert register slice on R channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP3, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP3 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP3_B_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on B channel, LONG_DESC = Insert register slice on B channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP3, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP3 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP3_WRITE_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Write Data FIFO Depth, LONG_DESC = Depth of bus interface write data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP3, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP3 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP3_READ_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Read Data FIFO Depth, LONG_DESC = Depth of bus interface read data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_HP3, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_S_AXI_HP3 == 1), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP3_WRITE_ACCEPTANCE = 8, ASSOCIATION = SLAVE, DESC = Write Transaction Acceptance Limit, LONG_DESC = Maximum number of active write transactions that the bus interface can accept. This parameter is ignored when the IP is connected to an interconnect in SASD mode., AXI_VER = 1.01.a, BUS_TYPE = SLAVE, ISVALID = (C_USE_S_AXI_HP3 == 1), BUS = S_AXI_HP3, DT = INTEGER, RANGE = (1:8), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8, RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_HP3_READ_ACCEPTANCE = 8, ASSOCIATION = SLAVE, DESC = Read Transaction Acceptance Limit, LONG_DESC = Maximum number of active read transactions that the bus interface can accept. This parameter is ignored when the IP is connected to an interconnect in SASD mode., AXI_VER = 1.01.a, BUS_TYPE = SLAVE, ISVALID = (C_USE_S_AXI_HP3 == 1), BUS = S_AXI_HP3, DT = INTEGER, RANGE = (1:8), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP3_ADDED_AXI_PARAMS = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_S_AXI_HP3_AXI_VER = 1.01.a, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_EN_EMIO_CAN0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_EMIO_CAN1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_EMIO_ENET0 = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (0,1), TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_EMIO_ENET1 = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (0,1), TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_EMIO_GPIO = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = UPDATE, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_EMIO_GPIO_WIDTH, MPD_VALUE = 0
 PARAMETER C_EN_EMIO_I2C0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_EMIO_I2C1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_EMIO_PJTAG = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_EMIO_SDIO0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_EMIO_CD_SDIO0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_EMIO_WP_SDIO0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_EMIO_SDIO1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_EMIO_CD_SDIO1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_EMIO_WP_SDIO1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_EMIO_SPI0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_EMIO_SPI1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_EMIO_UART0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_EMIO_UART1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_EMIO_MODEM_UART0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_EMIO_MODEM_UART1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_EMIO_TTC0 = 1, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 1
 PARAMETER C_EN_EMIO_TTC1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_EMIO_WDT = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_EMIO_TRACE = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (0,1), TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_USE_M_AXI_GP0 = 1, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_M_AXI_GP0_PROTOCOL:C_M_AXI_GP0_ID_WIDTH:C_M_AXI_GP0_ADDR_WIDTH:C_M_AXI_GP0_DATA_WIDTH:C_M_AXI_GP0_ENABLE_STATIC_REMAP:C_M_AXI_GP0_SUPPORTS_NARROW_BURST:C_M_AXI_GP0_SUPPORTS_REORDERING, MPD_VALUE = 0, MHS_VALUE = 1
 PARAMETER C_USE_M_AXI_GP1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_M_AXI_GP1_PROTOCOL:C_M_AXI_GP1_ID_WIDTH:C_M_AXI_GP1_ADDR_WIDTH:C_M_AXI_GP1_DATA_WIDTH:C_M_AXI_GP1_ENABLE_STATIC_REMAP:C_M_AXI_GP1_SUPPORTS_NARROW_BURST:C_M_AXI_GP1_SUPPORTS_REORDERING, MPD_VALUE = 0
 PARAMETER C_USE_S_AXI_GP0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_S_AXI_GP0_ENABLE_LOWOCM_DDR:C_S_AXI_GP0_PROTOCOL:C_S_AXI_GP0_ID_WIDTH:C_S_AXI_GP0_ADDR_WIDTH:C_S_AXI_GP0_DATA_WIDTH:C_S_AXI_GP0_BASEADDR:C_S_AXI_GP0_HIGHADDR:C_S_AXI_GP0_LOWOCM_DDR_BASEADDR:C_S_AXI_GP0_LOWOCM_DDR_HIGHADDR:C_M_AXI_GP0_SUPPORTS_THREADS:C_M_AXI_GP0_THREAD_ID_WIDTH, MPD_VALUE = 0
 PARAMETER C_USE_S_AXI_GP1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_S_AXI_GP1_ENABLE_LOWOCM_DDR:C_S_AXI_GP1_PROTOCOL:C_S_AXI_GP1_ID_WIDTH:C_S_AXI_GP1_ADDR_WIDTH:C_S_AXI_GP1_DATA_WIDTH:C_S_AXI_GP1_BASEADDR:C_S_AXI_GP1_HIGHADDR:C_S_AXI_GP1_LOWOCM_DDR_BASEADDR:C_S_AXI_GP1_LOWOCM_DDR_HIGHADDR:C_M_AXI_GP1_SUPPORTS_THREADS:C_M_AXI_GP1_THREAD_ID_WIDTH, MPD_VALUE = 0
 PARAMETER C_USE_S_AXI_ACP = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_S_AXI_ACP_ENABLE_HIGHOCM:C_USE_DEFAULT_ACP_USER_VAL:C_S_AXI_ACP_ARUSER_VAL:C_S_AXI_ACP_AWUSER_VAL:C_S_AXI_ACP_PROTOCOL:C_S_AXI_ACP_ID_WIDTH:C_S_AXI_ACP_ADDR_WIDTH:C_S_AXI_ACP_DATA_WIDTH:C_S_AXI_ACP_BASEADDR:C_S_AXI_ACP_HIGHADDR:C_S_AXI_ACP_HIGHOCM_BASEADDR:C_S_AXI_ACP_HIGHOCM_HIGHADDR, MPD_VALUE = 0
 PARAMETER C_USE_S_AXI_HP0 = 1, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_S_AXI_HP0_ENABLE_HIGHOCM:C_S_AXI_HP0_PROTOCOL:C_S_AXI_HP0_ID_WIDTH:C_S_AXI_HP0_ADDR_WIDTH:C_S_AXI_HP0_DATA_WIDTH:C_S_AXI_HP0_BASEADDR:C_S_AXI_HP0_HIGHADDR:C_S_AXI_HP0_HIGHOCM_BASEADDR:C_S_AXI_HP0_HIGHOCM_HIGHADDR, MPD_VALUE = 0, MHS_VALUE = 1
 PARAMETER C_USE_S_AXI_HP1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_S_AXI_HP1_ENABLE_HIGHOCM:C_S_AXI_HP1_PROTOCOL:C_S_AXI_HP1_ID_WIDTH:C_S_AXI_HP1_ADDR_WIDTH:C_S_AXI_HP1_DATA_WIDTH:C_S_AXI_HP1_BASEADDR:C_S_AXI_HP1_HIGHADDR:C_S_AXI_HP1_HIGHOCM_BASEADDR:C_S_AXI_HP1_HIGHOCM_HIGHADDR, MPD_VALUE = 0
 PARAMETER C_USE_S_AXI_HP2 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_S_AXI_HP2_ENABLE_HIGHOCM:C_S_AXI_HP2_PROTOCOL:C_S_AXI_HP2_ID_WIDTH:C_S_AXI_HP2_ADDR_WIDTH:C_S_AXI_HP2_DATA_WIDTH:C_S_AXI_HP2_BASEADDR:C_S_AXI_HP2_HIGHADDR:C_S_AXI_HP2_HIGHOCM_BASEADDR:C_S_AXI_HP2_HIGHOCM_HIGHADDR, MPD_VALUE = 0
 PARAMETER C_USE_S_AXI_HP3 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_S_AXI_HP3_ENABLE_HIGHOCM:C_S_AXI_HP3_PROTOCOL:C_S_AXI_HP3_ID_WIDTH:C_S_AXI_HP3_ADDR_WIDTH:C_S_AXI_HP3_DATA_WIDTH:C_S_AXI_HP3_BASEADDR:C_S_AXI_HP3_HIGHADDR:C_S_AXI_HP3_HIGHOCM_BASEADDR:C_S_AXI_HP3_HIGHOCM_HIGHADDR, MPD_VALUE = 0
 PARAMETER C_S_AXI_GP0_ENABLE_LOWOCM_DDR = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_S_AXI_GP0 == 1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_S_AXI_GP0_LOWOCM_DDR_BASEADDR:C_S_AXI_GP0_LOWOCM_DDR_HIGHADDR, MPD_VALUE = 0
 PARAMETER C_S_AXI_GP1_ENABLE_LOWOCM_DDR = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_S_AXI_GP1 == 1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_S_AXI_GP1_LOWOCM_DDR_BASEADDR:C_S_AXI_GP1_LOWOCM_DDR_HIGHADDR, MPD_VALUE = 0
 PARAMETER C_S_AXI_ACP_ENABLE_HIGHOCM = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_S_AXI_ACP == 1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_S_AXI_ACP_HIGHOCM_BASEADDR:C_S_AXI_ACP_HIGHOCM_HIGHADDR, MPD_VALUE = 0
 PARAMETER C_S_AXI_HP0_ENABLE_HIGHOCM = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_S_AXI_HP0 == 1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_S_AXI_HP0_HIGHOCM_BASEADDR:C_S_AXI_HP0_HIGHOCM_HIGHADDR, MPD_VALUE = 0
 PARAMETER C_S_AXI_HP1_ENABLE_HIGHOCM = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_S_AXI_HP1 == 1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_S_AXI_HP1_HIGHOCM_BASEADDR:C_S_AXI_HP1_HIGHOCM_HIGHADDR, MPD_VALUE = 0
 PARAMETER C_S_AXI_HP2_ENABLE_HIGHOCM = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_S_AXI_HP2 == 1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_S_AXI_HP2_HIGHOCM_BASEADDR:C_S_AXI_HP2_HIGHOCM_HIGHADDR, MPD_VALUE = 0
 PARAMETER C_S_AXI_HP3_ENABLE_HIGHOCM = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_S_AXI_HP3 == 1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_S_AXI_HP3_HIGHOCM_BASEADDR:C_S_AXI_HP3_HIGHOCM_HIGHADDR, MPD_VALUE = 0
 PARAMETER C_USE_DMA0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_USE_DMA1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_USE_DMA2 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_USE_DMA3 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_USE_TRACE = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_INCLUDE_TRACE_BUFFER:C_TRACE_BUFFER_FIFO_SIZE:USE_TRACE_DATA_EDGE_DETECTOR:C_TRACE_BUFFER_CLOCK_DELAY, MPD_VALUE = 0
 PARAMETER C_INCLUDE_TRACE_BUFFER = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_TRACE == 1), TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_TRACE_BUFFER_FIFO_SIZE = 128, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (32, 64, 128, 256), ISVALID = (C_USE_TRACE == 1), TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 128
 PARAMETER USE_TRACE_DATA_EDGE_DETECTOR = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_TRACE == 1), TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_TRACE_BUFFER_CLOCK_DELAY = 12, DT = INTEGER, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_TRACE == 1), TYPE = HDL, GUI_PERMIT = , MPD_VALUE = 12
 PARAMETER C_USE_CROSS_TRIGGER = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_USE_CR_FABRIC = 1, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1, MHS_VALUE = 1
 PARAMETER C_USE_AXI_FABRIC_IDLE = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_USE_DDR_BYPASS = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_USE_FABRIC_INTERRUPT = 1, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_USE_PROC_EVENT_BUS = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_EN_EMIO_SRAM_INT = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EMIO_GPIO_WIDTH = 64, DT = INTEGER, ASSIGNMENT = UPDATE, RANGE = (1:64), ISVALID = (C_EN_EMIO_GPIO == 1), AFFECTS_PORTS_VEC = GPIO_I:GPIO_O:GPIO_T:GPIO, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 64, MHS_VALUE = 64
 PARAMETER C_INCLUDE_ACP_TRANS_CHECK = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (0,1), TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_USE_DEFAULT_ACP_USER_VAL = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_S_AXI_ACP == 1), TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_S_AXI_ACP_ARUSER_VAL:C_S_AXI_ACP_AWUSER_VAL, MPD_VALUE = 0
 PARAMETER C_S_AXI_ACP_ARUSER_VAL = 31, DT = INTEGER, BUS = S_AXI_ACP, RANGE = (0:31), ASSIGNMENT = OPTIONAL, ISVALID = (C_USE_S_AXI_ACP == 1 && C_USE_DEFAULT_ACP_USER_VAL == 1), TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 31, RESOLVED_BUS = 
 PARAMETER C_S_AXI_ACP_AWUSER_VAL = 31, DT = INTEGER, BUS = S_AXI_ACP, RANGE = (0:31), ASSIGNMENT = OPTIONAL, ISVALID = (C_USE_S_AXI_ACP == 1 && C_USE_DEFAULT_ACP_USER_VAL == 1), TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 31, RESOLVED_BUS = 
 PARAMETER C_DQ_WIDTH = 32, DT = INTEGER, RANGE = (16, 32), ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_for_dq_ports, AFFECTS_PORTS_VEC = DDR_DQ, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32
 PARAMETER C_DQS_WIDTH = 4, DT = INTEGER, RANGE = (0:4), ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_for_dqs_ports, AFFECTS_PORTS_VEC = DDR_DQS:DDR_DQS_n, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 4
 PARAMETER C_DM_WIDTH = 4, DT = INTEGER, RANGE = (0:4), ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_for_dm_ports, AFFECTS_PORTS_VEC = DDR_DM, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 4
 PARAMETER C_MIO_PRIMITIVE = 54, DT = INTEGER, RANGE = (54, 32), ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_for_mio_primitive, AFFECTS_PORTS_VEC = MIO, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 54
 PARAMETER C_PACKAGE_NAME = clg484, DT = STRING, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_for_package, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = clg484
 PARAMETER C_PS7_SI_REV = PRODUCTION, DT = STRING, VALUES = (1.0=1.0, 2.0=2.0, 3.0=3.0, PRODUCTION=PRODUCTION), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = PRODUCTION
 PARAMETER C_UART_BAUD_RATE = 115200, DT = STRING, VALUES = (110= 110 , 300= 300 , 1200= 1200 , 2400= 2400 , 4800= 4800 , 9600= 9600 , 19200= 19200 , 38400= 38400 , 57600= 57600 , 115200= 115200 , 128000= 128000 , 230400= 230400 , 460800= 460800 , 921600= 921600), ASSIGNMENT = OPTIONAL, TYPE = NON_HDL, ISVALID = ((C_EN_UART0 == 1) || (C_EN_UART1)), GUI_PERMIT = , MPD_VALUE = 115200
 PARAMETER C_DDR_RAM_BASEADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_DDR_RAM_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ADDR_TYPE = MEMORY, ISVALID = ( C_EN_DDR == 1), BUS = , BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0x00000000, RESOLVED_BUS = 
 PARAMETER C_DDR_RAM_HIGHADDR = 0x1FFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_DDR_RAM_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = OPTIONAL, TYPE = NON_HDL, ADDR_TYPE = MEMORY, ISVALID = ( C_EN_DDR == 1), BUS = , BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0x3FFFFFFF, MHS_VALUE = 0x1FFFFFFF, RESOLVED_BUS = 
 PARAMETER C_UART0_BASEADDR = 0xE0000000, DT = std_logic_vector(31 downto 0), PAIR = C_UART0_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_UART0 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0000000, RESOLVED_BUS = 
 PARAMETER C_UART0_HIGHADDR = 0xE0000FFF, DT = std_logic_vector(31 downto 0), PAIR = C_UART0_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_UART0 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0000FFF, RESOLVED_BUS = 
 PARAMETER C_UART1_BASEADDR = 0xE0001000, DT = std_logic_vector(31 downto 0), PAIR = C_UART1_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_UART1 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0001000, RESOLVED_BUS = 
 PARAMETER C_UART1_HIGHADDR = 0xE0001FFF, DT = std_logic_vector(31 downto 0), PAIR = C_UART1_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_UART1 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0001FFF, RESOLVED_BUS = 
 PARAMETER C_I2C0_BASEADDR = 0xE0004000, DT = std_logic_vector(31 downto 0), PAIR = C_I2C0_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_I2C0 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0004000, RESOLVED_BUS = 
 PARAMETER C_I2C0_HIGHADDR = 0xE0004FFF, DT = std_logic_vector(31 downto 0), PAIR = C_I2C0_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_I2C0 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0004FFF, RESOLVED_BUS = 
 PARAMETER C_I2C1_BASEADDR = 0xE0005000, DT = std_logic_vector(31 downto 0), PAIR = C_I2C1_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_I2C1 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0005000, RESOLVED_BUS = 
 PARAMETER C_I2C1_HIGHADDR = 0xE0005FFF, DT = std_logic_vector(31 downto 0), PAIR = C_I2C1_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_I2C1 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0005FFF, RESOLVED_BUS = 
 PARAMETER C_SPI0_BASEADDR = 0xE0006000, DT = std_logic_vector(31 downto 0), PAIR = C_SPI0_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_SPI0 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0006000, RESOLVED_BUS = 
 PARAMETER C_SPI0_HIGHADDR = 0xE0006FFF, DT = std_logic_vector(31 downto 0), PAIR = C_SPI0_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_SPI0 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0006FFF, RESOLVED_BUS = 
 PARAMETER C_SPI1_BASEADDR = 0xE0007000, DT = std_logic_vector(31 downto 0), PAIR = C_SPI1_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_SPI1 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0007000, RESOLVED_BUS = 
 PARAMETER C_SPI1_HIGHADDR = 0xE0007FFF, DT = std_logic_vector(31 downto 0), PAIR = C_SPI1_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_SPI1 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0007FFF, RESOLVED_BUS = 
 PARAMETER C_CAN0_BASEADDR = 0xE0008000, DT = std_logic_vector(31 downto 0), PAIR = C_CAN0_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_CAN0 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0008000, RESOLVED_BUS = 
 PARAMETER C_CAN0_HIGHADDR = 0xE0008FFF, DT = std_logic_vector(31 downto 0), PAIR = C_CAN0_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_CAN0 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0008FFF, RESOLVED_BUS = 
 PARAMETER C_CAN1_BASEADDR = 0xE0009000, DT = std_logic_vector(31 downto 0), PAIR = C_CAN1_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_CAN1 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0009000, RESOLVED_BUS = 
 PARAMETER C_CAN1_HIGHADDR = 0xE0009FFF, DT = std_logic_vector(31 downto 0), PAIR = C_CAN1_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_CAN1 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0009FFF, RESOLVED_BUS = 
 PARAMETER C_GPIO_BASEADDR = 0xE000A000, DT = std_logic_vector(31 downto 0), PAIR = C_GPIO_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_GPIO == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE000A000, RESOLVED_BUS = 
 PARAMETER C_GPIO_HIGHADDR = 0xE000AFFF, DT = std_logic_vector(31 downto 0), PAIR = C_GPIO_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_GPIO == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE000AFFF, RESOLVED_BUS = 
 PARAMETER C_ENET0_BASEADDR = 0xE000B000, DT = std_logic_vector(31 downto 0), PAIR = C_ENET0_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_ENET0 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE000B000, RESOLVED_BUS = 
 PARAMETER C_ENET0_HIGHADDR = 0xE000BFFF, DT = std_logic_vector(31 downto 0), PAIR = C_ENET0_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_ENET0 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE000BFFF, RESOLVED_BUS = 
 PARAMETER C_ENET1_BASEADDR = 0xE000C000, DT = std_logic_vector(31 downto 0), PAIR = C_ENET1_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_ENET1 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE000C000, RESOLVED_BUS = 
 PARAMETER C_ENET1_HIGHADDR = 0xE000CFFF, DT = std_logic_vector(31 downto 0), PAIR = C_ENET1_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_ENET1 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE000CFFF, RESOLVED_BUS = 
 PARAMETER C_SDIO0_BASEADDR = 0xE0100000, DT = std_logic_vector(31 downto 0), PAIR = C_SDIO0_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_SDIO0 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0100000, RESOLVED_BUS = 
 PARAMETER C_SDIO0_HIGHADDR = 0xE0100FFF, DT = std_logic_vector(31 downto 0), PAIR = C_SDIO0_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_SDIO0 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0100FFF, RESOLVED_BUS = 
 PARAMETER C_SDIO1_BASEADDR = 0xE0101000, DT = std_logic_vector(31 downto 0), PAIR = C_SDIO1_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_SDIO1 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0101000, RESOLVED_BUS = 
 PARAMETER C_SDIO1_HIGHADDR = 0xE0101FFF, DT = std_logic_vector(31 downto 0), PAIR = C_SDIO1_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_SDIO1 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0101FFF, RESOLVED_BUS = 
 PARAMETER C_USB0_BASEADDR = 0xE0002000, DT = std_logic_vector(31 downto 0), PAIR = C_USB0_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_USB0 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0002000, RESOLVED_BUS = 
 PARAMETER C_USB0_HIGHADDR = 0xE0002FFF, DT = std_logic_vector(31 downto 0), PAIR = C_USB0_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_USB0 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0002FFF, RESOLVED_BUS = 
 PARAMETER C_USB1_BASEADDR = 0xE0003000, DT = std_logic_vector(31 downto 0), PAIR = C_USB1_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_USB1 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0003000, RESOLVED_BUS = 
 PARAMETER C_USB1_HIGHADDR = 0xE0003FFF, DT = std_logic_vector(31 downto 0), PAIR = C_USB1_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_USB1 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0003FFF, RESOLVED_BUS = 
 PARAMETER C_TTC0_BASEADDR = 0xF8001000, DT = std_logic_vector(31 downto 0), PAIR = C_TTC0_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, type = NON_HDL, ISVALID = (C_EN_TTC0 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xF8001000, RESOLVED_BUS = 
 PARAMETER C_TTC0_HIGHADDR = 0xF8001FFF, DT = std_logic_vector(31 downto 0), PAIR = C_TTC0_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, type = NON_HDL, ISVALID = (C_EN_TTC0 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xF8001FFF, RESOLVED_BUS = 
 PARAMETER C_TTC1_BASEADDR = 0xF8002000, DT = std_logic_vector(31 downto 0), PAIR = C_TTC1_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, type = NON_HDL, ISVALID = (C_EN_TTC1 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xF8002000, RESOLVED_BUS = 
 PARAMETER C_TTC1_HIGHADDR = 0xF8002FFF, DT = std_logic_vector(31 downto 0), PAIR = C_TTC1_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, type = NON_HDL, ISVALID = (C_EN_TTC1 == 1), BUS = , ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xF8002FFF, RESOLVED_BUS = 
 PARAMETER C_M_AXI_GP0_PROTOCOL = AXI3, DT = STRING, BUS = M_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_M_AXI_GP0 == 1), GUI_PERMIT = , MPD_VALUE = AXI3, RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_M_AXI_GP0_ID_WIDTH = 12, DT = INTEGER, BUS = M_AXI_GP0, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_M_AXI_GP0 == 1), TYPE = HDL, GUI_PERMIT = , MPD_VALUE = 12, RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_M_AXI_GP0_ADDR_WIDTH = 32, DT = INTEGER, BUS = M_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_M_AXI_GP0 == 1), GUI_PERMIT = , MPD_VALUE = 32, RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_M_AXI_GP0_DATA_WIDTH = 32, DT = INTEGER, BUS = M_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_M_AXI_GP0 == 1), GUI_PERMIT = , MPD_VALUE = 32, RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_M_AXI_GP0_ENABLE_STATIC_REMAP = 0, DT = INTEGER, BUS = M_AXI_GP0, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_M_AXI_GP0 == 1), TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_M_AXI_GP0_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = M_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_M_AXI_GP0 == 1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_M_AXI_GP0_SUPPORTS_REORDERING = 0, DT = INTEGER, BUS = M_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_M_AXI_GP0 == 1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_M_AXI_GP1_PROTOCOL = AXI3, DT = STRING, BUS = M_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_M_AXI_GP1 == 1), GUI_PERMIT = , MPD_VALUE = AXI3, RESOLVED_BUS = 
 PARAMETER C_M_AXI_GP1_ID_WIDTH = 12, DT = INTEGER, BUS = M_AXI_GP1, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_M_AXI_GP1 == 1), TYPE = HDL, GUI_PERMIT = , MPD_VALUE = 12, RESOLVED_BUS = 
 PARAMETER C_M_AXI_GP1_ADDR_WIDTH = 32, DT = INTEGER, BUS = M_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_M_AXI_GP1 == 1), GUI_PERMIT = , MPD_VALUE = 32, RESOLVED_BUS = 
 PARAMETER C_M_AXI_GP1_DATA_WIDTH = 32, DT = INTEGER, BUS = M_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_M_AXI_GP1 == 1), GUI_PERMIT = , MPD_VALUE = 32, RESOLVED_BUS = 
 PARAMETER C_M_AXI_GP1_ENABLE_STATIC_REMAP = 0, DT = INTEGER, BUS = M_AXI_GP1, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_M_AXI_GP1 == 1), TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, RESOLVED_BUS = 
 PARAMETER C_M_AXI_GP1_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = M_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_M_AXI_GP1 == 1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, RESOLVED_BUS = 
 PARAMETER C_M_AXI_GP1_SUPPORTS_REORDERING = 0, DT = INTEGER, BUS = M_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_M_AXI_GP1 == 1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, RESOLVED_BUS = 
 PARAMETER C_S_AXI_GP0_PROTOCOL = AXI3, DT = STRING, BUS = S_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_GP0 == 1), GUI_PERMIT = , MPD_VALUE = AXI3, RESOLVED_BUS = 
 PARAMETER C_S_AXI_GP0_ID_WIDTH = 6, DT = INTEGER, BUS = S_AXI_GP0, ASSIGNMENT = OPTIONAL, RANGE = (1 : 6 ), ISVALID = (C_USE_S_AXI_GP0 == 1), AFFECTS_PORTS_VEC = S_AXI_GP0_BID:S_AXI_GP0_RID:S_AXI_GP0_ARID:S_AXI_GP0_AWID:S_AXI_GP0_WID, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 6, RESOLVED_BUS = 
 PARAMETER C_S_AXI_GP0_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_GP0 == 1), GUI_PERMIT = , MPD_VALUE = 32, RESOLVED_BUS = 
 PARAMETER C_S_AXI_GP0_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_GP0 == 1), GUI_PERMIT = , MPD_VALUE = 32, RESOLVED_BUS = 
 PARAMETER C_S_AXI_GP1_PROTOCOL = AXI3, DT = STRING, BUS = S_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_GP1 == 1), GUI_PERMIT = , MPD_VALUE = AXI3, RESOLVED_BUS = 
 PARAMETER C_S_AXI_GP1_ID_WIDTH = 6, DT = INTEGER, BUS = S_AXI_GP1, ASSIGNMENT = OPTIONAL, RANGE = (1 : 6 ), ISVALID = (C_USE_S_AXI_GP1 == 1), AFFECTS_PORTS_VEC = S_AXI_GP1_BID:S_AXI_GP1_RID:S_AXI_GP1_ARID:S_AXI_GP1_AWID:S_AXI_GP1_WID, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 6, RESOLVED_BUS = 
 PARAMETER C_S_AXI_GP1_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_GP1 == 1), GUI_PERMIT = , MPD_VALUE = 32, RESOLVED_BUS = 
 PARAMETER C_S_AXI_GP1_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_GP1 == 1), GUI_PERMIT = , MPD_VALUE = 32, RESOLVED_BUS = 
 PARAMETER C_S_AXI_ACP_PROTOCOL = AXI3, DT = STRING, BUS = S_AXI_ACP, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_ACP == 1), GUI_PERMIT = , MPD_VALUE = AXI3, RESOLVED_BUS = 
 PARAMETER C_S_AXI_ACP_ID_WIDTH = 3, DT = INTEGER, BUS = S_AXI_ACP, ASSIGNMENT = OPTIONAL, RANGE = (1 : 3), ISVALID = (C_USE_S_AXI_ACP == 1), AFFECTS_PORTS_VEC = S_AXI_ACP_BID:S_AXI_ACP_RID:S_AXI_ACP_ARID:S_AXI_ACP_AWID:S_AXI_ACP_WID, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 3, RESOLVED_BUS = 
 PARAMETER C_S_AXI_ACP_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_ACP, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_ACP == 1), GUI_PERMIT = , MPD_VALUE = 32, RESOLVED_BUS = 
 PARAMETER C_S_AXI_ACP_DATA_WIDTH = 64, DT = INTEGER, BUS = S_AXI_ACP, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_ACP == 1), GUI_PERMIT = , MPD_VALUE = 64, RESOLVED_BUS = 
 PARAMETER C_S_AXI_ACP_SUPPORTS_USER_SIGNALS = 1, DT = INTEGER, BUS = S_AXI_ACP, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, GUI_PERMIT = , MPD_VALUE = 1, RESOLVED_BUS = 
 PARAMETER C_S_AXI_ACP_ARUSER_WIDTH = 5, DT = INTEGER, BUS = S_AXI_ACP, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, GUI_PERMIT = , MPD_VALUE = 5, RESOLVED_BUS = 
 PARAMETER C_S_AXI_ACP_AWUSER_WIDTH = 5, DT = INTEGER, BUS = S_AXI_ACP, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, GUI_PERMIT = , MPD_VALUE = 5, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP0_PROTOCOL = AXI3, DT = STRING, BUS = S_AXI_HP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP0 == 1), GUI_PERMIT = , MPD_VALUE = AXI3, RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_S_AXI_HP0_ID_WIDTH = 6, DT = INTEGER, BUS = S_AXI_HP0, ASSIGNMENT = OPTIONAL, RANGE = (1 : 6), ISVALID = (C_USE_S_AXI_HP0 == 1), AFFECTS_PORTS_VEC = S_AXI_HP0_BID:S_AXI_HP0_RID:S_AXI_HP0_ARID:S_AXI_HP0_AWID:S_AXI_HP0_WID, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 6, RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_S_AXI_HP0_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_HP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP0 == 1), GUI_PERMIT = , MPD_VALUE = 32, RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_S_AXI_HP0_DATA_WIDTH = 64, DT = INTEGER, BUS = S_AXI_HP0, RANGE = (32,64), ISVALID = (C_USE_S_AXI_HP0 == 1), AFFECTS_PORTS_VEC = S_AXI_HP0_RDATA:S_AXI_HP0_WDATA:S_AXI_HP0_WSTRB, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 64, RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_S_AXI_HP1_PROTOCOL = AXI3, DT = STRING, BUS = S_AXI_HP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP1 == 1), GUI_PERMIT = , MPD_VALUE = AXI3, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP1_ID_WIDTH = 6, DT = INTEGER, BUS = S_AXI_HP1, ASSIGNMENT = OPTIONAL, RANGE = (1 : 6), ISVALID = (C_USE_S_AXI_HP1 == 1), AFFECTS_PORTS_VEC = S_AXI_HP1_BID:S_AXI_HP1_RID:S_AXI_HP1_ARID:S_AXI_HP1_AWID:S_AXI_HP1_WID, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 6, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP1_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_HP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP1 == 1), GUI_PERMIT = , MPD_VALUE = 32, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP1_DATA_WIDTH = 64, DT = INTEGER, BUS = S_AXI_HP1, RANGE = (32,64), ISVALID = (C_USE_S_AXI_HP1 == 1), AFFECTS_PORTS_VEC = S_AXI_HP1_RDATA:S_AXI_HP1_WDATA:S_AXI_HP1_WSTRB, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 64, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP2_PROTOCOL = AXI3, DT = STRING, BUS = S_AXI_HP2, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP2 == 1), GUI_PERMIT = , MPD_VALUE = AXI3, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP2_ID_WIDTH = 6, DT = INTEGER, BUS = S_AXI_HP2, ASSIGNMENT = OPTIONAL, RANGE = (1 : 6), ISVALID = (C_USE_S_AXI_HP2 == 1), AFFECTS_PORTS_VEC = S_AXI_HP2_BID:S_AXI_HP2_RID:S_AXI_HP2_ARID:S_AXI_HP2_AWID:S_AXI_HP2_WID, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 6, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP2_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_HP2, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP2 == 1), GUI_PERMIT = , MPD_VALUE = 32, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP2_DATA_WIDTH = 64, DT = INTEGER, BUS = S_AXI_HP2, RANGE = (32,64), ISVALID = (C_USE_S_AXI_HP2 == 1), AFFECTS_PORTS_VEC = S_AXI_HP2_RDATA:S_AXI_HP2_WDATA:S_AXI_HP2_WSTRB, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 64, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP3_PROTOCOL = AXI3, DT = STRING, BUS = S_AXI_HP3, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP3 == 1), GUI_PERMIT = , MPD_VALUE = AXI3, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP3_ID_WIDTH = 6, DT = INTEGER, BUS = S_AXI_HP3, ASSIGNMENT = OPTIONAL, RANGE = (1 : 6), ISVALID = (C_USE_S_AXI_HP3 == 1), AFFECTS_PORTS_VEC = S_AXI_HP3_BID:S_AXI_HP3_RID:S_AXI_HP3_ARID:S_AXI_HP3_AWID:S_AXI_HP3_WID, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 6, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP3_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_HP3, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP3 == 1), GUI_PERMIT = , MPD_VALUE = 32, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP3_DATA_WIDTH = 64, DT = INTEGER, BUS = S_AXI_HP3, RANGE = (32,64), ISVALID = (C_USE_S_AXI_HP3 == 1), AFFECTS_PORTS_VEC = S_AXI_HP3_RDATA:S_AXI_HP3_WDATA:S_AXI_HP3_WSTRB, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 64, RESOLVED_BUS = 
 PARAMETER C_S_AXI_GP0_BASEADDR = 0xE0000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_GP0_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_GP0 == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0000000, RESOLVED_BUS = 
 PARAMETER C_S_AXI_GP0_HIGHADDR = 0xFFFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_GP0_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_GP0 == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xFFFFFFFF, RESOLVED_BUS = 
 PARAMETER C_S_AXI_GP0_LOWOCM_DDR_BASEADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_GP0_LOWOCM_DDR_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_S_AXI_GP0 == 1 && C_S_AXI_GP0_ENABLE_LOWOCM_DDR == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0x00000000, RESOLVED_BUS = 
 PARAMETER C_S_AXI_GP0_LOWOCM_DDR_HIGHADDR = 0x3FFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_GP0_LOWOCM_DDR_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_S_AXI_GP0 == 1 && C_S_AXI_GP0_ENABLE_LOWOCM_DDR == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0x3FFFFFFF, RESOLVED_BUS = 
 PARAMETER C_S_AXI_GP1_BASEADDR = 0xE0000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_GP1_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_GP1 == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xE0000000, RESOLVED_BUS = 
 PARAMETER C_S_AXI_GP1_HIGHADDR = 0xFFFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_GP1_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_GP1 == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xFFFFFFFF, RESOLVED_BUS = 
 PARAMETER C_S_AXI_GP1_LOWOCM_DDR_BASEADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_GP1_LOWOCM_DDR_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_S_AXI_GP1 == 1 && C_S_AXI_GP1_ENABLE_LOWOCM_DDR == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0x00000000, RESOLVED_BUS = 
 PARAMETER C_S_AXI_GP1_LOWOCM_DDR_HIGHADDR = 0x3FFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_GP1_LOWOCM_DDR_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_S_AXI_GP1 == 1 && C_S_AXI_GP1_ENABLE_LOWOCM_DDR == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0x3FFFFFFF, RESOLVED_BUS = 
 PARAMETER C_S_AXI_ACP_BASEADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_ACP_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_ACP, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_S_AXI_ACP == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0x00000000, RESOLVED_BUS = 
 PARAMETER C_S_AXI_ACP_HIGHADDR = 0x3FFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_ACP_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_ACP, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_S_AXI_ACP == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0x3FFFFFFF, RESOLVED_BUS = 
 PARAMETER C_S_AXI_ACP_HIGHOCM_BASEADDR = 0xFFFC0000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_ACP_HIGHOCM_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_ACP, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_ACP == 1 && C_S_AXI_ACP_ENABLE_HIGHOCM == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xFFFC0000, RESOLVED_BUS = 
 PARAMETER C_S_AXI_ACP_HIGHOCM_HIGHADDR = 0xFFFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_ACP_HIGHOCM_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_ACP, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_ACP == 1 && C_S_AXI_ACP_ENABLE_HIGHOCM == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xFFFFFFFF, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP0_BASEADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP0_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_HP0, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_S_AXI_HP0 == 1 && C_EN_DDR == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0x00000000, MIN_SIZE = 0x1000, RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_S_AXI_HP0_HIGHADDR = 0x3FFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP0_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_HP0, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_for_hp_ports, ISVALID = (C_USE_S_AXI_HP0 == 1 && C_EN_DDR == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0x3FFFFFFF, MIN_SIZE = 0x1000, RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_S_AXI_HP0_HIGHOCM_BASEADDR = 0xFFFC0000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP0_HIGHOCM_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_HP0, CACHEABLE = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP0 == 1 && C_S_AXI_HP0_ENABLE_HIGHOCM == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xFFFC0000, MIN_SIZE = 0x1000, RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_S_AXI_HP0_HIGHOCM_HIGHADDR = 0xFFFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP0_HIGHOCM_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_HP0, CACHEABLE = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP0 == 1 && C_S_AXI_HP0_ENABLE_HIGHOCM == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xFFFFFFFF, MIN_SIZE = 0x1000, RESOLVED_BUS = S_AXI_HP0
 PARAMETER C_S_AXI_HP1_BASEADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP1_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_HP1, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_S_AXI_HP1 == 1 && C_EN_DDR == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0x00000000, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP1_HIGHADDR = 0x3FFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP1_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_HP1, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_for_hp_ports, ISVALID = (C_USE_S_AXI_HP1 == 1 && C_EN_DDR == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0x3FFFFFFF, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP1_HIGHOCM_BASEADDR = 0xFFFC0000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP1_HIGHOCM_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_HP1, CACHEABLE = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP1 == 1 && C_S_AXI_HP1_ENABLE_HIGHOCM == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xFFFC0000, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP1_HIGHOCM_HIGHADDR = 0xFFFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP1_HIGHOCM_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_HP1, CACHEABLE = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP1 == 1 && C_S_AXI_HP1_ENABLE_HIGHOCM == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xFFFFFFFF, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP2_BASEADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP2_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_HP2, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_S_AXI_HP2 == 1 && C_EN_DDR == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0x00000000, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP2_HIGHADDR = 0x3FFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP2_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_HP2, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_for_hp_ports, ISVALID = (C_USE_S_AXI_HP2 == 1 && C_EN_DDR == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0x3FFFFFFF, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP2_HIGHOCM_BASEADDR = 0xFFFC0000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP2_HIGHOCM_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_HP2, CACHEABLE = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP2 == 1 && C_S_AXI_HP2_ENABLE_HIGHOCM == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xFFFC0000, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP2_HIGHOCM_HIGHADDR = 0xFFFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP2_HIGHOCM_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_HP2, CACHEABLE = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP2 == 1 && C_S_AXI_HP2_ENABLE_HIGHOCM == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xFFFFFFFF, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP3_BASEADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP3_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_HP3, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_S_AXI_HP3 == 1 && C_EN_DDR == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0x00000000, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP3_HIGHADDR = 0x3FFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP3_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_HP3, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_for_hp_ports, ISVALID = (C_USE_S_AXI_HP3 == 1 && C_EN_DDR == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0x3FFFFFFF, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP3_HIGHOCM_BASEADDR = 0xFFFC0000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP3_HIGHOCM_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_HP3, CACHEABLE = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP3 == 1 && C_S_AXI_HP3_ENABLE_HIGHOCM == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xFFFC0000, RESOLVED_BUS = 
 PARAMETER C_S_AXI_HP3_HIGHOCM_HIGHADDR = 0xFFFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP3_HIGHOCM_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_HP3, CACHEABLE = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP3 == 1 && C_S_AXI_HP3_ENABLE_HIGHOCM == 1), ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xFFFFFFFF, RESOLVED_BUS = 
 PARAMETER C_M_AXI_GP0_SUPPORTS_THREADS = 1, DT = INTEGER, BUS = M_AXI_GP0, ASSIGNMENT = OPTIONAL, RANGE = (0,1), TYPE = NON_HDL, ISVALID = (C_USE_S_AXI_GP0 == 1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1, RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_M_AXI_GP0_THREAD_ID_WIDTH = 12, BUS = M_AXI_GP0, ASSIGNMENT = UPDATE, ISVALID = (C_USE_S_AXI_GP0 == 1), IPLEVEL_UPDATE_VALUE_PROC = syslevel_update_thread_id0_num, AFFECTS_PORTS_VEC = M_AXI_GP0_ARID:M_AXI_GP0_AWID:M_AXI_GP0_WID:M_AXI_GP0_BID:M_AXI_GP0_RID, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = 12, RESOLVED_BUS = M_AXI_GP0
 PARAMETER C_M_AXI_GP1_SUPPORTS_THREADS = 1, DT = INTEGER, BUS = M_AXI_GP1, ASSIGNMENT = OPTIONAL, RANGE = (0,1), TYPE = NON_HDL, ISVALID = (C_USE_S_AXI_GP1 == 1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1, RESOLVED_BUS = 
 PARAMETER C_M_AXI_GP1_THREAD_ID_WIDTH = 12, BUS = M_AXI_GP1, ASSIGNMENT = UPDATE, ISVALID = (C_USE_S_AXI_GP1 == 1), IPLEVEL_UPDATE_VALUE_PROC = syslevel_update_thread_id1_num, AFFECTS_PORTS_VEC = M_AXI_GP1_ARID:M_AXI_GP1_AWID:M_AXI_GP1_WID:M_AXI_GP1_BID:M_AXI_GP1_RID, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = 12, RESOLVED_BUS = 
 PARAMETER C_NUM_F2P_INTR_INPUTS = 2, DT = INTEGER, IPLEVEL_UPDATE_VALUE_PROC = syslevel_update_num_intr_inputs, RANGE = (1:16), AFFECTS_PORTS_VEC = IRQ_F2P, ASSIGNMENT = UPDATE, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 2, MHS_VALUE = 2
 PARAMETER C_EN_DDR = 1, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_DDR_RAM_BASEADDR:C_DDR_RAM_HIGHADDR:C_S_AXI_HP0_BASEADDR:C_S_AXI_HP0_HIGHADDR:C_S_AXI_HP1_BASEADDR:C_S_AXI_HP1_HIGHADDR:C_S_AXI_HP2_BASEADDR:C_S_AXI_HP2_HIGHADDR:C_S_AXI_HP3_BASEADDR:C_S_AXI_HP3_HIGHADDR, MPD_VALUE = 1, MHS_VALUE = 1
 PARAMETER C_EN_SMC = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_QSPI = 1, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 1
 PARAMETER C_EN_CAN0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_CAN0_BASEADDR:C_CAN0_HIGHADDR, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_CAN1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_CAN1_BASEADDR:C_CAN1_HIGHADDR, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_ENET0 = 1, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_ENET0_BASEADDR:C_ENET0_HIGHADDR, MPD_VALUE = 0, MHS_VALUE = 1
 PARAMETER C_EN_ENET1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_ENET1_BASEADDR:C_ENET1_HIGHADDR, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_GPIO = 1, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_GPIO_BASEADDR:C_GPIO_HIGHADDR, MPD_VALUE = 1, MHS_VALUE = 1
 PARAMETER C_EN_I2C0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_I2C0_BASEADDR:C_I2C0_HIGHADDR, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_I2C1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_I2C1_BASEADDR:C_I2C1_HIGHADDR, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_PJTAG = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_SDIO0 = 1, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_SDIO0_BASEADDR:C_SDIO0_HIGHADDR, MPD_VALUE = 0, MHS_VALUE = 1
 PARAMETER C_EN_SDIO1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_SDIO1_BASEADDR:C_SDIO1_HIGHADDR, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_SPI0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_SPI0_BASEADDR:C_SPI0_HIGHADDR, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_SPI1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_SPI1_BASEADDR:C_SPI1_HIGHADDR, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_UART0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_UART_BAUD_RATE:C_UART0_BASEADDR:C_UART0_HIGHADDR, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_UART1 = 1, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_UART_BAUD_RATE:C_UART1_BASEADDR:C_UART1_HIGHADDR, MPD_VALUE = 0, MHS_VALUE = 1
 PARAMETER C_EN_MODEM_UART0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_MODEM_UART1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_TTC0 = 1, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_TTC0_BASEADDR:C_TTC0_HIGHADDR, MPD_VALUE = 0, MHS_VALUE = 1
 PARAMETER C_EN_TTC1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_TTC1_BASEADDR:C_TTC1_HIGHADDR, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_WDT = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_TRACE = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_USB0 = 1, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_USB0_BASEADDR:C_USB0_HIGHADDR, MPD_VALUE = 0, MHS_VALUE = 1
 PARAMETER C_EN_USB1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_USB1_BASEADDR:C_USB1_HIGHADDR, MPD_VALUE = 0, MHS_VALUE = 0
 PARAMETER C_EN_4K_TIMER = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_FCLK_CLK0_FREQ = 100000000, DT = INTEGER, TYPE = NON_HDL, ISVALID = (C_FCLK_CLK0_FREQ > 0), ASSIGNMENT = OPTIONAL, GUI_PERMIT = , AFFECTS_PARAMS_ISVALID = C_FCLK_CLK0_BUF, MPD_VALUE = 0, MHS_VALUE = 100000000
 PARAMETER C_FCLK_CLK1_FREQ = 142857132, DT = INTEGER, TYPE = NON_HDL, ISVALID = (C_FCLK_CLK1_FREQ > 0), ASSIGNMENT = OPTIONAL, GUI_PERMIT = , AFFECTS_PARAMS_ISVALID = C_FCLK_CLK1_BUF, MPD_VALUE = 0, MHS_VALUE = 142857132
 PARAMETER C_FCLK_CLK2_FREQ = 50000000, DT = INTEGER, TYPE = NON_HDL, ISVALID = (C_FCLK_CLK2_FREQ > 0), ASSIGNMENT = OPTIONAL, GUI_PERMIT = , AFFECTS_PARAMS_ISVALID = C_FCLK_CLK2_BUF, MPD_VALUE = 0, MHS_VALUE = 50000000
 PARAMETER C_FCLK_CLK3_FREQ = 50000000, DT = INTEGER, TYPE = NON_HDL, ISVALID = (C_FCLK_CLK3_FREQ > 0), ASSIGNMENT = OPTIONAL, GUI_PERMIT = , AFFECTS_PARAMS_ISVALID = C_FCLK_CLK3_BUF, MPD_VALUE = 0, MHS_VALUE = 50000000
 PARAMETER C_FCLK_CLK0_BUF = TRUE, DT = STRING, VALUES = (FALSE=FALSE, TRUE=TRUE), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_use_fclkbuff, ISVALID = (C_FCLK_CLK0_FREQ > 0), TYPE = HDL, GUI_PERMIT = , MPD_VALUE = TRUE
 PARAMETER C_FCLK_CLK1_BUF = TRUE, DT = STRING, VALUES = (FALSE=FALSE, TRUE=TRUE), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_use_fclkbuff, ISVALID = (C_FCLK_CLK1_FREQ > 0), TYPE = HDL, GUI_PERMIT = , MPD_VALUE = TRUE
 PARAMETER C_FCLK_CLK2_BUF = TRUE, DT = STRING, VALUES = (FALSE=FALSE, TRUE=TRUE), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_use_fclkbuff, ISVALID = (C_FCLK_CLK2_FREQ > 0), TYPE = HDL, GUI_PERMIT = , MPD_VALUE = TRUE
 PARAMETER C_FCLK_CLK3_BUF = TRUE, DT = STRING, VALUES = (FALSE=FALSE, TRUE=TRUE), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_use_fclkbuff, ISVALID = (C_FCLK_CLK3_FREQ > 0), TYPE = HDL, GUI_PERMIT = , MPD_VALUE = TRUE
 PARAMETER HW_VER = 4.03.a
 BUS_INTERFACE M_AXI_GP0 = axi_interconnect_1, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = (C_USE_M_AXI_GP0 == 1), ADDR_TYPE = PROCESSOR
 BUS_INTERFACE S_AXI_HP0 = axi_interconnect_2, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = (C_USE_S_AXI_HP0 == 1), ADDR_TYPE = REGISTER
 PORT M_AXI_GP0_ARVALID = ARVALID, DIR = O, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = ARVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_AWVALID = AWVALID, DIR = O, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = AWVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_BREADY = BREADY, DIR = O, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = BREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_RREADY = RREADY, DIR = O, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = RREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_WLAST = WLAST, DIR = O, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = WLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_WVALID = WVALID, DIR = O, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = WVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_ARID = ARID, DIR = O, VEC = [C_M_AXI_GP0_THREAD_ID_WIDTH-1:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = ARID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_AWID = AWID, DIR = O, VEC = [C_M_AXI_GP0_THREAD_ID_WIDTH-1:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = AWID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_WID = WID, DIR = O, VEC = [C_M_AXI_GP0_THREAD_ID_WIDTH-1:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = WID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_ARBURST = ARBURST, DIR = O, VEC = [1:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = ARBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_ARLOCK = ARLOCK, DIR = O, VEC = [1:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = ARLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_ARSIZE = ARSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = ARSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_AWBURST = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = AWBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_AWLOCK = AWLOCK, DIR = O, VEC = [1:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = AWLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_AWSIZE = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = AWSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_ARPROT = ARPROT, DIR = O, VEC = [2:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = ARPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_AWPROT = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = AWPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_ARADDR = ARADDR, DIR = O, VEC = [31:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = ARADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_AWADDR = AWADDR, DIR = O, VEC = [31:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = AWADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_WDATA = WDATA, DIR = O, VEC = [31:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = WDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_ARCACHE = ARCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = ARCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_ARLEN = ARLEN, DIR = O, VEC = [3:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = ARLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_ARQOS = ARQOS, DIR = O, VEC = [3:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = ARQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_AWCACHE = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = AWCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_AWLEN = AWLEN, DIR = O, VEC = [3:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = AWLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_AWQOS = AWQOS, DIR = O, VEC = [3:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = AWQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_WSTRB = WSTRB, DIR = O, VEC = [3:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = WSTRB, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_ACLK = processing_system7_0_FCLK_CLK0, DIR = I, BUS = M_AXI_GP0, SIGIS = CLK, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = processing_system7_0_FCLK_CLK0, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_ARREADY = ARREADY, DIR = I, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = ARREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_AWREADY = AWREADY, DIR = I, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = AWREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_BVALID = BVALID, DIR = I, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = BVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_RLAST = RLAST, DIR = I, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = RLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_RVALID = RVALID, DIR = I, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = RVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_WREADY = WREADY, DIR = I, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = WREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_BID = BID, DIR = I, VEC = [C_M_AXI_GP0_THREAD_ID_WIDTH-1:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = BID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_RID = RID, DIR = I, VEC = [C_M_AXI_GP0_THREAD_ID_WIDTH-1:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = RID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_BRESP = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = BRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_RRESP = RRESP, DIR = I, VEC = [1:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = RRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP0_RDATA = RDATA, DIR = I, VEC = [31:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1), DEFAULT = RDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_GP0
 PORT M_AXI_GP1_ARVALID = ARVALID, DIR = O, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = ARVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_AWVALID = AWVALID, DIR = O, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = AWVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_BREADY = BREADY, DIR = O, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = BREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_RREADY = RREADY, DIR = O, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = RREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_WLAST = WLAST, DIR = O, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = WLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_WVALID = WVALID, DIR = O, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = WVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_ARID = ARID, DIR = O, VEC = [C_M_AXI_GP1_THREAD_ID_WIDTH-1:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = ARID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_AWID = AWID, DIR = O, VEC = [C_M_AXI_GP1_THREAD_ID_WIDTH-1:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = AWID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_WID = WID, DIR = O, VEC = [C_M_AXI_GP1_THREAD_ID_WIDTH-1:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = WID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_ARBURST = ARBURST, DIR = O, VEC = [1:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = ARBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_ARLOCK = ARLOCK, DIR = O, VEC = [1:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = ARLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_ARSIZE = ARSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = ARSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_AWBURST = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = AWBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_AWLOCK = AWLOCK, DIR = O, VEC = [1:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = AWLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_AWSIZE = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = AWSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_ARPROT = ARPROT, DIR = O, VEC = [2:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = ARPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_AWPROT = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = AWPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_ARADDR = ARADDR, DIR = O, VEC = [31:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = ARADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_AWADDR = AWADDR, DIR = O, VEC = [31:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = AWADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_WDATA = WDATA, DIR = O, VEC = [31:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = WDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_ARCACHE = ARCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = ARCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_ARLEN = ARLEN, DIR = O, VEC = [3:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = ARLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_ARQOS = ARQOS, DIR = O, VEC = [3:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = ARQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_AWCACHE = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = AWCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_AWLEN = AWLEN, DIR = O, VEC = [3:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = AWLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_AWQOS = AWQOS, DIR = O, VEC = [3:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = AWQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_WSTRB = WSTRB, DIR = O, VEC = [3:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = WSTRB, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_ARREADY = ARREADY, DIR = I, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = ARREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_AWREADY = AWREADY, DIR = I, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = AWREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_BVALID = BVALID, DIR = I, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = BVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_RLAST = RLAST, DIR = I, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = RLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_RVALID = RVALID, DIR = I, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = RVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_WREADY = WREADY, DIR = I, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = WREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_BID = BID, DIR = I, VEC = [C_M_AXI_GP1_THREAD_ID_WIDTH-1:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = BID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_RID = RID, DIR = I, VEC = [C_M_AXI_GP1_THREAD_ID_WIDTH-1:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = RID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_BRESP = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = BRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_RRESP = RRESP, DIR = I, VEC = [1:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = RRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT M_AXI_GP1_RDATA = RDATA, DIR = I, VEC = [31:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1), DEFAULT = RDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_ARREADY = ARREADY, DIR = O, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = ARREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_AWREADY = AWREADY, DIR = O, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = AWREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_BVALID = BVALID, DIR = O, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = BVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_RLAST = RLAST, DIR = O, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = RLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_RVALID = RVALID, DIR = O, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = RVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_WREADY = WREADY, DIR = O, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = WREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = BRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = RRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_RDATA = RDATA, DIR = O, VEC = [31:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = RDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_BID = BID, DIR = O, VEC = [(C_S_AXI_GP0_ID_WIDTH - 1) : 0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = BID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_RID = RID, DIR = O, VEC = [(C_S_AXI_GP0_ID_WIDTH - 1) : 0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = RID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_ARVALID = ARVALID, DIR = I, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = ARVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_AWVALID = AWVALID, DIR = I, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = AWVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_BREADY = BREADY, DIR = I, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = BREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_RREADY = RREADY, DIR = I, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = RREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_WLAST = WLAST, DIR = I, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = WLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_WVALID = WVALID, DIR = I, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = WVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_ARBURST = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = ARBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_ARLOCK = ARLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = ARLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_ARSIZE = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = ARSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_AWBURST = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = AWBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_AWLOCK = AWLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = AWLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_AWSIZE = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = AWSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = ARPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = AWPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_ARADDR = ARADDR, DIR = I, VEC = [31:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = ARADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_AWADDR = AWADDR, DIR = I, VEC = [31:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = AWADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_WDATA = WDATA, DIR = I, VEC = [31:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = WDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_ARCACHE = ARCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = ARCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_ARLEN = ARLEN, DIR = I, VEC = [3:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = ARLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_ARQOS = ARQOS, DIR = I, VEC = [3:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = ARQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_AWCACHE = AWCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = AWCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_AWLEN = AWLEN, DIR = I, VEC = [3:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = AWLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_AWQOS = AWQOS, DIR = I, VEC = [3:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = AWQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_WSTRB = WSTRB, DIR = I, VEC = [3:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = WSTRB, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_ARID = ARID, DIR = I, VEC = [(C_S_AXI_GP0_ID_WIDTH - 1) : 0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = ARID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_AWID = AWID, DIR = I, VEC = [(C_S_AXI_GP0_ID_WIDTH - 1) : 0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = AWID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP0_WID = WID, DIR = I, VEC = [(C_S_AXI_GP0_ID_WIDTH - 1) : 0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1), DEFAULT = WID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_ARREADY = ARREADY, DIR = O, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = ARREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_AWREADY = AWREADY, DIR = O, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = AWREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_BVALID = BVALID, DIR = O, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = BVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_RLAST = RLAST, DIR = O, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = RLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_RVALID = RVALID, DIR = O, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = RVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_WREADY = WREADY, DIR = O, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = WREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = BRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = RRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_RDATA = RDATA, DIR = O, VEC = [31:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = RDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_BID = BID, DIR = O, VEC = [(C_S_AXI_GP1_ID_WIDTH - 1) : 0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = BID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_RID = RID, DIR = O, VEC = [(C_S_AXI_GP1_ID_WIDTH - 1) : 0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = RID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_ARVALID = ARVALID, DIR = I, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = ARVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_AWVALID = AWVALID, DIR = I, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = AWVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_BREADY = BREADY, DIR = I, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = BREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_RREADY = RREADY, DIR = I, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = RREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_WLAST = WLAST, DIR = I, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = WLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_WVALID = WVALID, DIR = I, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = WVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_ARBURST = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = ARBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_ARLOCK = ARLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = ARLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_ARSIZE = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = ARSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_AWBURST = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = AWBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_AWLOCK = AWLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = AWLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_AWSIZE = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = AWSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = ARPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = AWPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_ARADDR = ARADDR, DIR = I, VEC = [31:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = ARADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_AWADDR = AWADDR, DIR = I, VEC = [31:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = AWADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_WDATA = WDATA, DIR = I, VEC = [31:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = WDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_ARCACHE = ARCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = ARCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_ARLEN = ARLEN, DIR = I, VEC = [3:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = ARLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_ARQOS = ARQOS, DIR = I, VEC = [3:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = ARQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_AWCACHE = AWCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = AWCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_AWLEN = AWLEN, DIR = I, VEC = [3:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = AWLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_AWQOS = AWQOS, DIR = I, VEC = [3:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = AWQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_WSTRB = WSTRB, DIR = I, VEC = [3:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = WSTRB, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_ARID = ARID, DIR = I, VEC = [(C_S_AXI_GP1_ID_WIDTH - 1) : 0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = ARID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_AWID = AWID, DIR = I, VEC = [(C_S_AXI_GP1_ID_WIDTH - 1) : 0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = AWID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_GP1_WID = WID, DIR = I, VEC = [(C_S_AXI_GP1_ID_WIDTH - 1) : 0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1), DEFAULT = WID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_AWREADY = AWREADY, DIR = O, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = AWREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_ARREADY = ARREADY, DIR = O, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = ARREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_BVALID = BVALID, DIR = O, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = BVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_RLAST = RLAST, DIR = O, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = RLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_RVALID = RVALID, DIR = O, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = RVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_WREADY = WREADY, DIR = O, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = WREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = BRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = RRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_BID = BID, DIR = O, VEC = [(C_S_AXI_ACP_ID_WIDTH - 1) : 0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = BID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_RID = RID, DIR = O, VEC = [(C_S_AXI_ACP_ID_WIDTH - 1) : 0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = RID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_RDATA = RDATA, DIR = O, VEC = [63:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = RDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_ARVALID = ARVALID, DIR = I, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = ARVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_AWVALID = AWVALID, DIR = I, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = AWVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_BREADY = BREADY, DIR = I, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = BREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_RREADY = RREADY, DIR = I, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = RREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_WLAST = WLAST, DIR = I, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = WLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_WVALID = WVALID, DIR = I, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = WVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_ARID = ARID, DIR = I, VEC = [(C_S_AXI_ACP_ID_WIDTH - 1) : 0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = ARID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = ARPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_AWID = AWID, DIR = I, VEC = [(C_S_AXI_ACP_ID_WIDTH - 1) : 0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = AWID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = AWPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_WID = WID, DIR = I, VEC = [(C_S_AXI_ACP_ID_WIDTH - 1) : 0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = WID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_ARADDR = ARADDR, DIR = I, VEC = [31:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = ARADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_AWADDR = AWADDR, DIR = I, VEC = [31:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = AWADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_ARCACHE = ARCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = ARCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_ARLEN = ARLEN, DIR = I, VEC = [3:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = ARLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_ARQOS = ARQOS, DIR = I, VEC = [3:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = ARQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_AWCACHE = AWCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = AWCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_AWLEN = AWLEN, DIR = I, VEC = [3:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = AWLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_AWQOS = AWQOS, DIR = I, VEC = [3:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = AWQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_ARBURST = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = ARBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_ARLOCK = ARLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = ARLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_ARSIZE = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = ARSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_AWBURST = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = AWBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_AWLOCK = AWLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = AWLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_AWSIZE = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = AWSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_ARUSER = ARUSER, DIR = I, VEC = [4:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = ARUSER, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_AWUSER = AWUSER, DIR = I, VEC = [4:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = AWUSER, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_WDATA = WDATA, DIR = I, VEC = [63:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = WDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_ACP_WSTRB = WSTRB, DIR = I, VEC = [7:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1), DEFAULT = WSTRB, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP0_ARREADY = ARREADY, DIR = O, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = ARREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_AWREADY = AWREADY, DIR = O, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = AWREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_BVALID = BVALID, DIR = O, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = BVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_RLAST = RLAST, DIR = O, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = RLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_RVALID = RVALID, DIR = O, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = RVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_WREADY = WREADY, DIR = O, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = WREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = BRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = RRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_BID = BID, DIR = O, VEC = [(C_S_AXI_HP0_ID_WIDTH - 1) : 0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = BID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_RID = RID, DIR = O, VEC = [(C_S_AXI_HP0_ID_WIDTH - 1) : 0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = RID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_HP0_DATA_WIDTH - 1) :0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = RDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_ACLK = processing_system7_0_FCLK_CLK0, DIR = I, BUS = S_AXI_HP0, SIGIS = CLK, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = processing_system7_0_FCLK_CLK0, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_ARVALID = ARVALID, DIR = I, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = ARVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_AWVALID = AWVALID, DIR = I, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = AWVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_BREADY = BREADY, DIR = I, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = BREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_RREADY = RREADY, DIR = I, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = RREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_WLAST = WLAST, DIR = I, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = WLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_WVALID = WVALID, DIR = I, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = WVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_ARBURST = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = ARBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_ARLOCK = ARLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = ARLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_ARSIZE = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = ARSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_AWBURST = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = AWBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_AWLOCK = AWLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = AWLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_AWSIZE = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = AWSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = ARPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = AWPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_ARADDR = ARADDR, DIR = I, VEC = [31:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = ARADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_AWADDR = AWADDR, DIR = I, VEC = [31:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = AWADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_ARCACHE = ARCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = ARCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_ARLEN = ARLEN, DIR = I, VEC = [3:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = ARLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_ARQOS = ARQOS, DIR = I, VEC = [3:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = ARQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_AWCACHE = AWCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = AWCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_AWLEN = AWLEN, DIR = I, VEC = [3:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = AWLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_AWQOS = AWQOS, DIR = I, VEC = [3:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = AWQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_ARID = ARID, DIR = I, VEC = [(C_S_AXI_HP0_ID_WIDTH - 1) : 0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = ARID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_AWID = AWID, DIR = I, VEC = [(C_S_AXI_HP0_ID_WIDTH - 1) : 0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = AWID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_WID = WID, DIR = I, VEC = [(C_S_AXI_HP0_ID_WIDTH - 1) : 0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = WID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_HP0_DATA_WIDTH - 1) :0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = WDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP0_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_HP0_DATA_WIDTH/8)-1):0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1), DEFAULT = WSTRB, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_HP0
 PORT S_AXI_HP1_ARREADY = ARREADY, DIR = O, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = ARREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_AWREADY = AWREADY, DIR = O, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = AWREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_BVALID = BVALID, DIR = O, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = BVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_RLAST = RLAST, DIR = O, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = RLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_RVALID = RVALID, DIR = O, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = RVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_WREADY = WREADY, DIR = O, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = WREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = BRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = RRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_BID = BID, DIR = O, VEC = [(C_S_AXI_HP1_ID_WIDTH - 1) : 0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = BID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_RID = RID, DIR = O, VEC = [(C_S_AXI_HP1_ID_WIDTH - 1) : 0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = RID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_HP1_DATA_WIDTH - 1) :0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = RDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_ARVALID = ARVALID, DIR = I, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = ARVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_AWVALID = AWVALID, DIR = I, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = AWVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_BREADY = BREADY, DIR = I, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = BREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_RREADY = RREADY, DIR = I, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = RREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_WLAST = WLAST, DIR = I, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = WLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_WVALID = WVALID, DIR = I, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = WVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_ARBURST = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = ARBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_ARLOCK = ARLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = ARLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_ARSIZE = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = ARSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_AWBURST = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = AWBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_AWLOCK = AWLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = AWLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_AWSIZE = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = AWSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = ARPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = AWPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_ARADDR = ARADDR, DIR = I, VEC = [31:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = ARADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_AWADDR = AWADDR, DIR = I, VEC = [31:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = AWADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_ARCACHE = ARCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = ARCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_ARLEN = ARLEN, DIR = I, VEC = [3:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = ARLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_ARQOS = ARQOS, DIR = I, VEC = [3:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = ARQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_AWCACHE = AWCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = AWCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_AWLEN = AWLEN, DIR = I, VEC = [3:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = AWLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_AWQOS = AWQOS, DIR = I, VEC = [3:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = AWQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_ARID = ARID, DIR = I, VEC = [(C_S_AXI_HP1_ID_WIDTH - 1) : 0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = ARID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_AWID = AWID, DIR = I, VEC = [(C_S_AXI_HP1_ID_WIDTH - 1) : 0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = AWID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_WID = WID, DIR = I, VEC = [(C_S_AXI_HP1_ID_WIDTH - 1) : 0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = WID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_HP1_DATA_WIDTH - 1) :0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = WDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP1_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_HP1_DATA_WIDTH/8)-1):0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1), DEFAULT = WSTRB, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_ARREADY = ARREADY, DIR = O, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = ARREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_AWREADY = AWREADY, DIR = O, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = AWREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_BVALID = BVALID, DIR = O, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = BVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_RLAST = RLAST, DIR = O, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = RLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_RVALID = RVALID, DIR = O, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = RVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_WREADY = WREADY, DIR = O, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = WREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = BRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = RRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_BID = BID, DIR = O, VEC = [(C_S_AXI_HP2_ID_WIDTH - 1) : 0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = BID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_RID = RID, DIR = O, VEC = [(C_S_AXI_HP2_ID_WIDTH - 1) : 0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = RID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_HP2_DATA_WIDTH - 1) :0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = RDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_ARVALID = ARVALID, DIR = I, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = ARVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_AWVALID = AWVALID, DIR = I, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = AWVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_BREADY = BREADY, DIR = I, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = BREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_RREADY = RREADY, DIR = I, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = RREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_WLAST = WLAST, DIR = I, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = WLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_WVALID = WVALID, DIR = I, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = WVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_ARBURST = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = ARBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_ARLOCK = ARLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = ARLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_ARSIZE = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = ARSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_AWBURST = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = AWBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_AWLOCK = AWLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = AWLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_AWSIZE = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = AWSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = ARPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = AWPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_ARADDR = ARADDR, DIR = I, VEC = [31:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = ARADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_AWADDR = AWADDR, DIR = I, VEC = [31:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = AWADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_ARCACHE = ARCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = ARCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_ARLEN = ARLEN, DIR = I, VEC = [3:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = ARLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_ARQOS = ARQOS, DIR = I, VEC = [3:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = ARQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_AWCACHE = AWCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = AWCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_AWLEN = AWLEN, DIR = I, VEC = [3:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = AWLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_AWQOS = AWQOS, DIR = I, VEC = [3:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = AWQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_ARID = ARID, DIR = I, VEC = [(C_S_AXI_HP2_ID_WIDTH - 1) : 0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = ARID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_AWID = AWID, DIR = I, VEC = [(C_S_AXI_HP2_ID_WIDTH - 1) : 0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = AWID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_WID = WID, DIR = I, VEC = [(C_S_AXI_HP2_ID_WIDTH - 1) : 0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = WID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_HP2_DATA_WIDTH - 1) :0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = WDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP2_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_HP2_DATA_WIDTH/8)-1):0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1), DEFAULT = WSTRB, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_ARREADY = ARREADY, DIR = O, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = ARREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_AWREADY = AWREADY, DIR = O, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = AWREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_BVALID = BVALID, DIR = O, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = BVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_RLAST = RLAST, DIR = O, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = RLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_RVALID = RVALID, DIR = O, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = RVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_WREADY = WREADY, DIR = O, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = WREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = BRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = RRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_BID = BID, DIR = O, VEC = [(C_S_AXI_HP3_ID_WIDTH - 1) : 0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = BID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_RID = RID, DIR = O, VEC = [(C_S_AXI_HP3_ID_WIDTH - 1) : 0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = RID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_HP3_DATA_WIDTH - 1) :0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = RDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_ARVALID = ARVALID, DIR = I, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = ARVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_AWVALID = AWVALID, DIR = I, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = AWVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_BREADY = BREADY, DIR = I, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = BREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_RREADY = RREADY, DIR = I, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = RREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_WLAST = WLAST, DIR = I, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = WLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_WVALID = WVALID, DIR = I, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = WVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_ARBURST = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = ARBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_ARLOCK = ARLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = ARLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_ARSIZE = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = ARSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_AWBURST = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = AWBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_AWLOCK = AWLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = AWLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_AWSIZE = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = AWSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = ARPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = AWPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_ARADDR = ARADDR, DIR = I, VEC = [31:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = ARADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_AWADDR = AWADDR, DIR = I, VEC = [31:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = AWADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_ARCACHE = ARCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = ARCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_ARLEN = ARLEN, DIR = I, VEC = [3:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = ARLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_ARQOS = ARQOS, DIR = I, VEC = [3:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = ARQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_AWCACHE = AWCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = AWCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_AWLEN = AWLEN, DIR = I, VEC = [3:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = AWLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_AWQOS = AWQOS, DIR = I, VEC = [3:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = AWQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_ARID = ARID, DIR = I, VEC = [(C_S_AXI_HP3_ID_WIDTH - 1) : 0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = ARID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_AWID = AWID, DIR = I, VEC = [(C_S_AXI_HP3_ID_WIDTH - 1) : 0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = AWID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_WID = WID, DIR = I, VEC = [(C_S_AXI_HP3_ID_WIDTH - 1) : 0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = WID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_HP3_DATA_WIDTH - 1) :0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = WDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_HP3_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_HP3_DATA_WIDTH/8)-1):0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1), DEFAULT = WSTRB, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT FCLK_CLK0 = processing_system7_0_FCLK_CLK0, DIR = O, SIGIS = CLK, ISVALID = (C_USE_CR_FABRIC == 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = processing_system7_0_FCLK_CLK0
 PORT FCLK_RESET0_N = processing_system7_0_FCLK_RESET0_N, DIR = O, SIGIS = RST, ISVALID = (C_USE_CR_FABRIC == 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = processing_system7_0_FCLK_RESET0_N
 PORT IRQ_F2P = axi_dma_0_mm2s_introut & axi_dma_0_s2mm_introut, DIR = I, VEC = [(C_NUM_F2P_INTR_INPUTS-1) :0], SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT == 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SENSITIVITY = EDGE_RISING, THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = axi_dma_0_mm2s_introut & axi_dma_0_s2mm_introut
 PORT MIO = processing_system7_0_MIO, DIR = IO, VEC = [C_MIO_PRIMITIVE - 1:0], THREE_STATE = FALSE, IO_IF = PS_REQUIRED_EXTERNAL_IO, DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , IOB_STATE = BUF, MHS_VALUE = processing_system7_0_MIO
 PORT DDR_Clk = processing_system7_0_DDR_Clk, DIR = IO, SIGIS = CLK, IO_IF = MEMORY_0, IO_IS = DDR_Clk, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, IOB_STATE = BUF, MHS_VALUE = processing_system7_0_DDR_Clk
 PORT DDR_Clk_n = processing_system7_0_DDR_Clk_n, DIR = IO, SIGIS = CLK, IO_IF = MEMORY_0, IO_IS = DDR_Clk_n, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, IOB_STATE = BUF, MHS_VALUE = processing_system7_0_DDR_Clk_n
 PORT DDR_CKE = processing_system7_0_DDR_CKE, DIR = IO, IO_IF = MEMORY_0, IO_IS = DDR_CLOCK_ENABLE, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , IOB_STATE = BUF, MHS_VALUE = processing_system7_0_DDR_CKE
 PORT DDR_CS_n = processing_system7_0_DDR_CS_n, DIR = IO, IO_IF = MEMORY_0, IO_IS = DDR_CHIP_SELECT, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , IOB_STATE = BUF, MHS_VALUE = processing_system7_0_DDR_CS_n
 PORT DDR_RAS_n = processing_system7_0_DDR_RAS_n, DIR = IO, IO_IF = MEMORY_0, IO_IS = DDR_ROW_ADDR_SELECT, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , IOB_STATE = BUF, MHS_VALUE = processing_system7_0_DDR_RAS_n
 PORT DDR_CAS_n = processing_system7_0_DDR_CAS_n, DIR = IO, IO_IF = MEMORY_0, IO_IS = DDR_COL_ADDR_SELECT, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , IOB_STATE = BUF, MHS_VALUE = processing_system7_0_DDR_CAS_n
 PORT DDR_WEB = processing_system7_0_DDR_WEB, DIR = O, IO_IF = MEMORY_0, IO_IS = DDR_WRITE_ENABLE, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , IOB_STATE = INFER, MHS_VALUE = processing_system7_0_DDR_WEB
 PORT DDR_BankAddr = processing_system7_0_DDR_BankAddr, DIR = IO, VEC = [2:0], IO_IF = MEMORY_0, IO_IS = DDR_BANKADDR, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , IOB_STATE = BUF, MHS_VALUE = processing_system7_0_DDR_BankAddr
 PORT DDR_Addr = processing_system7_0_DDR_Addr, DIR = IO, VEC = [14:0], IO_IF = MEMORY_0, IO_IS = DDR_ADDRESS, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , IOB_STATE = BUF, MHS_VALUE = processing_system7_0_DDR_Addr
 PORT DDR_ODT = processing_system7_0_DDR_ODT, DIR = IO, IO_IF = MEMORY_0, IO_IS = DDR_ODT, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , IOB_STATE = BUF, MHS_VALUE = processing_system7_0_DDR_ODT
 PORT DDR_DRSTB = processing_system7_0_DDR_DRSTB, DIR = IO, SIGIS = RST, IO_IF = MEMORY_0, IO_IS = DDR_RST_n, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, IOB_STATE = BUF, MHS_VALUE = processing_system7_0_DDR_DRSTB
 PORT DDR_DQ = processing_system7_0_DDR_DQ, DIR = IO, VEC = [C_DQ_WIDTH - 1:0], IO_IF = MEMORY_0, IO_IS = DDR_DATA, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , IOB_STATE = BUF, MHS_VALUE = processing_system7_0_DDR_DQ
 PORT DDR_DM = processing_system7_0_DDR_DM, DIR = IO, VEC = [C_DM_WIDTH - 1:0], IO_IF = MEMORY_0, IO_IS = DDR_DATA_MASK, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , IOB_STATE = BUF, MHS_VALUE = processing_system7_0_DDR_DM
 PORT DDR_DQS = processing_system7_0_DDR_DQS, DIR = IO, VEC = [C_DQS_WIDTH - 1:0], IO_IF = MEMORY_0, IO_IS = DDR_DATA_STROBE, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , IOB_STATE = BUF, MHS_VALUE = processing_system7_0_DDR_DQS
 PORT DDR_DQS_n = processing_system7_0_DDR_DQS_n, DIR = IO, VEC = [C_DQS_WIDTH - 1:0], IO_IF = MEMORY_0, IO_IS = DDR_DATA_STROBE_n, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , IOB_STATE = BUF, MHS_VALUE = processing_system7_0_DDR_DQS_n
 PORT DDR_VRN = processing_system7_0_DDR_VRN, DIR = IO, THREE_STATE = FALSE, IO_IF = MEMORY_0, ISVALID = (C_EN_DDR == 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , IOB_STATE = BUF, MHS_VALUE = processing_system7_0_DDR_VRN
 PORT DDR_VRP = processing_system7_0_DDR_VRP, DIR = IO, THREE_STATE = FALSE, IO_IF = MEMORY_0, ISVALID = (C_EN_DDR == 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , IOB_STATE = BUF, MHS_VALUE = processing_system7_0_DDR_VRP
 PORT PS_SRSTB = processing_system7_0_PS_SRSTB, DIR = I, IO_IF = PS_REQUIRED_EXTERNAL_IO, DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = processing_system7_0_PS_SRSTB
 PORT PS_CLK = processing_system7_0_PS_CLK, DIR = I, SIGIS = CLK, IO_IF = PS_REQUIRED_EXTERNAL_IO, DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = processing_system7_0_PS_CLK
 PORT PS_PORB = processing_system7_0_PS_PORB, DIR = I, IO_IF = PS_REQUIRED_EXTERNAL_IO, DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = processing_system7_0_PS_PORB
END

BEGIN axi_adc_1c
 PARAMETER INSTANCE = axi_adc_1c_0
 PARAMETER C_INTERCONNECT_S_AXI_MASTERS = none, DT = string, TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Masters that can talk to this slave, LONG_DESC = The '&' separated list of master interfaces that can access this slave, GUI_PERMIT = , BUS = S_AXI, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = none, RESOLVED_BUS = S_AXI
 PARAMETER C_INTERCONNECT_S_AXI_IS_ACLK_ASYNC = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Is ACLK Asynchronous to Interconnect_ACLK, LONG_DESC = Is ACLK asynchronous with respect to the interconnect's ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, RESOLVED_BUS = S_AXI
 PARAMETER C_INTERCONNECT_S_AXI_ACLK_RATIO = 1, DT = integer, RANGE = (1 : 2147483647), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = UPDATE, DESC = ACLK Frequency Ratio, LONG_DESC = In relation to C_INTERCONNECT_ACLK_RATIO on the interconnect, indicates the ratio of the ACLK frequency of this bus interface to the frequency of INTERCONNECT_ACLK. Automatically set to the ACLK frequency in Hz., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 1, RESOLVED_BUS = S_AXI
 PARAMETER C_INTERCONNECT_S_AXI_SECURE = 0, DT = integer, RANGE = (0,1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Require TrustZone Secure on all accesses, LONG_DESC = All accesses to slave required to be secure, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, RESOLVED_BUS = S_AXI
 PARAMETER C_INTERCONNECT_S_AXI_AW_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AW channel, LONG_DESC = Insert register slice on AW channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, RESOLVED_BUS = S_AXI
 PARAMETER C_INTERCONNECT_S_AXI_AR_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AR channel, LONG_DESC = Insert register slice on AR channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, RESOLVED_BUS = S_AXI
 PARAMETER C_INTERCONNECT_S_AXI_W_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on W channel, LONG_DESC = Insert register slice on W channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, RESOLVED_BUS = S_AXI
 PARAMETER C_INTERCONNECT_S_AXI_R_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on R channel, LONG_DESC = Insert register slice on R channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, RESOLVED_BUS = S_AXI
 PARAMETER C_INTERCONNECT_S_AXI_B_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on B channel, LONG_DESC = Insert register slice on B channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, RESOLVED_BUS = S_AXI
 PARAMETER C_INTERCONNECT_S_AXI_WRITE_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Write Data FIFO Depth, LONG_DESC = Depth of bus interface write data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, RESOLVED_BUS = S_AXI
 PARAMETER C_INTERCONNECT_S_AXI_WRITE_FIFO_DELAY = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Write Data FIFO Burst Delay, LONG_DESC = Delay issuing M_AXI_AWVALID until complete burst is stored in write data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, RESOLVED_BUS = S_AXI
 PARAMETER C_INTERCONNECT_S_AXI_READ_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Read Data FIFO Depth, LONG_DESC = Depth of bus interface read data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, RESOLVED_BUS = S_AXI
 PARAMETER C_INTERCONNECT_S_AXI_READ_FIFO_DELAY = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Read Data FIFO Burst Delay, LONG_DESC = Delay issuing M_AXI_ARVALID until read data FIFO has vacancy to store entire burst length, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, RESOLVED_BUS = S_AXI
 PARAMETER C_INTERCONNECT_S_AXI_WRITE_ACCEPTANCE = 1, DT = integer, RANGE = (1:32), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Write Transaction Acceptance Limit, LONG_DESC = Maximum number of active write transactions that the bus interface can accept. This parameter is ignored when the IP is connected to an interconnect in Shared-Access mode., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 1, RESOLVED_BUS = S_AXI
 PARAMETER C_INTERCONNECT_S_AXI_READ_ACCEPTANCE = 1, DT = integer, RANGE = (1:32), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Read Transaction Acceptance Limit, LONG_DESC = Maximum number of active read transactions that the bus interface can accept. This parameter is ignored when the IP is connected to an interconnect in Shared-Access mode., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 1, RESOLVED_BUS = S_AXI
 PARAMETER C_S_AXI_ADDED_AXI_PARAMS = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_S_AXI_AXI_VER = 1.06.a, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT, AFFECTS_PORTS_VEC = S_AXI_WDATA:S_AXI_WSTRB:S_AXI_RDATA, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = 32, RESOLVED_BUS = S_AXI
 PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT, AFFECTS_PORTS_VEC = S_AXI_AWADDR:S_AXI_ARADDR, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = 32, RESOLVED_BUS = S_AXI
 PARAMETER C_S_AXI_MIN_SIZE = 0x000001ff, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 32, MPD_VALUE = 0x000001ff, RESOLVED_BUS = S_AXI
 PARAMETER C_USE_WSTRB = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = 0
 PARAMETER C_DPHASE_TIMEOUT = 8, DT = INTEGER, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = 8
 PARAMETER C_BASEADDR = 0x79000000, DT = std_logic_vector, PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI, MIN_SIZE = 0x1000, ADDR_TYPE = REGISTER, BITWIDTH = 32, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = 0xffffffff, MHS_VALUE = 0x79000000, RESOLVED_BUS = S_AXI
 PARAMETER C_HIGHADDR = 0x7900ffff, DT = std_logic_vector, PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI, ADDR_TYPE = REGISTER, BITWIDTH = 32, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = 0x00000000, MHS_VALUE = 0x7900ffff, MIN_SIZE = 0x1000, RESOLVED_BUS = S_AXI
 PARAMETER C_FAMILY = virtex6, DT = STRING, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = virtex6
 PARAMETER C_NUM_REG = 1, DT = INTEGER, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = 1
 PARAMETER C_NUM_MEM = 1, DT = INTEGER, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = 1
 PARAMETER C_SLV_AWIDTH = 32, DT = INTEGER, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = 32
 PARAMETER C_SLV_DWIDTH = 32, DT = INTEGER, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = 32
 PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, DT = STRING, BUS = S_AXI, GUI_PERMIT = , MPD_VALUE = AXI4LITE, RESOLVED_BUS = S_AXI
 PARAMETER C_S_AXIS_S2MM_PROTOCOL = XIL_AXI_STREAM_ETH_DATA, DT = STRING, BUS = S_AXIS_S2MM, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = XIL_AXI_STREAM_ETH_DATA, RESOLVED_BUS = S_AXIS_S2MM
 PARAMETER C_CF_BUFTYPE = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = 0
 PARAMETER HW_VER = 1.00.a
 BUS_INTERFACE S_AXI = axi_interconnect_1, BUS_STD = AXI, BUS_TYPE = SLAVE, ADDR_TYPE = REGISTER
 BUS_INTERFACE S_AXIS_S2MM = axi_dma_0_S_AXIS_S2MM, BUS_STD = AXIS, BUS_TYPE = INITIATOR
 PORT S_AXIS_S2MM_TVALID = TVALID, DIR = O, BUS = S_AXIS_S2MM, DEFAULT = TVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXIS_S2MM
 PORT S_AXIS_S2MM_TDATA = TDATA, DIR = O, VEC = [63:0], BUS = S_AXIS_S2MM, DEFAULT = TDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXIS_S2MM
 PORT S_AXIS_S2MM_TKEEP = TKEEP, DIR = O, VEC = [7:0], BUS = S_AXIS_S2MM, DEFAULT = TKEEP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXIS_S2MM
 PORT S_AXIS_S2MM_TLAST = TLAST, DIR = O, BUS = S_AXIS_S2MM, DEFAULT = TLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXIS_S2MM
 PORT S_AXIS_S2MM_TREADY = TREADY, DIR = I, BUS = S_AXIS_S2MM, DEFAULT = TREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXIS_S2MM
 PORT S_AXI_ACLK = processing_system7_0_FCLK_CLK0, DIR = I, SIGIS = CLK, BUS = S_AXI, DEFAULT = ACLK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = processing_system7_0_FCLK_CLK0, RESOLVED_BUS = S_AXI
 PORT S_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI, DEFAULT = ARESETN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI
 PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI, DEFAULT = AWADDR, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI
 PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI, DEFAULT = AWVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI
 PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI, DEFAULT = WDATA, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI
 PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI, DEFAULT = WSTRB, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI
 PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI, DEFAULT = WVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI
 PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI, DEFAULT = BREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI
 PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI, DEFAULT = ARADDR, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI
 PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI, DEFAULT = ARVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI
 PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI, DEFAULT = RREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI
 PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI, DEFAULT = ARREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI
 PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI, DEFAULT = RDATA, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI
 PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI, DEFAULT = RRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI
 PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI, DEFAULT = RVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI
 PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI, DEFAULT = WREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI
 PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI, DEFAULT = BRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI
 PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI, DEFAULT = BVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI
 PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI, DEFAULT = AWREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI
END

BEGIN axi_interconnect
 PARAMETER INSTANCE = axi_interconnect_1
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_MASTERS = none, DT = string, TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Masters that can talk to this slave, LONG_DESC = The '&' separated list of master interfaces that can access this slave, GUI_PERMIT = , BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = none, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_IS_ACLK_ASYNC = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Is ACLK Asynchronous to Interconnect_ACLK, LONG_DESC = Is ACLK asynchronous with respect to the interconnect's ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_ACLK_RATIO = 1, DT = integer, TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = UPDATE, DESC = ACLK Frequency Ratio, LONG_DESC = In relation to C_INTERCONNECT_ACLK_RATIO on the interconnect, indicates the ratio of the ACLK frequency of this bus interface to the frequency of Interconnect_ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 1, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_SECURE = 0, DT = integer, RANGE = (0,1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Require TrustZone Secure on all accesses, LONG_DESC = All accesses to slave required to be secure, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_AW_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AW channel, LONG_DESC = Insert register slice on AW channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_AR_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AR channel, LONG_DESC = Insert register slice on AR channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_W_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on W channel, LONG_DESC = Insert register slice on W channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_R_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on R channel, LONG_DESC = Insert register slice on R channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_B_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on B channel, LONG_DESC = Insert register slice on B channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_WRITE_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Write Data FIFO Depth, LONG_DESC = Depth of bus interface write data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_READ_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Read Data FIFO Depth, LONG_DESC = Depth of bus interface read data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_WRITE_ACCEPTANCE = 1, DT = integer, RANGE = (1, 2, 4, 8, 16, 32), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Write Transaction Acceptance Limit, LONG_DESC = Maximum number of active write transactions that the bus interface can accept. This parameter is ignored when the IP is connected to an interconnect in SASD mode., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 1, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_READ_ACCEPTANCE = 1, DT = integer, RANGE = (1, 2, 4, 8, 16, 32), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Read Transaction Acceptance Limit, LONG_DESC = Maximum number of active read transactions that the bus interface can accept. This parameter is ignored when the IP is connected to an interconnect in SASD mode., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 1, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_S_AXI_CTRL_ADDED_AXI_PARAMS = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_S_AXI_CTRL_AXI_VER = 1.01.a, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_FAMILY = rtl, DT = STRING, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, GUI_PERMIT = , MPD_VALUE = rtl
 PARAMETER C_BASEFAMILY = rtl, DT = STRING, ASSIGNMENT = UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_basefamily, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = rtl
 PARAMETER C_NUM_SLAVE_SLOTS = 1, DT = INTEGER, RANGE = (1 : 16), ASSIGNMENT = UPDATE, AFFECTS_PORTS_VEC = S_AXI_ARESET_OUT_N:S_AXI_ACLK:S_AXI_AWID:S_AXI_AWADDR:S_AXI_AWLEN:S_AXI_AWSIZE:S_AXI_AWBURST:S_AXI_AWLOCK:S_AXI_AWCACHE:S_AXI_AWPROT:S_AXI_AWQOS:S_AXI_AWUSER:S_AXI_AWVALID:S_AXI_AWREADY:S_AXI_WID:S_AXI_WDATA:S_AXI_WSTRB:S_AXI_WLAST:S_AXI_WUSER:S_AXI_WVALID:S_AXI_WREADY:S_AXI_BID:S_AXI_BRESP:S_AXI_BUSER:S_AXI_BVALID:S_AXI_BREADY:S_AXI_ARID:S_AXI_ARADDR:S_AXI_ARLEN:S_AXI_ARSIZE:S_AXI_ARBURST:S_AXI_ARLOCK:S_AXI_ARCACHE:S_AXI_ARPROT:S_AXI_ARQOS:S_AXI_ARUSER:S_AXI_ARVALID:S_AXI_ARREADY:S_AXI_RID:S_AXI_RDATA:S_AXI_RRESP:S_AXI_RLAST:S_AXI_RUSER:S_AXI_RVALID:S_AXI_RREADY, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_NUM_MASTER_SLOTS = 1, DT = INTEGER, RANGE = (1 : 16), ASSIGNMENT = UPDATE, AFFECTS_PORTS_VEC = M_AXI_ARESET_OUT_N:M_AXI_ACLK:M_AXI_AWID:M_AXI_AWADDR:M_AXI_AWLEN:M_AXI_AWSIZE:M_AXI_AWBURST:M_AXI_AWLOCK:M_AXI_AWCACHE:M_AXI_AWPROT:M_AXI_AWREGION:M_AXI_AWQOS:M_AXI_AWUSER:M_AXI_AWVALID:M_AXI_AWREADY:M_AXI_WID:M_AXI_WDATA:M_AXI_WSTRB:M_AXI_WLAST:M_AXI_WUSER:M_AXI_WVALID:M_AXI_WREADY:M_AXI_BID:M_AXI_BRESP:M_AXI_BUSER:M_AXI_BVALID:M_AXI_BREADY:M_AXI_ARID:M_AXI_ARADDR:M_AXI_ARLEN:M_AXI_ARSIZE:M_AXI_ARBURST:M_AXI_ARLOCK:M_AXI_ARCACHE:M_AXI_ARPROT:M_AXI_ARREGION:M_AXI_ARQOS:M_AXI_ARUSER:M_AXI_ARVALID:M_AXI_ARREADY:M_AXI_RID:M_AXI_RDATA:M_AXI_RRESP:M_AXI_RLAST:M_AXI_RUSER:M_AXI_RVALID:M_AXI_RREADY, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_AXI_ID_WIDTH = 1, DT = INTEGER, RANGE = (1 : 16), ASSIGNMENT = UPDATE, AFFECTS_PORTS_VEC = S_AXI_AWID:S_AXI_WID:S_AXI_BID:S_AXI_ARID:S_AXI_RID:M_AXI_AWID:M_AXI_WID:M_AXI_BID:M_AXI_ARID:M_AXI_RID:DEBUG_SR_SC_ARADDRCONTROL:DEBUG_SR_SC_AWADDRCONTROL:DEBUG_SR_SC_BRESP:DEBUG_SR_SC_RDATACONTROL:DEBUG_SC_SF_ARADDRCONTROL:DEBUG_SC_SF_AWADDRCONTROL:DEBUG_SC_SF_BRESP:DEBUG_SC_SF_RDATACONTROL:DEBUG_SF_CB_ARADDRCONTROL:DEBUG_SF_CB_AWADDRCONTROL:DEBUG_SF_CB_BRESP:DEBUG_SF_CB_RDATACONTROL:DEBUG_CB_MF_ARADDRCONTROL:DEBUG_CB_MF_AWADDRCONTROL:DEBUG_CB_MF_BRESP:DEBUG_CB_MF_RDATACONTROL:DEBUG_MF_MC_ARADDRCONTROL:DEBUG_MF_MC_AWADDRCONTROL:DEBUG_MF_MC_BRESP:DEBUG_MF_MC_RDATACONTROL:DEBUG_MC_MP_ARADDRCONTROL:DEBUG_MC_MP_AWADDRCONTROL:DEBUG_MC_MP_BRESP:DEBUG_MC_MP_RDATACONTROL:DEBUG_MP_MR_ARADDRCONTROL:DEBUG_MP_MR_AWADDRCONTROL:DEBUG_MP_MR_BRESP:DEBUG_MP_MR_RDATACONTROL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_AXI_ADDR_WIDTH = 32, DT = INTEGER, RANGE = (32), ASSIGNMENT = UPDATE, AFFECTS_PORTS_VEC = S_AXI_AWADDR:S_AXI_ARADDR:M_AXI_AWADDR:M_AXI_ARADDR:DEBUG_SR_SC_ARADDR:DEBUG_SR_SC_AWADDR:DEBUG_SC_SF_ARADDR:DEBUG_SC_SF_AWADDR:DEBUG_SF_CB_ARADDR:DEBUG_SF_CB_AWADDR:DEBUG_CB_MF_ARADDR:DEBUG_CB_MF_AWADDR:DEBUG_MF_MC_ARADDR:DEBUG_MF_MC_AWADDR:DEBUG_MC_MP_ARADDR:DEBUG_MC_MP_AWADDR:DEBUG_MP_MR_ARADDR:DEBUG_MP_MR_AWADDR, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32
 PARAMETER C_AXI_DATA_MAX_WIDTH = 32, DT = INTEGER, ASSIGNMENT = UPDATE, RANGE = (32, 64, 128, 256, 512, 1024), AFFECTS_PORTS_VEC = S_AXI_WDATA:S_AXI_WSTRB:S_AXI_RDATA:M_AXI_WDATA:M_AXI_WSTRB:M_AXI_RDATA:DEBUG_SR_SC_RDATA:DEBUG_SR_SC_WDATA:DEBUG_SR_SC_WDATACONTROL:DEBUG_SC_SF_RDATA:DEBUG_SC_SF_WDATA:DEBUG_SC_SF_WDATACONTROL:DEBUG_SF_CB_RDATA:DEBUG_SF_CB_WDATA:DEBUG_SF_CB_WDATACONTROL:DEBUG_CB_MF_RDATA:DEBUG_CB_MF_WDATA:DEBUG_CB_MF_WDATACONTROL:DEBUG_MF_MC_RDATA:DEBUG_MF_MC_WDATA:DEBUG_MF_MC_WDATACONTROL:DEBUG_MC_MP_RDATA:DEBUG_MC_MP_WDATA:DEBUG_MC_MP_WDATACONTROL:DEBUG_MP_MR_RDATA:DEBUG_MP_MR_WDATA:DEBUG_MP_MR_WDATACONTROL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32
 PARAMETER C_S_AXI_DATA_WIDTH = 0x00000020000000200000002000000020000000200000002000000020000000200000002000000020000000200000002000000020000000200000002000000020, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000020, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000020000000200000002000000020000000200000002000000020000000200000002000000020000000200000002000000020000000200000002000000020
 PARAMETER C_M_AXI_DATA_WIDTH = 0x00000020000000200000002000000020000000200000002000000020000000200000002000000020000000200000002000000020000000200000002000000020, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000020, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000020000000200000002000000020000000200000002000000020000000200000002000000020000000200000002000000020000000200000002000000020
 PARAMETER C_INTERCONNECT_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32, 64, 128, 256, 512, 1024), ASSIGNMENT = OPTIONAL_UPDATE, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32
 PARAMETER C_S_AXI_PROTOCOL = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_M_AXI_PROTOCOL = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_M_AXI_BASE_ADDR = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, STRIDE = 256, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16384, MPD_VALUE = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
 PARAMETER C_M_AXI_HIGH_ADDR = 0xx
 PARAMETER C_S_AXI_BASE_ID = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_S_AXI_THREAD_ID_WIDTH = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_S_AXI_IS_INTERCONNECT = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 0, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b0000000000000000
 PARAMETER C_S_AXI_ACLK_RATIO = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000001, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001
 PARAMETER C_S_AXI_IS_ACLK_ASYNC = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 0, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b0000000000000000
 PARAMETER C_M_AXI_ACLK_RATIO = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000001, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001
 PARAMETER C_M_AXI_IS_ACLK_ASYNC = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 0, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b0000000000000000
 PARAMETER C_INTERCONNECT_ACLK_RATIO = 1, DT = INTEGER, RANGE = (1 : 2147483647), ASSIGNMENT = UPDATE, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_S_AXI_SUPPORTS_WRITE = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 1, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b1111111111111111
 PARAMETER C_S_AXI_SUPPORTS_READ = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 1, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b1111111111111111
 PARAMETER C_M_AXI_SUPPORTS_WRITE = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 1, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b1111111111111111
 PARAMETER C_M_AXI_SUPPORTS_READ = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 1, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b1111111111111111
 PARAMETER C_AXI_SUPPORTS_USER_SIGNALS = 0, DT = INTEGER, RANGE = (1, 0), ASSIGNMENT = OPTIONAL_UPDATE, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_AXI_AWUSER_WIDTH = 1, DT = INTEGER, RANGE = (1 : 256), ASSIGNMENT = OPTIONAL_UPDATE, AFFECTS_PORTS_VEC = S_AXI_AWUSER:M_AXI_AWUSER, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_AXI_ARUSER_WIDTH = 1, DT = INTEGER, RANGE = (1 : 256), ASSIGNMENT = OPTIONAL_UPDATE, AFFECTS_PORTS_VEC = S_AXI_ARUSER:M_AXI_ARUSER, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_AXI_WUSER_WIDTH = 1, DT = INTEGER, RANGE = (1 : 256), ASSIGNMENT = OPTIONAL_UPDATE, AFFECTS_PORTS_VEC = S_AXI_WUSER:M_AXI_WUSER, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_AXI_RUSER_WIDTH = 1, DT = INTEGER, RANGE = (1 : 256), ASSIGNMENT = OPTIONAL_UPDATE, AFFECTS_PORTS_VEC = S_AXI_RUSER:M_AXI_RUSER, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_AXI_BUSER_WIDTH = 1, DT = INTEGER, RANGE = (1 : 256), ASSIGNMENT = OPTIONAL_UPDATE, AFFECTS_PORTS_VEC = S_AXI_BUSER:M_AXI_BUSER, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_AXI_CONNECTIVITY = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = ffffffff, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
 PARAMETER C_S_AXI_SINGLE_THREAD = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 0, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b0000000000000000
 PARAMETER C_M_AXI_SUPPORTS_REORDERING = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = CONSTANT, DEF_STRIDE_VAL = 1, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b1111111111111111
 PARAMETER C_S_AXI_SUPPORTS_NARROW_BURST = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 1, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b1111111111111111
 PARAMETER C_M_AXI_SUPPORTS_NARROW_BURST = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 1, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b1111111111111111
 PARAMETER C_S_AXI_WRITE_ACCEPTANCE = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000001, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001
 PARAMETER C_S_AXI_READ_ACCEPTANCE = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000001, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001
 PARAMETER C_M_AXI_WRITE_ISSUING = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000001, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001
 PARAMETER C_M_AXI_READ_ISSUING = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000001, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001
 PARAMETER C_S_AXI_ARB_PRIORITY = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_M_AXI_SECURE = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 0, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b0000000000000000
 PARAMETER C_S_AXI_WRITE_FIFO_DEPTH = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_S_AXI_WRITE_FIFO_TYPE = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = CONSTANT, DEF_STRIDE_VAL = 1, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b1111111111111111
 PARAMETER C_S_AXI_WRITE_FIFO_DELAY = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 0, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b0000000000000000
 PARAMETER C_S_AXI_READ_FIFO_DEPTH = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_S_AXI_READ_FIFO_TYPE = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = CONSTANT, DEF_STRIDE_VAL = 1, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b1111111111111111
 PARAMETER C_S_AXI_READ_FIFO_DELAY = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 0, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b0000000000000000
 PARAMETER C_M_AXI_WRITE_FIFO_DEPTH = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_M_AXI_WRITE_FIFO_TYPE = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = CONSTANT, DEF_STRIDE_VAL = 1, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b1111111111111111
 PARAMETER C_M_AXI_WRITE_FIFO_DELAY = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 0, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b0000000000000000
 PARAMETER C_M_AXI_READ_FIFO_DEPTH = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_M_AXI_READ_FIFO_TYPE = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = CONSTANT, DEF_STRIDE_VAL = 1, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b1111111111111111
 PARAMETER C_M_AXI_READ_FIFO_DELAY = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 0, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b0000000000000000
 PARAMETER C_S_AXI_AW_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_S_AXI_AR_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_S_AXI_W_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_S_AXI_R_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_S_AXI_B_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_M_AXI_AW_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_M_AXI_AR_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_M_AXI_W_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_M_AXI_R_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_M_AXI_B_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_INTERCONNECT_R_REGISTER = 0, DT = INTEGER, RANGE = (0, 1, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_INTERCONNECT_CONNECTIVITY_MODE = 0, DT = INTEGER, RANGE = (0,1), VALUES = (0= Shared Access (Area optimized) , 1= Crossbar (Performance optimized) ), DESC = Interconnect Architecture, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1, MHS_VALUE = 0
 PARAMETER C_USE_CTRL_PORT = 0, DT = INTEGER, RANGE = (1, 0), ASSIGNMENT = CONSTANT, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_S_AXI_CTRL_PROTOCOL:C_S_AXI_CTRL_ADDR_WIDTH:C_S_AXI_CTRL_DATA_WIDTH:C_BASEADDR:C_HIGHADDR, MPD_VALUE = 0
 PARAMETER C_USE_INTERRUPT = 1, DT = INTEGER, RANGE = (1, 0), ASSIGNMENT = CONSTANT, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_RANGE_CHECK = 2, DT = INTEGER, VALUES = (2 = AUTOMATIC, 0 = OFF, 1 = ON), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_range_check, DESC = Check for transaction errors (DECERR), TYPE = HDL, GUI_PERMIT = , MPD_VALUE = 2
 PARAMETER C_S_AXI_CTRL_PROTOCOL = AXI4LITE, DT = STRING, BUS = S_AXI_CTRL, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_CTRL_PORT != 0), GUI_PERMIT = , MPD_VALUE = AXI4LITE, RESOLVED_BUS = 
 PARAMETER C_S_AXI_CTRL_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_CTRL, RANGE = (32), ASSIGNMENT = CONSTANT, ISVALID = (C_USE_CTRL_PORT != 0), AFFECTS_PORTS_VEC = S_AXI_CTRL_AWADDR:S_AXI_CTRL_ARADDR, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32, RESOLVED_BUS = 
 PARAMETER C_S_AXI_CTRL_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI_CTRL, RANGE = (32), ASSIGNMENT = CONSTANT, ISVALID = (C_USE_CTRL_PORT != 0), AFFECTS_PORTS_VEC = S_AXI_CTRL_WDATA:S_AXI_CTRL_RDATA, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32, RESOLVED_BUS = 
 PARAMETER C_BASEADDR = 0xFFFFFFFF, BUS = S_AXI_CTRL, ADDRESS = BASE, PAIR = C_HIGHADDR, DT = STD_LOGIC_VECTOR, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, ISVALID = (C_USE_CTRL_PORT != 0), ADDR_TYPE = REGISTER, BITWIDTH = 32, DEF_STRIDE_VAL = , STRIDE = 0, GUI_PERMIT = , MPD_VALUE = 0xFFFFFFFF, RESOLVED_BUS = 
 PARAMETER C_HIGHADDR = 0x00000000, BUS = S_AXI_CTRL, ADDRESS = HIGH, PAIR = C_BASEADDR, DT = STD_LOGIC_VECTOR, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, ISVALID = (C_USE_CTRL_PORT != 0), ADDR_TYPE = REGISTER, BITWIDTH = 32, DEF_STRIDE_VAL = , STRIDE = 0, GUI_PERMIT = , MPD_VALUE = 0x00000000, RESOLVED_BUS = 
 PARAMETER C_DEBUG = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (0:1), TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_S_AXI_DEBUG_SLOT:C_M_AXI_DEBUG_SLOT:C_MAX_DEBUG_THREADS, MPD_VALUE = 0
 PARAMETER C_S_AXI_DEBUG_SLOT = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL, ISVALID = (C_DEBUG != 0), RANGE = (0:15), TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_M_AXI_DEBUG_SLOT = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL, ISVALID = (C_DEBUG != 0), RANGE = (0:15), TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_MAX_DEBUG_THREADS = 1, DT = INTEGER, ASSIGNMENT = OPTIONAL, ISVALID = (C_DEBUG != 0), RANGE = (1:256), AFFECTS_PORTS_VEC = DEBUG_AW_TRANS_QUAL:DEBUG_AW_ACCEPT_CNT:DEBUG_AW_ACTIVE_TARGET:DEBUG_AW_ACTIVE_REGION:DEBUG_AR_TRANS_QUAL:DEBUG_AR_ACCEPT_CNT:DEBUG_AR_ACTIVE_TARGET:DEBUG_AR_ACTIVE_REGION:DEBUG_B_TRANS_SEQ:DEBUG_R_BEAT_CNT:DEBUG_R_TRANS_SEQ, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER HW_VER = 1.06.a
 PORT INTERCONNECT_ACLK = processing_system7_0_FCLK_CLK0, DIR = I, SIGIS = CLK, ASSIGNMENT = OPTIONAL, BUS = S_AXI_CTRL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = processing_system7_0_FCLK_CLK0, RESOLVED_BUS = 
 PORT INTERCONNECT_ARESETN = processing_system7_0_FCLK_RESET0_N, DIR = I, SIGIS = RST, ASSIGNMENT = REQUIRE, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = processing_system7_0_FCLK_RESET0_N
 PORT S_AXI_ARESET_OUT_N = ARESETN, DIR = O, VEC = [(C_NUM_SLAVE_SLOTS-1):0], SIGIS = RST, DEFAULT = ARESETN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARESET_OUT_N = ARESETN, DIR = O, VEC = [(C_NUM_MASTER_SLOTS-1):0], SIGIS = RST, DEFAULT = ARESETN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ACLK = ACLK, DIR = I, VEC = [(C_NUM_SLAVE_SLOTS-1):0], SIGIS = CLK, DEFAULT = ACLK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWID = AWID, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH, DEFAULT = AWID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ADDR_WIDTH)-1):0], CONTRIBUTION = C_AXI_ADDR_WIDTH, DEFAULT = AWADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWLEN = AWLEN, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*8)-1):0], CONTRIBUTION = 8, DEFAULT = AWLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWSIZE = AWSIZE, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*3)-1):0], CONTRIBUTION = 3, DEFAULT = AWSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWBURST = AWBURST, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = AWBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWLOCK = AWLOCK, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = AWLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWCACHE = AWCACHE, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*4)-1):0], CONTRIBUTION = 4, DEFAULT = AWCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWPROT = AWPROT, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*3)-1):0], CONTRIBUTION = 3, DEFAULT = AWPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWQOS = AWQOS, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*4)-1):0], CONTRIBUTION = 4, DEFAULT = AWQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWUSER = AWUSER, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_AWUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_AWUSER_WIDTH, DEFAULT = AWUSER, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWVALID = AWVALID, DIR = I, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = AWVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWREADY = AWREADY, DIR = O, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = AWREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_WID = WID, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH, DEFAULT = WID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_DATA_MAX_WIDTH)-1):0], CONTRIBUTION = C_AXI_DATA_MAX_WIDTH, DEFAULT = WDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [(((C_NUM_SLAVE_SLOTS*C_AXI_DATA_MAX_WIDTH)/8)-1):0], CONTRIBUTION = C_AXI_DATA_MAX_WIDTH/8, DEFAULT = WSTRB, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_WLAST = WLAST, DIR = I, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = WLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_WUSER = WUSER, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_WUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_WUSER_WIDTH, DEFAULT = WUSER, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_WVALID = WVALID, DIR = I, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = WVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_WREADY = WREADY, DIR = O, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = WREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_BID = BID, DIR = O, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH, DEFAULT = BID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [((C_NUM_SLAVE_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = BRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_BUSER = BUSER, DIR = O, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_BUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_BUSER_WIDTH, DEFAULT = BUSER, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_BVALID = BVALID, DIR = O, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = BVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_BREADY = BREADY, DIR = I, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = BREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARID = ARID, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH, DEFAULT = ARID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ADDR_WIDTH)-1):0], CONTRIBUTION = C_AXI_ADDR_WIDTH, DEFAULT = ARADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARLEN = ARLEN, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*8)-1):0], CONTRIBUTION = 8, DEFAULT = ARLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARSIZE = ARSIZE, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*3)-1):0], CONTRIBUTION = 3, DEFAULT = ARSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARBURST = ARBURST, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = ARBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARLOCK = ARLOCK, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = ARLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARCACHE = ARCACHE, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*4)-1):0], CONTRIBUTION = 4, DEFAULT = ARCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARPROT = ARPROT, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*3)-1):0], CONTRIBUTION = 3, DEFAULT = ARPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARQOS = ARQOS, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*4)-1):0], CONTRIBUTION = 4, DEFAULT = ARQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARUSER = ARUSER, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ARUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_ARUSER_WIDTH, DEFAULT = ARUSER, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARVALID = ARVALID, DIR = I, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = ARVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARREADY = ARREADY, DIR = O, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = ARREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_RID = RID, DIR = O, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH, DEFAULT = RID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_DATA_MAX_WIDTH)-1):0], CONTRIBUTION = C_AXI_DATA_MAX_WIDTH, DEFAULT = RDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [((C_NUM_SLAVE_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = RRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_RLAST = RLAST, DIR = O, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = RLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_RUSER = RUSER, DIR = O, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_RUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_RUSER_WIDTH, DEFAULT = RUSER, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_RVALID = RVALID, DIR = O, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = RVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_RREADY = RREADY, DIR = I, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = RREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ACLK = ACLK, DIR = I, VEC = [(C_NUM_MASTER_SLOTS-1):0], SIGIS = CLK, DEFAULT = ACLK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWID = AWID, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH, DEFAULT = AWID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWADDR = AWADDR, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ADDR_WIDTH)-1):0], CONTRIBUTION = C_AXI_ADDR_WIDTH, DEFAULT = AWADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWLEN = AWLEN, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*8)-1):0], CONTRIBUTION = 8, DEFAULT = AWLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWSIZE = AWSIZE, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*3)-1):0], CONTRIBUTION = 3, DEFAULT = AWSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWBURST = AWBURST, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = AWBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWLOCK = AWLOCK, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = AWLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWCACHE = AWCACHE, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*4)-1):0], CONTRIBUTION = 4, DEFAULT = AWCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWPROT = AWPROT, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*3)-1):0], CONTRIBUTION = 3, DEFAULT = AWPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWREGION = AWREGION, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*4)-1):0], CONTRIBUTION = 4, DEFAULT = AWREGION, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWQOS = AWQOS, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*4)-1):0], CONTRIBUTION = 4, DEFAULT = AWQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWUSER = AWUSER, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_AWUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_AWUSER_WIDTH, DEFAULT = AWUSER, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWVALID = AWVALID, DIR = O, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = AWVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWREADY = AWREADY, DIR = I, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = AWREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_WID = WID, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH, DEFAULT = WID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_WDATA = WDATA, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_DATA_MAX_WIDTH)-1):0], CONTRIBUTION = C_AXI_DATA_MAX_WIDTH, DEFAULT = WDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_WSTRB = WSTRB, DIR = O, VEC = [(((C_NUM_MASTER_SLOTS*C_AXI_DATA_MAX_WIDTH)/8)-1):0], CONTRIBUTION = C_AXI_DATA_MAX_WIDTH/8, DEFAULT = WSTRB, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_WLAST = WLAST, DIR = O, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = WLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_WUSER = WUSER, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_WUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_WUSER_WIDTH, DEFAULT = WUSER, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_WVALID = WVALID, DIR = O, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = WVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_WREADY = WREADY, DIR = I, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = WREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_BID = BID, DIR = I, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH, DEFAULT = BID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_BRESP = BRESP, DIR = I, VEC = [((C_NUM_MASTER_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = BRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_BUSER = BUSER, DIR = I, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_BUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_BUSER_WIDTH, DEFAULT = BUSER, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_BVALID = BVALID, DIR = I, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = BVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_BREADY = BREADY, DIR = O, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = BREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARID = ARID, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH, DEFAULT = ARID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARADDR = ARADDR, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ADDR_WIDTH)-1):0], CONTRIBUTION = C_AXI_ADDR_WIDTH, DEFAULT = ARADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARLEN = ARLEN, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*8)-1):0], CONTRIBUTION = 8, DEFAULT = ARLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARSIZE = ARSIZE, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*3)-1):0], CONTRIBUTION = 3, DEFAULT = ARSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARBURST = ARBURST, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = ARBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARLOCK = ARLOCK, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = ARLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARCACHE = ARCACHE, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*4)-1):0], CONTRIBUTION = 4, DEFAULT = ARCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARPROT = ARPROT, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*3)-1):0], CONTRIBUTION = 3, DEFAULT = ARPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARREGION = ARREGION, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*4)-1):0], CONTRIBUTION = 4, DEFAULT = ARREGION, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARQOS = ARQOS, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*4)-1):0], CONTRIBUTION = 4, DEFAULT = ARQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARUSER = ARUSER, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ARUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_ARUSER_WIDTH, DEFAULT = ARUSER, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARVALID = ARVALID, DIR = O, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = ARVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARREADY = ARREADY, DIR = I, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = ARREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_RID = RID, DIR = I, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH, DEFAULT = RID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_RDATA = RDATA, DIR = I, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_DATA_MAX_WIDTH)-1):0], CONTRIBUTION = C_AXI_DATA_MAX_WIDTH, DEFAULT = RDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_RRESP = RRESP, DIR = I, VEC = [((C_NUM_MASTER_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = RRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_RLAST = RLAST, DIR = I, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = RLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_RUSER = RUSER, DIR = I, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_RUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_RUSER_WIDTH, DEFAULT = RUSER, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_RVALID = RVALID, DIR = I, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = RVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_RREADY = RREADY, DIR = O, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = RREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_CTRL_AWADDR = AWADDR, DIR = I, BUS = S_AXI_CTRL, VEC = [(C_S_AXI_CTRL_ADDR_WIDTH - 1) : 0], DEFAULT = AWADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_AWVALID = AWVALID, DIR = I, BUS = S_AXI_CTRL, DEFAULT = AWVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_AWREADY = AWREADY, DIR = O, BUS = S_AXI_CTRL, DEFAULT = AWREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_WDATA = WDATA, DIR = I, BUS = S_AXI_CTRL, VEC = [(C_S_AXI_CTRL_DATA_WIDTH - 1) : 0], DEFAULT = WDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_WVALID = WVALID, DIR = I, BUS = S_AXI_CTRL, DEFAULT = WVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_WREADY = WREADY, DIR = O, BUS = S_AXI_CTRL, DEFAULT = WREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_BRESP = BRESP, DIR = O, BUS = S_AXI_CTRL, VEC = [1 : 0], DEFAULT = BRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_BVALID = BVALID, DIR = O, BUS = S_AXI_CTRL, DEFAULT = BVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_BREADY = BREADY, DIR = I, BUS = S_AXI_CTRL, DEFAULT = BREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_ARADDR = ARADDR, DIR = I, BUS = S_AXI_CTRL, VEC = [(C_S_AXI_CTRL_ADDR_WIDTH - 1) : 0], DEFAULT = ARADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_ARVALID = ARVALID, DIR = I, BUS = S_AXI_CTRL, DEFAULT = ARVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_ARREADY = ARREADY, DIR = O, BUS = S_AXI_CTRL, DEFAULT = ARREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_RDATA = RDATA, DIR = O, BUS = S_AXI_CTRL, VEC = [(C_S_AXI_CTRL_DATA_WIDTH - 1) : 0], DEFAULT = RDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_RRESP = RRESP, DIR = O, BUS = S_AXI_CTRL, VEC = [1 : 0], DEFAULT = RRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_RVALID = RVALID, DIR = O, BUS = S_AXI_CTRL, DEFAULT = RVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_RREADY = RREADY, DIR = I, BUS = S_AXI_CTRL, DEFAULT = RREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
END

BEGIN axi_dma
 PARAMETER INSTANCE = axi_dma_0
 PARAMETER C_INTERCONNECT_S_AXI_LITE_MASTERS = none, DT = string, TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Masters that can talk to this slave, LONG_DESC = The '&' separated list of master interfaces that can access this slave, GUI_PERMIT = , BUS = S_AXI_LITE, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = none, RESOLVED_BUS = S_AXI_LITE
 PARAMETER C_INTERCONNECT_S_AXI_LITE_IS_ACLK_ASYNC = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Is ACLK Asynchronous to Interconnect_ACLK, LONG_DESC = Is ACLK asynchronous with respect to the interconnect's ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_LITE, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, RESOLVED_BUS = S_AXI_LITE
 PARAMETER C_INTERCONNECT_S_AXI_LITE_ACLK_RATIO = 1, DT = integer, RANGE = (1 : 2147483647), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = UPDATE, DESC = ACLK Frequency Ratio, LONG_DESC = In relation to C_INTERCONNECT_ACLK_RATIO on the interconnect, indicates the ratio of the ACLK frequency of this bus interface to the frequency of INTERCONNECT_ACLK. Automatically set to the ACLK frequency in Hz., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_LITE, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 1, RESOLVED_BUS = S_AXI_LITE
 PARAMETER C_INTERCONNECT_S_AXI_LITE_SECURE = 0, DT = integer, RANGE = (0,1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Require TrustZone Secure on all accesses, LONG_DESC = All accesses to slave required to be secure, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_LITE, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, RESOLVED_BUS = S_AXI_LITE
 PARAMETER C_INTERCONNECT_S_AXI_LITE_AW_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AW channel, LONG_DESC = Insert register slice on AW channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_LITE, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, RESOLVED_BUS = S_AXI_LITE
 PARAMETER C_INTERCONNECT_S_AXI_LITE_AR_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AR channel, LONG_DESC = Insert register slice on AR channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_LITE, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, RESOLVED_BUS = S_AXI_LITE
 PARAMETER C_INTERCONNECT_S_AXI_LITE_W_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on W channel, LONG_DESC = Insert register slice on W channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_LITE, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, RESOLVED_BUS = S_AXI_LITE
 PARAMETER C_INTERCONNECT_S_AXI_LITE_R_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on R channel, LONG_DESC = Insert register slice on R channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_LITE, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, RESOLVED_BUS = S_AXI_LITE
 PARAMETER C_INTERCONNECT_S_AXI_LITE_B_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on B channel, LONG_DESC = Insert register slice on B channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_LITE, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, RESOLVED_BUS = S_AXI_LITE
 PARAMETER C_INTERCONNECT_S_AXI_LITE_WRITE_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Write Data FIFO Depth, LONG_DESC = Depth of bus interface write data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_LITE, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, RESOLVED_BUS = S_AXI_LITE
 PARAMETER C_INTERCONNECT_S_AXI_LITE_WRITE_FIFO_DELAY = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Write Data FIFO Burst Delay, LONG_DESC = Delay issuing M_AXI_AWVALID until complete burst is stored in write data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_LITE, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, RESOLVED_BUS = S_AXI_LITE
 PARAMETER C_INTERCONNECT_S_AXI_LITE_READ_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Read Data FIFO Depth, LONG_DESC = Depth of bus interface read data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_LITE, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, RESOLVED_BUS = S_AXI_LITE
 PARAMETER C_INTERCONNECT_S_AXI_LITE_READ_FIFO_DELAY = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Read Data FIFO Burst Delay, LONG_DESC = Delay issuing M_AXI_ARVALID until read data FIFO has vacancy to store entire burst length, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_LITE, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, RESOLVED_BUS = S_AXI_LITE
 PARAMETER C_INTERCONNECT_S_AXI_LITE_WRITE_ACCEPTANCE = 1, DT = integer, RANGE = (1:32), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Write Transaction Acceptance Limit, LONG_DESC = Maximum number of active write transactions that the bus interface can accept. This parameter is ignored when the IP is connected to an interconnect in Shared-Access mode., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_LITE, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 1, RESOLVED_BUS = S_AXI_LITE
 PARAMETER C_INTERCONNECT_S_AXI_LITE_READ_ACCEPTANCE = 1, DT = integer, RANGE = (1:32), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Read Transaction Acceptance Limit, LONG_DESC = Maximum number of active read transactions that the bus interface can accept. This parameter is ignored when the IP is connected to an interconnect in Shared-Access mode., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_LITE, AXI_VER = 1.06.a, BUS_TYPE = SLAVE, MPD_VALUE = 1, RESOLVED_BUS = S_AXI_LITE
 PARAMETER C_S_AXI_LITE_ADDED_AXI_PARAMS = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_S_AXI_LITE_AXI_VER = 1.06.a, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_INTERCONNECT_M_AXI_SG_BASE_ID = 0b0000000000000000, DT = std_logic_vector, TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Unique Master ID, LONG_DESC = The unique master ID of the master interface. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , BITWIDTH = 16, BUS = M_AXI_SG, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0b0000000000000000, ISVALID = (C_INCLUDE_SG == 1), RESOLVED_BUS = M_AXI_SG
 PARAMETER C_INTERCONNECT_M_AXI_SG_IS_ACLK_ASYNC = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Is ACLK Asynchronous to Interconnect_ACLK, LONG_DESC = Is ACLK asynchronous with respect to the interconnect's ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_SG, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_SG == 1), RESOLVED_BUS = M_AXI_SG
 PARAMETER C_INTERCONNECT_M_AXI_SG_ACLK_RATIO = 1, DT = integer, RANGE = (1 : 2147483647), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = UPDATE, DESC = ACLK Frequency Ratio, LONG_DESC = In relation to C_INTERCONNECT_ACLK_RATIO on the interconnect, indicates the ratio of the ACLK frequency of this bus interface to the frequency of INTERCONNECT_ACLK. Automatically set to the ACLK frequency in Hz., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_SG, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 1, ISVALID = (C_INCLUDE_SG == 1), RESOLVED_BUS = M_AXI_SG
 PARAMETER C_INTERCONNECT_M_AXI_SG_ARB_PRIORITY = 0, DT = integer, RANGE = (0:15), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Arbitration Priority, LONG_DESC = Arbitration priority. Higher values indicate higher priority. Round-robin arbitration is used among all masters with priority value 0, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_SG, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_SG == 1), RESOLVED_BUS = M_AXI_SG
 PARAMETER C_INTERCONNECT_M_AXI_SG_AW_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AW channel, LONG_DESC = Insert register slice on AW channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_SG, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_SG == 1), RESOLVED_BUS = M_AXI_SG
 PARAMETER C_INTERCONNECT_M_AXI_SG_AR_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AR channel, LONG_DESC = Insert register slice on AR channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_SG, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_SG == 1), RESOLVED_BUS = M_AXI_SG
 PARAMETER C_INTERCONNECT_M_AXI_SG_W_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on W channel, LONG_DESC = Insert register slice on W channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_SG, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_SG == 1), RESOLVED_BUS = M_AXI_SG
 PARAMETER C_INTERCONNECT_M_AXI_SG_R_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on R channel, LONG_DESC = Insert register slice on R channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_SG, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_SG == 1), RESOLVED_BUS = M_AXI_SG
 PARAMETER C_INTERCONNECT_M_AXI_SG_B_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on B channel, LONG_DESC = Insert register slice on B channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_SG, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_SG == 1), RESOLVED_BUS = M_AXI_SG
 PARAMETER C_INTERCONNECT_M_AXI_SG_WRITE_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Write Data FIFO Depth, LONG_DESC = Depth of bus interface write data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_SG, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_SG == 1), RESOLVED_BUS = M_AXI_SG
 PARAMETER C_INTERCONNECT_M_AXI_SG_WRITE_FIFO_DELAY = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Write Data FIFO Burst Delay, LONG_DESC = Delay issuing AWVALID to arbiter until complete burst is stored in write data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_SG, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_SG == 1), RESOLVED_BUS = M_AXI_SG
 PARAMETER C_INTERCONNECT_M_AXI_SG_READ_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Read Data FIFO Depth, LONG_DESC = Depth of bus interface read data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_SG, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_SG == 1), RESOLVED_BUS = M_AXI_SG
 PARAMETER C_INTERCONNECT_M_AXI_SG_READ_FIFO_DELAY = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Read Data FIFO Burst Delay, LONG_DESC = Delay issuing ARVALID to arbiter until read data FIFO has vacancy to store entire burst length, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_SG, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_SG == 1), RESOLVED_BUS = M_AXI_SG
 PARAMETER C_INTERCONNECT_M_AXI_SG_WRITE_ISSUING = 1, DT = integer, RANGE = (1:32), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Write Transaction Issuing Limit, LONG_DESC = Maximum number of active write transactions that the bus interface can generate. This parameter is ignored when the IP is connected to an interconnect in Shared-Access mode., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_SG, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 1, ISVALID = (C_INCLUDE_SG == 1), RESOLVED_BUS = M_AXI_SG
 PARAMETER C_INTERCONNECT_M_AXI_SG_READ_ISSUING = 1, DT = integer, RANGE = (1:32), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Read Transaction Issuing Limit, LONG_DESC = Maximum number of active read transactions that the bus interface can generate. This parameter is ignored when the IP is connected to an interconnect in Shared-Access mode., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_SG, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 1, ISVALID = (C_INCLUDE_SG == 1), RESOLVED_BUS = M_AXI_SG
 PARAMETER C_INTERCONNECT_M_AXI_SG_SINGLE_THREAD = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Accept only one ID thread at a time, LONG_DESC = Transaction requests are withheld from AW/AR channel arbitration as long as there are any outstanding transactions from the same master with a different ID value., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_SG, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_SG == 1), RESOLVED_BUS = M_AXI_SG
 PARAMETER C_M_AXI_SG_ADDED_AXI_PARAMS = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_M_AXI_SG_AXI_VER = 1.06.a, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_INTERCONNECT_M_AXI_MM2S_BASE_ID = 0b0000000000000000, DT = std_logic_vector, TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Unique Master ID, LONG_DESC = The unique master ID of the master interface. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , BITWIDTH = 16, BUS = M_AXI_MM2S, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0b0000000000000000, ISVALID = (C_INCLUDE_MM2S == 1), RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_INTERCONNECT_M_AXI_MM2S_IS_ACLK_ASYNC = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Is ACLK Asynchronous to Interconnect_ACLK, LONG_DESC = Is ACLK asynchronous with respect to the interconnect's ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_MM2S, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_MM2S == 1), RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_INTERCONNECT_M_AXI_MM2S_ACLK_RATIO = 1, DT = integer, RANGE = (1 : 2147483647), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = UPDATE, DESC = ACLK Frequency Ratio, LONG_DESC = In relation to C_INTERCONNECT_ACLK_RATIO on the interconnect, indicates the ratio of the ACLK frequency of this bus interface to the frequency of INTERCONNECT_ACLK. Automatically set to the ACLK frequency in Hz., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_MM2S, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 1, ISVALID = (C_INCLUDE_MM2S == 1), RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_INTERCONNECT_M_AXI_MM2S_ARB_PRIORITY = 0, DT = integer, RANGE = (0:15), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Arbitration Priority, LONG_DESC = Arbitration priority. Higher values indicate higher priority. Round-robin arbitration is used among all masters with priority value 0, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_MM2S, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_MM2S == 1), RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_INTERCONNECT_M_AXI_MM2S_AW_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AW channel, LONG_DESC = Insert register slice on AW channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_MM2S, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_MM2S == 1), RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_INTERCONNECT_M_AXI_MM2S_AR_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AR channel, LONG_DESC = Insert register slice on AR channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_MM2S, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_MM2S == 1), RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_INTERCONNECT_M_AXI_MM2S_W_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on W channel, LONG_DESC = Insert register slice on W channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_MM2S, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_MM2S == 1), RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_INTERCONNECT_M_AXI_MM2S_R_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on R channel, LONG_DESC = Insert register slice on R channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_MM2S, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_MM2S == 1), RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_INTERCONNECT_M_AXI_MM2S_B_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on B channel, LONG_DESC = Insert register slice on B channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_MM2S, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_MM2S == 1), RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_INTERCONNECT_M_AXI_MM2S_WRITE_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Write Data FIFO Depth, LONG_DESC = Depth of bus interface write data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_MM2S, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_MM2S == 1), RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_INTERCONNECT_M_AXI_MM2S_WRITE_FIFO_DELAY = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Write Data FIFO Burst Delay, LONG_DESC = Delay issuing AWVALID to arbiter until complete burst is stored in write data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_MM2S, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_MM2S == 1), RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_INTERCONNECT_M_AXI_MM2S_READ_FIFO_DEPTH = 512, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), ASSOCIATION = MASTER, DESC = Read Data FIFO Depth, LONG_DESC = Depth of bus interface read data FIFO, CONST_RANGE = , IS_RANGE_CONST = TRUE, AXI_VER = 1.06.a, BUS_TYPE = MASTER, DT = INTEGER, BUS = M_AXI_MM2S, ASSIGNMENT = OPTIONAL, ISVALID = (C_INCLUDE_MM2S == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 512, RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_INTERCONNECT_M_AXI_MM2S_READ_FIFO_DELAY = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Read Data FIFO Burst Delay, LONG_DESC = Delay issuing ARVALID to arbiter until read data FIFO has vacancy to store entire burst length, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_MM2S, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_MM2S == 1), RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_INTERCONNECT_M_AXI_MM2S_WRITE_ISSUING = 1, DT = integer, RANGE = (1:32), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Write Transaction Issuing Limit, LONG_DESC = Maximum number of active write transactions that the bus interface can generate. This parameter is ignored when the IP is connected to an interconnect in Shared-Access mode., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_MM2S, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 1, ISVALID = (C_INCLUDE_MM2S == 1), RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_INTERCONNECT_M_AXI_MM2S_READ_ISSUING = 4, RANGE = (1:32), ASSOCIATION = MASTER, DESC = Read Transaction Issuing Limit, LONG_DESC = Maximum number of active read transactions that the bus interface can generate. This parameter is ignored when the IP is connected to an interconnect in Shared-Access mode., CONST_RANGE = , IS_RANGE_CONST = TRUE, AXI_VER = 1.06.a, BUS_TYPE = MASTER, DT = INTEGER, BUS = M_AXI_MM2S, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_INCLUDE_MM2S == 1), TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mm2s_issuing, GUI_PERMIT = , MPD_VALUE = 4, RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_INTERCONNECT_M_AXI_MM2S_SINGLE_THREAD = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Accept only one ID thread at a time, LONG_DESC = Transaction requests are withheld from AW/AR channel arbitration as long as there are any outstanding transactions from the same master with a different ID value., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_MM2S, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_MM2S == 1), RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_M_AXI_MM2S_ADDED_AXI_PARAMS = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_M_AXI_MM2S_AXI_VER = 1.06.a, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_INTERCONNECT_M_AXI_S2MM_BASE_ID = 0b0000000000000000, DT = std_logic_vector, TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Unique Master ID, LONG_DESC = The unique master ID of the master interface. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , BITWIDTH = 16, BUS = M_AXI_S2MM, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0b0000000000000000, ISVALID = (C_INCLUDE_S2MM == 1), RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_INTERCONNECT_M_AXI_S2MM_IS_ACLK_ASYNC = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Is ACLK Asynchronous to Interconnect_ACLK, LONG_DESC = Is ACLK asynchronous with respect to the interconnect's ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_S2MM, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_S2MM == 1), RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_INTERCONNECT_M_AXI_S2MM_ACLK_RATIO = 1, DT = integer, RANGE = (1 : 2147483647), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = UPDATE, DESC = ACLK Frequency Ratio, LONG_DESC = In relation to C_INTERCONNECT_ACLK_RATIO on the interconnect, indicates the ratio of the ACLK frequency of this bus interface to the frequency of INTERCONNECT_ACLK. Automatically set to the ACLK frequency in Hz., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_S2MM, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 1, ISVALID = (C_INCLUDE_S2MM == 1), RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_INTERCONNECT_M_AXI_S2MM_ARB_PRIORITY = 0, DT = integer, RANGE = (0:15), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Arbitration Priority, LONG_DESC = Arbitration priority. Higher values indicate higher priority. Round-robin arbitration is used among all masters with priority value 0, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_S2MM, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_S2MM == 1), RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_INTERCONNECT_M_AXI_S2MM_AW_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AW channel, LONG_DESC = Insert register slice on AW channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_S2MM, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_S2MM == 1), RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_INTERCONNECT_M_AXI_S2MM_AR_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AR channel, LONG_DESC = Insert register slice on AR channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_S2MM, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_S2MM == 1), RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_INTERCONNECT_M_AXI_S2MM_W_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on W channel, LONG_DESC = Insert register slice on W channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_S2MM, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_S2MM == 1), RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_INTERCONNECT_M_AXI_S2MM_R_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on R channel, LONG_DESC = Insert register slice on R channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_S2MM, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_S2MM == 1), RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_INTERCONNECT_M_AXI_S2MM_B_REGISTER = 0, DT = integer, RANGE = (0, 1, 2, 3, 6, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Use register slice on B channel, LONG_DESC = Insert register slice on B channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_S2MM, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_S2MM == 1), RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_INTERCONNECT_M_AXI_S2MM_WRITE_FIFO_DEPTH = 512, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), ASSOCIATION = MASTER, DESC = Write Data FIFO Depth, LONG_DESC = Depth of bus interface write data FIFO, CONST_RANGE = , IS_RANGE_CONST = TRUE, AXI_VER = 1.06.a, BUS_TYPE = MASTER, DT = INTEGER, BUS = M_AXI_S2MM, ASSIGNMENT = OPTIONAL, ISVALID = (C_INCLUDE_S2MM == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 512, RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_INTERCONNECT_M_AXI_S2MM_WRITE_FIFO_DELAY = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Write Data FIFO Burst Delay, LONG_DESC = Delay issuing AWVALID to arbiter until complete burst is stored in write data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_S2MM, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_S2MM == 1), RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_INTERCONNECT_M_AXI_S2MM_READ_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Read Data FIFO Depth, LONG_DESC = Depth of bus interface read data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_S2MM, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_S2MM == 1), RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_INTERCONNECT_M_AXI_S2MM_READ_FIFO_DELAY = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Read Data FIFO Burst Delay, LONG_DESC = Delay issuing ARVALID to arbiter until read data FIFO has vacancy to store entire burst length, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_S2MM, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_S2MM == 1), RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_INTERCONNECT_M_AXI_S2MM_WRITE_ISSUING = 4, RANGE = (1:32), ASSOCIATION = MASTER, DESC = Write Transaction Issuing Limit, LONG_DESC = Maximum number of active write transactions that the bus interface can generate. This parameter is ignored when the IP is connected to an interconnect in Shared-Access mode., CONST_RANGE = , IS_RANGE_CONST = TRUE, AXI_VER = 1.06.a, BUS_TYPE = MASTER, DT = INTEGER, BUS = M_AXI_S2MM, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_INCLUDE_S2MM == 1), TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_s2mm_issuing, GUI_PERMIT = , MPD_VALUE = 4, RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_INTERCONNECT_M_AXI_S2MM_READ_ISSUING = 1, DT = integer, RANGE = (1:32), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Read Transaction Issuing Limit, LONG_DESC = Maximum number of active read transactions that the bus interface can generate. This parameter is ignored when the IP is connected to an interconnect in Shared-Access mode., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_S2MM, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 1, ISVALID = (C_INCLUDE_S2MM == 1), RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_INTERCONNECT_M_AXI_S2MM_SINGLE_THREAD = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = MASTER, ASSIGNMENT = OPTIONAL, DESC = Accept only one ID thread at a time, LONG_DESC = Transaction requests are withheld from AW/AR channel arbitration as long as there are any outstanding transactions from the same master with a different ID value., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = M_AXI_S2MM, AXI_VER = 1.06.a, BUS_TYPE = MASTER, MPD_VALUE = 0, ISVALID = (C_INCLUDE_S2MM == 1), RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_M_AXI_S2MM_ADDED_AXI_PARAMS = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_M_AXI_S2MM_AXI_VER = 1.06.a, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_M_AXI_SG_AWUSER_WIDTH = 4, DT = INTEGER, BUS = M_AXI_SG, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_SG == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 4, RESOLVED_BUS = M_AXI_SG
 PARAMETER C_M_AXI_SG_ARUSER_WIDTH = 4, DT = INTEGER, BUS = M_AXI_SG, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_SG == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 4, RESOLVED_BUS = M_AXI_SG
 PARAMETER C_M_AXI_MM2S_ARUSER_WIDTH = 4, DT = INTEGER, BUS = M_AXI_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 4, RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_M_AXI_S2MM_AWUSER_WIDTH = 4, DT = INTEGER, BUS = M_AXI_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 4, RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_S_AXI_LITE_ADDR_WIDTH = 10, DT = INTEGER, RANGE = (10), ASSIGNMENT = CONSTANT, BUS = S_AXI_LITE, AFFECTS_PORTS_VEC = s_axi_lite_awaddr:s_axi_lite_araddr, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 10, RESOLVED_BUS = S_AXI_LITE
 PARAMETER C_S_AXI_LITE_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32), ASSIGNMENT = CONSTANT, BUS = S_AXI_LITE, AFFECTS_PORTS_VEC = s_axi_lite_wdata:s_axi_lite_rdata, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32, RESOLVED_BUS = S_AXI_LITE
 PARAMETER C_DLYTMR_RESOLUTION = 125, DT = INTEGER, RANGE = (1:100000), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 125
 PARAMETER C_PRMRY_IS_ACLK_ASYNC = 0, DT = INTEGER, RANGE = (0,1), BUS = M_AXI_MM2S:M_AXI_S2MM:S_AXIS_S2MM_STS:M_AXIS_MM2S_CNTRL:M_AXIS_MM2S:S_AXIS_S2MM:S_AXI_LITE:M_AXI_SG, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_prmry_is_async, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0, RESOLVED_BUS = M_AXI_MM2S:M_AXI_S2MM:S_AXIS_S2MM:S_AXI_LITE:M_AXI_SG
 PARAMETER C_INCLUDE_SG = 1, DT = INTEGER, RANGE = (0,1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_M_AXI_SG_AWUSER_WIDTH:C_M_AXI_SG_ARUSER_WIDTH:C_ENABLE_MULTI_CHANNEL:C_SG_INCLUDE_DESC_QUEUE:C_SG_INCLUDE_STSCNTRL_STRM:C_SG_USE_STSAPP_LENGTH:C_M_AXI_SG_PROTOCOL:C_M_AXI_SG_SUPPORTS_THREADS:C_M_AXI_SG_THREAD_ID_WIDTH:C_M_AXI_SG_SUPPORTS_NARROW_BURST:C_M_AXI_SG_SUPPORTS_READ:C_M_AXI_SG_SUPPORTS_WRITE, MPD_VALUE = 1
 PARAMETER C_ENABLE_MULTI_CHANNEL = 0, DT = INTEGER, RANGE = (0,1), ISVALID = (C_INCLUDE_SG == 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_SG_INCLUDE_STSCNTRL_STRM:C_SG_USE_STSAPP_LENGTH:C_NUM_S2MM_CHANNELS:C_NUM_MM2S_CHANNELS, MPD_VALUE = 0
 PARAMETER C_SG_INCLUDE_DESC_QUEUE = 0, DT = INTEGER, RANGE = (0,1), ISVALID = (C_INCLUDE_SG == 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_SG_INCLUDE_STSCNTRL_STRM = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_INCLUDE_SG == 1 && C_ENABLE_MULTI_CHANNEL == 0), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_SG_USE_STSAPP_LENGTH:C_M_AXIS_MM2S_CNTRL_TDATA_WIDTH:C_S_AXIS_S2MM_STS_TDATA_WIDTH:C_M_AXIS_MM2S_CNTRL_PROTOCOL:C_S_AXIS_S2MM_STS_PROTOCOL, MPD_VALUE = 1
 PARAMETER C_SG_USE_STSAPP_LENGTH = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_INCLUDE_SG == 1 && C_SG_INCLUDE_STSCNTRL_STRM == 1 && C_ENABLE_MULTI_CHANNEL == 0), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_SG_LENGTH_WIDTH = 14, DT = INTEGER, RANGE = (8:23), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 14
 PARAMETER C_M_AXI_SG_ADDR_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = M_AXI_SG, ASSIGNMENT = CONSTANT, AFFECTS_PORTS_VEC = m_axi_sg_awaddr:m_axi_sg_araddr, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32, RESOLVED_BUS = M_AXI_SG
 PARAMETER C_M_AXI_SG_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = M_AXI_SG, ASSIGNMENT = CONSTANT, AFFECTS_PORTS_VEC = m_axi_sg_wdata:m_axi_sg_wstrb:m_axi_sg_rdata, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32, RESOLVED_BUS = M_AXI_SG
 PARAMETER C_M_AXIS_MM2S_CNTRL_TDATA_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = M_AXIS_MM2S_CNTRL, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1 && C_SG_INCLUDE_STSCNTRL_STRM == 1), AFFECTS_PORTS_VEC = m_axis_mm2s_cntrl_tdata:m_axis_mm2s_cntrl_tkeep, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32, RESOLVED_BUS = 
 PARAMETER C_S_AXIS_S2MM_STS_TDATA_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = S_AXIS_S2MM_STS, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1 && C_SG_INCLUDE_STSCNTRL_STRM == 1), AFFECTS_PORTS_VEC = s_axis_s2mm_sts_tdata:s_axis_s2mm_sts_tkeep, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32, RESOLVED_BUS = 
 PARAMETER C_INCLUDE_MM2S = 1, DT = INTEGER, RANGE = (0,1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_M_AXI_MM2S_ARUSER_WIDTH:C_M_AXIS_MM2S_CNTRL_TDATA_WIDTH:C_INCLUDE_MM2S_SF:C_INCLUDE_MM2S_DRE:C_MM2S_BURST_SIZE:C_M_AXI_MM2S_ADDR_WIDTH:C_M_AXI_MM2S_DATA_WIDTH:C_M_AXIS_MM2S_TDATA_WIDTH:C_NUM_MM2S_CHANNELS:C_M_AXI_MM2S_PROTOCOL:C_M_AXI_MM2S_SUPPORTS_THREADS:C_M_AXI_MM2S_THREAD_ID_WIDTH:C_M_AXI_MM2S_SUPPORTS_NARROW_BURST:C_M_AXI_MM2S_SUPPORTS_READ:C_M_AXI_MM2S_SUPPORTS_WRITE:C_INTERCONNECT_M_AXI_MM2S_READ_ISSUING:C_INTERCONNECT_M_AXI_MM2S_READ_FIFO_DEPTH:C_M_AXIS_MM2S_CNTRL_PROTOCOL:C_M_AXIS_MM2S_PROTOCOL, MPD_VALUE = 1
 PARAMETER C_INCLUDE_MM2S_SF = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_INCLUDE_MM2S == 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_INCLUDE_MM2S_DRE = 0, DT = INTEGER, RANGE = (0,1), ISVALID = (C_INCLUDE_MM2S == 1), IPLEVEL_DRC_PROC = iplevel_drc_mm2s_dre, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_MM2S_BURST_SIZE = 16, DT = INTEGER, RANGE = (16,32,64,128,256), ISVALID = (C_INCLUDE_MM2S == 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 16
 PARAMETER C_M_AXI_MM2S_ADDR_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = M_AXI_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1), AFFECTS_PORTS_VEC = m_axi_mm2s_araddr, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32, RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_M_AXI_MM2S_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32,64,128,256,512,1024), BUS = M_AXI_MM2S, ISVALID = (C_INCLUDE_MM2S == 1), AFFECTS_PORTS_VEC = m_axi_mm2s_rdata, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32, RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_M_AXIS_MM2S_TDATA_WIDTH = 32, DT = INTEGER, RANGE = (8,16,32,64,128,256,512,1024), BUS = M_AXIS_MM2S, ISVALID = (C_INCLUDE_MM2S == 1), IPLEVEL_DRC_PROC = iplevel_drc_mm2s_tdata_width, AFFECTS_PORTS_VEC = m_axis_mm2s_tdata:m_axis_mm2s_tkeep, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32, RESOLVED_BUS = 
 PARAMETER C_INCLUDE_S2MM = 1, DT = INTEGER, RANGE = (0,1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_M_AXI_S2MM_AWUSER_WIDTH:C_S_AXIS_S2MM_STS_TDATA_WIDTH:C_INCLUDE_S2MM_SF:C_INCLUDE_S2MM_DRE:C_S2MM_BURST_SIZE:C_M_AXI_S2MM_ADDR_WIDTH:C_M_AXI_S2MM_DATA_WIDTH:C_S_AXIS_S2MM_TDATA_WIDTH:C_NUM_S2MM_CHANNELS:C_M_AXI_S2MM_PROTOCOL:C_M_AXI_S2MM_SUPPORTS_THREADS:C_M_AXI_S2MM_THREAD_ID_WIDTH:C_M_AXI_S2MM_SUPPORTS_NARROW_BURST:C_M_AXI_S2MM_SUPPORTS_WRITE:C_M_AXI_S2MM_SUPPORTS_READ:C_INTERCONNECT_M_AXI_S2MM_WRITE_ISSUING:C_INTERCONNECT_M_AXI_S2MM_WRITE_FIFO_DEPTH:C_S_AXIS_S2MM_STS_PROTOCOL:C_S_AXIS_S2MM_PROTOCOL, MPD_VALUE = 1
 PARAMETER C_INCLUDE_S2MM_SF = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_INCLUDE_S2MM == 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_INCLUDE_S2MM_DRE = 0, DT = INTEGER, RANGE = (0,1), ISVALID = (C_INCLUDE_S2MM == 1), IPLEVEL_DRC_PROC = iplevel_drc_s2mm_dre, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_S2MM_BURST_SIZE = 16, DT = INTEGER, RANGE = (16,32,64,128,256), ISVALID = (C_INCLUDE_S2MM == 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 16
 PARAMETER C_M_AXI_S2MM_ADDR_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = M_AXI_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1), AFFECTS_PORTS_VEC = m_axi_s2mm_awaddr, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32, RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_M_AXI_S2MM_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32,64,128,256,512,1024), BUS = M_AXI_S2MM, ISVALID = (C_INCLUDE_S2MM == 1), AFFECTS_PORTS_VEC = m_axi_s2mm_wdata:m_axi_s2mm_wstrb, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32, RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_S_AXIS_S2MM_TDATA_WIDTH = 32, DT = INTEGER, RANGE = (8,16,32,64,128,256,512,1024), BUS = S_AXIS_S2MM, ISVALID = (C_INCLUDE_S2MM == 1), IPLEVEL_DRC_PROC = iplevel_drc_s2mm_tdata_width, AFFECTS_PORTS_VEC = s_axis_s2mm_tdata:s_axis_s2mm_tkeep, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32, RESOLVED_BUS = S_AXIS_S2MM
 PARAMETER C_NUM_S2MM_CHANNELS = 1, DT = INTEGER, RANGE = (1:16), ISVALID = (C_ENABLE_MULTI_CHANNEL == 1 && C_INCLUDE_S2MM == 1), IPLEVEL_DRC_PROC = iplevel_drc_s2mm_channels, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_NUM_MM2S_CHANNELS = 1, DT = INTEGER, RANGE = (1:16), ISVALID = (C_ENABLE_MULTI_CHANNEL == 1 && C_INCLUDE_MM2S == 1), IPLEVEL_DRC_PROC = iplevel_drc_mm2s_channels, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_FAMILY = virtex6, DT = STRING, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = virtex6
 PARAMETER C_INSTANCE = axi_dma, DT = STRING, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = axi_dma
 PARAMETER C_BASEADDR = 0x40400000, DT = STD_LOGIC_VECTOR(31 downto 0), PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_LITE, MIN_SIZE = 0x1000, ASSIGNMENT = REQUIRE, TYPE = NON_HDL, ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0xffffffff, MHS_VALUE = 0x40400000, RESOLVED_BUS = S_AXI_LITE
 PARAMETER C_HIGHADDR = 0x4040ffff, DT = STD_LOGIC_VECTOR(31 downto 0), PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_LITE, ASSIGNMENT = REQUIRE, TYPE = NON_HDL, ADDR_TYPE = REGISTER, BITWIDTH = 32, GUI_PERMIT = , MPD_VALUE = 0x00000000, MHS_VALUE = 0x4040ffff, MIN_SIZE = 0x1000, RESOLVED_BUS = S_AXI_LITE
 PARAMETER C_S_AXI_LITE_PROTOCOL = AXI4LITE, DT = STRING, BUS = S_AXI_LITE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = AXI4LITE, RESOLVED_BUS = S_AXI_LITE
 PARAMETER C_S_AXI_LITE_SUPPORTS_READ = 1, DT = INTEGER, BUS = S_AXI_LITE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 1, RESOLVED_BUS = S_AXI_LITE
 PARAMETER C_S_AXI_LITE_SUPPORTS_WRITE = 1, DT = INTEGER, BUS = S_AXI_LITE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 1, RESOLVED_BUS = S_AXI_LITE
 PARAMETER C_M_AXI_SG_PROTOCOL = AXI4, DT = STRING, BUS = M_AXI_SG, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_SG == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = AXI4, RESOLVED_BUS = M_AXI_SG
 PARAMETER C_M_AXI_SG_SUPPORTS_THREADS = 0, DT = INTEGER, BUS = M_AXI_SG, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_SG == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 0, RESOLVED_BUS = M_AXI_SG
 PARAMETER C_M_AXI_SG_THREAD_ID_WIDTH = 1, DT = INTEGER, BUS = M_AXI_SG, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_SG == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 1, RESOLVED_BUS = M_AXI_SG
 PARAMETER C_M_AXI_SG_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = M_AXI_SG, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_SG == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 0, RESOLVED_BUS = M_AXI_SG
 PARAMETER C_M_AXI_SG_SUPPORTS_READ = 1, DT = STRING, BUS = M_AXI_SG, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_SG == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 1, RESOLVED_BUS = M_AXI_SG
 PARAMETER C_M_AXI_SG_SUPPORTS_WRITE = 1, DT = STRING, BUS = M_AXI_SG, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_SG == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 1, RESOLVED_BUS = M_AXI_SG
 PARAMETER C_M_AXI_MM2S_PROTOCOL = AXI4, DT = STRING, BUS = M_AXI_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = AXI4, RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_M_AXI_MM2S_SUPPORTS_THREADS = 0, DT = INTEGER, BUS = M_AXI_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 0, RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_M_AXI_MM2S_THREAD_ID_WIDTH = 1, DT = INTEGER, BUS = M_AXI_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 1, RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_M_AXI_MM2S_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = M_AXI_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 0, RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_M_AXI_MM2S_SUPPORTS_READ = 1, DT = STRING, BUS = M_AXI_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 1, RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_M_AXI_MM2S_SUPPORTS_WRITE = 0, DT = STRING, BUS = M_AXI_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 0, RESOLVED_BUS = M_AXI_MM2S
 PARAMETER C_M_AXI_S2MM_PROTOCOL = AXI4, DT = STRING, BUS = M_AXI_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = AXI4, RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_M_AXI_S2MM_SUPPORTS_THREADS = 0, DT = INTEGER, BUS = M_AXI_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 0, RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_M_AXI_S2MM_THREAD_ID_WIDTH = 1, DT = INTEGER, BUS = M_AXI_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 1, RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_M_AXI_S2MM_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = M_AXI_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 0, RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_M_AXI_S2MM_SUPPORTS_WRITE = 1, DT = STRING, BUS = M_AXI_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 1, RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_M_AXI_S2MM_SUPPORTS_READ = 0, DT = STRING, BUS = M_AXI_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = 0, RESOLVED_BUS = M_AXI_S2MM
 PARAMETER C_M_AXIS_MM2S_CNTRL_PROTOCOL = XIL_AXI_STREAM_ETH_CTRL, DT = STRING, BUS = M_AXIS_MM2S_CNTRL, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1 && C_SG_INCLUDE_STSCNTRL_STRM == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = XIL_AXI_STREAM_ETH_CTRL, RESOLVED_BUS = 
 PARAMETER C_S_AXIS_S2MM_STS_PROTOCOL = XIL_AXI_STREAM_ETH_CTRL, DT = STRING, BUS = S_AXIS_S2MM_STS, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1 && C_SG_INCLUDE_STSCNTRL_STRM == 1), TYPE = NON_HDL, GUI_PERMIT = , MPD_VALUE = XIL_AXI_STREAM_ETH_CTRL, RESOLVED_BUS = 
 PARAMETER C_M_AXIS_MM2S_PROTOCOL = XIL_AXI_STREAM_ETH_DATA, DT = STRING, BUS = M_AXIS_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1), TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_protocol, GUI_PERMIT = , MPD_VALUE = XIL_AXI_STREAM_ETH_DATA, RESOLVED_BUS = 
 PARAMETER C_S_AXIS_S2MM_PROTOCOL = XIL_AXI_STREAM_ETH_DATA, DT = STRING, BUS = S_AXIS_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1), TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_protocol, GUI_PERMIT = , MPD_VALUE = XIL_AXI_STREAM_ETH_DATA, RESOLVED_BUS = S_AXIS_S2MM
 PARAMETER C_GENERIC = 0, DT = INTEGER, RANGE = (0,1), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER HW_VER = 6.03.a
 BUS_INTERFACE S_AXI_LITE = axi_interconnect_1, BUS_STD = AXI, BUS_TYPE = SLAVE, ADDR_TYPE = REGISTER
 BUS_INTERFACE M_AXI_SG = axi_interconnect_2, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = (C_INCLUDE_SG == 1), ADDR_TYPE = MEMORY
 BUS_INTERFACE M_AXI_MM2S = axi_interconnect_2, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = (C_INCLUDE_MM2S == 1), ADDR_TYPE = MEMORY
 BUS_INTERFACE M_AXI_S2MM = axi_interconnect_2, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = (C_INCLUDE_S2MM == 1), ADDR_TYPE = MEMORY
 BUS_INTERFACE S_AXIS_S2MM = axi_dma_0_S_AXIS_S2MM, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_INCLUDE_S2MM == 1)
 PORT s_axi_lite_aclk = processing_system7_0_FCLK_CLK0, DIR = I, SIGIS = CLK, BUS = S_AXI_LITE, DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = processing_system7_0_FCLK_CLK0, RESOLVED_BUS = S_AXI_LITE
 PORT m_axi_sg_aclk = processing_system7_0_FCLK_CLK0, DIR = I, SIGIS = CLK, BUS = M_AXI_SG, DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = processing_system7_0_FCLK_CLK0, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_mm2s_aclk = processing_system7_0_FCLK_CLK0, DIR = I, SIGIS = CLK, BUS = M_AXI_MM2S:M_AXIS_MM2S_CNTRL, DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = processing_system7_0_FCLK_CLK0, RESOLVED_BUS = M_AXI_MM2S
 PORT m_axi_s2mm_aclk = processing_system7_0_FCLK_CLK0, DIR = I, SIGIS = CLK, BUS = M_AXI_S2MM:S_AXIS_S2MM_STS, DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = processing_system7_0_FCLK_CLK0, RESOLVED_BUS = M_AXI_S2MM
 PORT axi_resetn = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI_LITE:M_AXI_SG:M_AXI_MM2S:M_AXI_S2MM:S_AXIS_S2MM_STS:M_AXIS_MM2S_CNTRL:M_AXIS_MM2S:S_AXIS_S2MM, DEFAULT = ARESETN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_LITE:M_AXI_SG:M_AXI_MM2S:M_AXI_S2MM:S_AXIS_S2MM
 PORT s_axi_lite_awvalid = AWVALID, DIR = I, BUS = S_AXI_LITE, DEFAULT = AWVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_LITE
 PORT s_axi_lite_awready = AWREADY, DIR = O, BUS = S_AXI_LITE, DEFAULT = AWREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_LITE
 PORT s_axi_lite_awaddr = AWADDR, DIR = I, VEC = [C_S_AXI_LITE_ADDR_WIDTH-1:0], BUS = S_AXI_LITE, ENDIAN = LITTLE, DEFAULT = AWADDR, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_LITE
 PORT s_axi_lite_wvalid = WVALID, DIR = I, BUS = S_AXI_LITE, DEFAULT = WVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_LITE
 PORT s_axi_lite_wready = WREADY, DIR = O, BUS = S_AXI_LITE, DEFAULT = WREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_LITE
 PORT s_axi_lite_wdata = WDATA, DIR = I, VEC = [C_S_AXI_LITE_DATA_WIDTH-1:0], BUS = S_AXI_LITE, ENDIAN = LITTLE, DEFAULT = WDATA, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_LITE
 PORT s_axi_lite_bresp = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_LITE, ENDIAN = LITTLE, DEFAULT = BRESP, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_LITE
 PORT s_axi_lite_bvalid = BVALID, DIR = O, BUS = S_AXI_LITE, DEFAULT = BVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_LITE
 PORT s_axi_lite_bready = BREADY, DIR = I, BUS = S_AXI_LITE, DEFAULT = BREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_LITE
 PORT s_axi_lite_arvalid = ARVALID, DIR = I, BUS = S_AXI_LITE, DEFAULT = ARVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_LITE
 PORT s_axi_lite_arready = ARREADY, DIR = O, BUS = S_AXI_LITE, DEFAULT = ARREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_LITE
 PORT s_axi_lite_araddr = ARADDR, DIR = I, VEC = [C_S_AXI_LITE_ADDR_WIDTH-1:0], BUS = S_AXI_LITE, ENDIAN = LITTLE, DEFAULT = ARADDR, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_LITE
 PORT s_axi_lite_rvalid = RVALID, DIR = O, BUS = S_AXI_LITE, DEFAULT = RVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_LITE
 PORT s_axi_lite_rready = RREADY, DIR = I, BUS = S_AXI_LITE, DEFAULT = RREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_LITE
 PORT s_axi_lite_rdata = RDATA, DIR = O, VEC = [C_S_AXI_LITE_DATA_WIDTH-1:0], BUS = S_AXI_LITE, ENDIAN = LITTLE, DEFAULT = RDATA, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_LITE
 PORT s_axi_lite_rresp = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_LITE, ENDIAN = LITTLE, DEFAULT = RRESP, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXI_LITE
 PORT m_axi_sg_awaddr = AWADDR, DIR = O, VEC = [C_M_AXI_SG_ADDR_WIDTH-1:0], BUS = M_AXI_SG, ENDIAN = LITTLE, DEFAULT = AWADDR, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_awlen = AWLEN, DIR = O, VEC = [7:0], BUS = M_AXI_SG, ENDIAN = LITTLE, DEFAULT = AWLEN, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_awsize = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_SG, ENDIAN = LITTLE, DEFAULT = AWSIZE, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_awburst = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI_SG, ENDIAN = LITTLE, DEFAULT = AWBURST, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_awprot = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI_SG, ENDIAN = LITTLE, DEFAULT = AWPROT, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_awcache = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_SG, ENDIAN = LITTLE, DEFAULT = AWCACHE, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_awuser = AWUSER, DIR = O, VEC = [3:0], BUS = M_AXI_SG, ENDIAN = LITTLE, DEFAULT = AWUSER, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_awvalid = AWVALID, DIR = O, BUS = M_AXI_SG, DEFAULT = AWVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_awready = AWREADY, DIR = I, BUS = M_AXI_SG, DEFAULT = AWREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_wdata = WDATA, DIR = O, VEC = [C_M_AXI_SG_DATA_WIDTH-1:0], BUS = M_AXI_SG, ENDIAN = LITTLE, DEFAULT = WDATA, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_wstrb = WSTRB, DIR = O, VEC = [(C_M_AXI_SG_DATA_WIDTH/8)-1:0], BUS = M_AXI_SG, ENDIAN = LITTLE, DEFAULT = WSTRB, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_wlast = WLAST, DIR = O, BUS = M_AXI_SG, DEFAULT = WLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_wvalid = WVALID, DIR = O, BUS = M_AXI_SG, DEFAULT = WVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_wready = WREADY, DIR = I, BUS = M_AXI_SG, DEFAULT = WREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_bresp = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI_SG, ENDIAN = LITTLE, DEFAULT = BRESP, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_bvalid = BVALID, DIR = I, BUS = M_AXI_SG, DEFAULT = BVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_bready = BREADY, DIR = O, BUS = M_AXI_SG, DEFAULT = BREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_araddr = ARADDR, DIR = O, VEC = [C_M_AXI_SG_ADDR_WIDTH-1:0], BUS = M_AXI_SG, ENDIAN = LITTLE, DEFAULT = ARADDR, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_arlen = ARLEN, DIR = O, VEC = [7:0], BUS = M_AXI_SG, ENDIAN = LITTLE, DEFAULT = ARLEN, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_arsize = ARSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_SG, ENDIAN = LITTLE, DEFAULT = ARSIZE, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_arburst = ARBURST, DIR = O, VEC = [1:0], BUS = M_AXI_SG, ENDIAN = LITTLE, DEFAULT = ARBURST, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_arprot = ARPROT, DIR = O, VEC = [2:0], BUS = M_AXI_SG, ENDIAN = LITTLE, DEFAULT = ARPROT, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_arcache = ARCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_SG, ENDIAN = LITTLE, DEFAULT = ARCACHE, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_aruser = ARUSER, DIR = O, VEC = [3:0], BUS = M_AXI_SG, ENDIAN = LITTLE, DEFAULT = ARUSER, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_arvalid = ARVALID, DIR = O, BUS = M_AXI_SG, DEFAULT = ARVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_arready = ARREADY, DIR = I, BUS = M_AXI_SG, DEFAULT = ARREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_rdata = RDATA, DIR = I, VEC = [C_M_AXI_SG_DATA_WIDTH-1:0], BUS = M_AXI_SG, ENDIAN = LITTLE, DEFAULT = RDATA, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_rresp = RRESP, DIR = I, VEC = [1:0], BUS = M_AXI_SG, ENDIAN = LITTLE, DEFAULT = RRESP, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_rlast = RLAST, DIR = I, BUS = M_AXI_SG, DEFAULT = RLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_rvalid = RVALID, DIR = I, BUS = M_AXI_SG, DEFAULT = RVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_sg_rready = RREADY, DIR = O, BUS = M_AXI_SG, DEFAULT = RREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_SG
 PORT m_axi_mm2s_araddr = ARADDR, DIR = O, VEC = [C_M_AXI_MM2S_ADDR_WIDTH-1:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE, DEFAULT = ARADDR, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_MM2S
 PORT m_axi_mm2s_arlen = ARLEN, DIR = O, VEC = [7:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE, DEFAULT = ARLEN, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_MM2S
 PORT m_axi_mm2s_arsize = ARSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE, DEFAULT = ARSIZE, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_MM2S
 PORT m_axi_mm2s_arburst = ARBURST, DIR = O, VEC = [1:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE, DEFAULT = ARBURST, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_MM2S
 PORT m_axi_mm2s_arprot = ARPROT, DIR = O, VEC = [2:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE, DEFAULT = ARPROT, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_MM2S
 PORT m_axi_mm2s_arcache = ARCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE, DEFAULT = ARCACHE, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_MM2S
 PORT m_axi_mm2s_aruser = ARUSER, DIR = O, VEC = [3:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE, DEFAULT = ARUSER, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_MM2S
 PORT m_axi_mm2s_arvalid = ARVALID, DIR = O, BUS = M_AXI_MM2S, DEFAULT = ARVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_MM2S
 PORT m_axi_mm2s_arready = ARREADY, DIR = I, BUS = M_AXI_MM2S, DEFAULT = ARREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_MM2S
 PORT m_axi_mm2s_rdata = RDATA, DIR = I, VEC = [C_M_AXI_MM2S_DATA_WIDTH-1:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE, DEFAULT = RDATA, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_MM2S
 PORT m_axi_mm2s_rresp = RRESP, DIR = I, VEC = [1:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE, DEFAULT = RRESP, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_MM2S
 PORT m_axi_mm2s_rlast = RLAST, DIR = I, BUS = M_AXI_MM2S, DEFAULT = RLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_MM2S
 PORT m_axi_mm2s_rvalid = RVALID, DIR = I, BUS = M_AXI_MM2S, DEFAULT = RVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_MM2S
 PORT m_axi_mm2s_rready = RREADY, DIR = O, BUS = M_AXI_MM2S, DEFAULT = RREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_MM2S
 PORT mm2s_prmry_reset_out_n = RESET_OUT_N, DIR = O, DEFAULT = RESET_OUT_N, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT m_axis_mm2s_tdata = TDATA, DIR = O, VEC = [C_M_AXIS_MM2S_TDATA_WIDTH-1:0], BUS = M_AXIS_MM2S, ENDIAN = LITTLE, DEFAULT = TDATA, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT m_axis_mm2s_tkeep = TKEEP, DIR = O, VEC = [(C_M_AXIS_MM2S_TDATA_WIDTH/8)-1:0], BUS = M_AXIS_MM2S, ENDIAN = LITTLE, DEFAULT = TKEEP, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT m_axis_mm2s_tvalid = TVALID, DIR = O, BUS = M_AXIS_MM2S, DEFAULT = TVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT m_axis_mm2s_tready = TREADY, DIR = I, BUS = M_AXIS_MM2S, DEFAULT = TREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT m_axis_mm2s_tlast = TLAST, DIR = O, BUS = M_AXIS_MM2S, DEFAULT = TLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT m_axis_mm2s_tuser = TUSER, DIR = O, VEC = [3:0], BUS = M_AXIS_MM2S, ENDIAN = LITTLE, DEFAULT = TUSER, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT m_axis_mm2s_tid = TID, DIR = O, VEC = [4:0], BUS = M_AXIS_MM2S, ENDIAN = LITTLE, DEFAULT = TID, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT m_axis_mm2s_tdest = TDEST, DIR = O, VEC = [4:0], BUS = M_AXIS_MM2S, ENDIAN = LITTLE, DEFAULT = TDEST, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT mm2s_cntrl_reset_out_n = RESET_OUT_N, DIR = O, DEFAULT = RESET_OUT_N, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT m_axis_mm2s_cntrl_tdata = TDATA, DIR = O, VEC = [C_M_AXIS_MM2S_CNTRL_TDATA_WIDTH-1:0], BUS = M_AXIS_MM2S_CNTRL, ENDIAN = LITTLE, DEFAULT = TDATA, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT m_axis_mm2s_cntrl_tkeep = TKEEP, DIR = O, VEC = [(C_M_AXIS_MM2S_CNTRL_TDATA_WIDTH/8)-1:0], BUS = M_AXIS_MM2S_CNTRL, ENDIAN = LITTLE, DEFAULT = TKEEP, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT m_axis_mm2s_cntrl_tvalid = TVALID, DIR = O, BUS = M_AXIS_MM2S_CNTRL, DEFAULT = TVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT m_axis_mm2s_cntrl_tready = TREADY, DIR = I, BUS = M_AXIS_MM2S_CNTRL, DEFAULT = TREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT m_axis_mm2s_cntrl_tlast = TLAST, DIR = O, BUS = M_AXIS_MM2S_CNTRL, DEFAULT = TLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT m_axi_s2mm_awaddr = AWADDR, DIR = O, VEC = [C_M_AXI_S2MM_ADDR_WIDTH-1:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE, DEFAULT = AWADDR, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_S2MM
 PORT m_axi_s2mm_awlen = AWLEN, DIR = O, VEC = [7:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE, DEFAULT = AWLEN, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_S2MM
 PORT m_axi_s2mm_awsize = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE, DEFAULT = AWSIZE, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_S2MM
 PORT m_axi_s2mm_awburst = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE, DEFAULT = AWBURST, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_S2MM
 PORT m_axi_s2mm_awprot = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE, DEFAULT = AWPROT, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_S2MM
 PORT m_axi_s2mm_awcache = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE, DEFAULT = AWCACHE, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_S2MM
 PORT m_axi_s2mm_awuser = AWUSER, DIR = O, VEC = [3:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE, DEFAULT = AWUSER, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_S2MM
 PORT m_axi_s2mm_awvalid = AWVALID, DIR = O, BUS = M_AXI_S2MM, DEFAULT = AWVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_S2MM
 PORT m_axi_s2mm_awready = AWREADY, DIR = I, BUS = M_AXI_S2MM, DEFAULT = AWREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_S2MM
 PORT m_axi_s2mm_wdata = WDATA, DIR = O, VEC = [C_M_AXI_S2MM_DATA_WIDTH-1:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE, DEFAULT = WDATA, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_S2MM
 PORT m_axi_s2mm_wstrb = WSTRB, DIR = O, VEC = [(C_M_AXI_S2MM_DATA_WIDTH/8)-1:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE, DEFAULT = WSTRB, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_S2MM
 PORT m_axi_s2mm_wlast = WLAST, DIR = O, BUS = M_AXI_S2MM, DEFAULT = WLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_S2MM
 PORT m_axi_s2mm_wvalid = WVALID, DIR = O, BUS = M_AXI_S2MM, DEFAULT = WVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_S2MM
 PORT m_axi_s2mm_wready = WREADY, DIR = I, BUS = M_AXI_S2MM, DEFAULT = WREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_S2MM
 PORT m_axi_s2mm_bresp = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE, DEFAULT = BRESP, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_S2MM
 PORT m_axi_s2mm_bvalid = BVALID, DIR = I, BUS = M_AXI_S2MM, DEFAULT = BVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_S2MM
 PORT m_axi_s2mm_bready = BREADY, DIR = O, BUS = M_AXI_S2MM, DEFAULT = BREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = M_AXI_S2MM
 PORT s2mm_prmry_reset_out_n = axi_dma_0_s2mm_prmry_reset_out_n_to_chipscope_ila_0, DIR = O, DEFAULT = RESET_OUT_N, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = axi_dma_0_s2mm_prmry_reset_out_n_to_chipscope_ila_0
 PORT s_axis_s2mm_tdata = TDATA, DIR = I, VEC = [C_S_AXIS_S2MM_TDATA_WIDTH-1:0], BUS = S_AXIS_S2MM, ENDIAN = LITTLE, DEFAULT = TDATA, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXIS_S2MM
 PORT s_axis_s2mm_tkeep = TKEEP, DIR = I, VEC = [(C_S_AXIS_S2MM_TDATA_WIDTH/8)-1:0], BUS = S_AXIS_S2MM, ENDIAN = LITTLE, INITIALVAL = VCC, DEFAULT = TKEEP, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXIS_S2MM
 PORT s_axis_s2mm_tvalid = TVALID, DIR = I, BUS = S_AXIS_S2MM, DEFAULT = TVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXIS_S2MM
 PORT s_axis_s2mm_tready = TREADY, DIR = O, BUS = S_AXIS_S2MM, DEFAULT = TREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXIS_S2MM
 PORT s_axis_s2mm_tlast = TLAST, DIR = I, BUS = S_AXIS_S2MM, DEFAULT = TLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXIS_S2MM
 PORT s_axis_s2mm_tuser = TUSER, DIR = I, VEC = [3:0], BUS = S_AXIS_S2MM, ENDIAN = LITTLE, DEFAULT = TUSER, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXIS_S2MM
 PORT s_axis_s2mm_tid = TID, DIR = I, VEC = [4:0], BUS = S_AXIS_S2MM, ENDIAN = LITTLE, DEFAULT = TID, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXIS_S2MM
 PORT s_axis_s2mm_tdest = TDEST, DIR = I, VEC = [4:0], BUS = S_AXIS_S2MM, ENDIAN = LITTLE, DEFAULT = TDEST, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = S_AXIS_S2MM
 PORT s2mm_sts_reset_out_n = RESET_OUT_N, DIR = O, DEFAULT = RESET_OUT_N, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT s_axis_s2mm_sts_tdata = TDATA, DIR = I, VEC = [C_S_AXIS_S2MM_STS_TDATA_WIDTH-1:0], BUS = S_AXIS_S2MM_STS, ENDIAN = LITTLE, DEFAULT = TDATA, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT s_axis_s2mm_sts_tkeep = TKEEP, DIR = I, VEC = [(C_S_AXIS_S2MM_STS_TDATA_WIDTH/8)-1:0], BUS = S_AXIS_S2MM_STS, ENDIAN = LITTLE, INITIALVAL = VCC, DEFAULT = TKEEP, ASSIGNMENT = OPTIONAL, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT s_axis_s2mm_sts_tvalid = TVALID, DIR = I, BUS = S_AXIS_S2MM_STS, DEFAULT = TVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT s_axis_s2mm_sts_tready = TREADY, DIR = O, BUS = S_AXIS_S2MM_STS, DEFAULT = TREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT s_axis_s2mm_sts_tlast = TLAST, DIR = I, BUS = S_AXIS_S2MM_STS, DEFAULT = TLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT mm2s_introut = axi_dma_0_mm2s_introut, DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = axi_dma_0_mm2s_introut
 PORT s2mm_introut = axi_dma_0_s2mm_introut, DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = axi_dma_0_s2mm_introut
END

BEGIN axi_interconnect
 PARAMETER INSTANCE = axi_interconnect_2
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_MASTERS = none, DT = string, TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Masters that can talk to this slave, LONG_DESC = The '&' separated list of master interfaces that can access this slave, GUI_PERMIT = , BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = none, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_IS_ACLK_ASYNC = 0, DT = integer, RANGE = (0, 1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Is ACLK Asynchronous to Interconnect_ACLK, LONG_DESC = Is ACLK asynchronous with respect to the interconnect's ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_ACLK_RATIO = 1, DT = integer, TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = UPDATE, DESC = ACLK Frequency Ratio, LONG_DESC = In relation to C_INTERCONNECT_ACLK_RATIO on the interconnect, indicates the ratio of the ACLK frequency of this bus interface to the frequency of Interconnect_ACLK. Please refer to the online help on how this parameter is computed, GUI_PERMIT = , BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 1, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_SECURE = 0, DT = integer, RANGE = (0,1), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Require TrustZone Secure on all accesses, LONG_DESC = All accesses to slave required to be secure, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_AW_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AW channel, LONG_DESC = Insert register slice on AW channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_AR_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on AR channel, LONG_DESC = Insert register slice on AR channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_W_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on W channel, LONG_DESC = Insert register slice on W channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_R_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on R channel, LONG_DESC = Insert register slice on R channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_B_REGISTER = 0, DT = integer, RANGE = (0:8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Use register slice on B channel, LONG_DESC = Insert register slice on B channel, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_WRITE_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Write Data FIFO Depth, LONG_DESC = Depth of bus interface write data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_READ_FIFO_DEPTH = 0, DT = integer, RANGE = (0, 32, 512), VALUES = ( 0 = 0 (None), 32 = 32 (SRL), 512 = 512 (BRAM)), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL, DESC = Read Data FIFO Depth, LONG_DESC = Depth of bus interface read data FIFO, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 0, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_WRITE_ACCEPTANCE = 1, DT = integer, RANGE = (1, 2, 4, 8, 16, 32), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Write Transaction Acceptance Limit, LONG_DESC = Maximum number of active write transactions that the bus interface can accept. This parameter is ignored when the IP is connected to an interconnect in SASD mode., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 1, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_INTERCONNECT_S_AXI_CTRL_READ_ACCEPTANCE = 1, DT = integer, RANGE = (1, 2, 4, 8, 16, 32), TYPE = NON_MPD, ASSOCIATION = SLAVE, ASSIGNMENT = OPTIONAL_UPDATE, DESC = Read Transaction Acceptance Limit, LONG_DESC = Maximum number of active read transactions that the bus interface can accept. This parameter is ignored when the IP is connected to an interconnect in SASD mode., GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, BUS = S_AXI_CTRL, AXI_VER = 1.01.a, BUS_TYPE = SLAVE, MPD_VALUE = 1, ISVALID = (C_USE_CTRL_PORT != 0), RESOLVED_BUS = 
 PARAMETER C_S_AXI_CTRL_ADDED_AXI_PARAMS = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_S_AXI_CTRL_AXI_VER = 1.01.a, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
 PARAMETER C_FAMILY = rtl, DT = STRING, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, GUI_PERMIT = , MPD_VALUE = rtl
 PARAMETER C_BASEFAMILY = rtl, DT = STRING, ASSIGNMENT = UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_basefamily, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = rtl
 PARAMETER C_NUM_SLAVE_SLOTS = 1, DT = INTEGER, RANGE = (1 : 16), ASSIGNMENT = UPDATE, AFFECTS_PORTS_VEC = S_AXI_ARESET_OUT_N:S_AXI_ACLK:S_AXI_AWID:S_AXI_AWADDR:S_AXI_AWLEN:S_AXI_AWSIZE:S_AXI_AWBURST:S_AXI_AWLOCK:S_AXI_AWCACHE:S_AXI_AWPROT:S_AXI_AWQOS:S_AXI_AWUSER:S_AXI_AWVALID:S_AXI_AWREADY:S_AXI_WID:S_AXI_WDATA:S_AXI_WSTRB:S_AXI_WLAST:S_AXI_WUSER:S_AXI_WVALID:S_AXI_WREADY:S_AXI_BID:S_AXI_BRESP:S_AXI_BUSER:S_AXI_BVALID:S_AXI_BREADY:S_AXI_ARID:S_AXI_ARADDR:S_AXI_ARLEN:S_AXI_ARSIZE:S_AXI_ARBURST:S_AXI_ARLOCK:S_AXI_ARCACHE:S_AXI_ARPROT:S_AXI_ARQOS:S_AXI_ARUSER:S_AXI_ARVALID:S_AXI_ARREADY:S_AXI_RID:S_AXI_RDATA:S_AXI_RRESP:S_AXI_RLAST:S_AXI_RUSER:S_AXI_RVALID:S_AXI_RREADY, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_NUM_MASTER_SLOTS = 1, DT = INTEGER, RANGE = (1 : 16), ASSIGNMENT = UPDATE, AFFECTS_PORTS_VEC = M_AXI_ARESET_OUT_N:M_AXI_ACLK:M_AXI_AWID:M_AXI_AWADDR:M_AXI_AWLEN:M_AXI_AWSIZE:M_AXI_AWBURST:M_AXI_AWLOCK:M_AXI_AWCACHE:M_AXI_AWPROT:M_AXI_AWREGION:M_AXI_AWQOS:M_AXI_AWUSER:M_AXI_AWVALID:M_AXI_AWREADY:M_AXI_WID:M_AXI_WDATA:M_AXI_WSTRB:M_AXI_WLAST:M_AXI_WUSER:M_AXI_WVALID:M_AXI_WREADY:M_AXI_BID:M_AXI_BRESP:M_AXI_BUSER:M_AXI_BVALID:M_AXI_BREADY:M_AXI_ARID:M_AXI_ARADDR:M_AXI_ARLEN:M_AXI_ARSIZE:M_AXI_ARBURST:M_AXI_ARLOCK:M_AXI_ARCACHE:M_AXI_ARPROT:M_AXI_ARREGION:M_AXI_ARQOS:M_AXI_ARUSER:M_AXI_ARVALID:M_AXI_ARREADY:M_AXI_RID:M_AXI_RDATA:M_AXI_RRESP:M_AXI_RLAST:M_AXI_RUSER:M_AXI_RVALID:M_AXI_RREADY, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_AXI_ID_WIDTH = 1, DT = INTEGER, RANGE = (1 : 16), ASSIGNMENT = UPDATE, AFFECTS_PORTS_VEC = S_AXI_AWID:S_AXI_WID:S_AXI_BID:S_AXI_ARID:S_AXI_RID:M_AXI_AWID:M_AXI_WID:M_AXI_BID:M_AXI_ARID:M_AXI_RID:DEBUG_SR_SC_ARADDRCONTROL:DEBUG_SR_SC_AWADDRCONTROL:DEBUG_SR_SC_BRESP:DEBUG_SR_SC_RDATACONTROL:DEBUG_SC_SF_ARADDRCONTROL:DEBUG_SC_SF_AWADDRCONTROL:DEBUG_SC_SF_BRESP:DEBUG_SC_SF_RDATACONTROL:DEBUG_SF_CB_ARADDRCONTROL:DEBUG_SF_CB_AWADDRCONTROL:DEBUG_SF_CB_BRESP:DEBUG_SF_CB_RDATACONTROL:DEBUG_CB_MF_ARADDRCONTROL:DEBUG_CB_MF_AWADDRCONTROL:DEBUG_CB_MF_BRESP:DEBUG_CB_MF_RDATACONTROL:DEBUG_MF_MC_ARADDRCONTROL:DEBUG_MF_MC_AWADDRCONTROL:DEBUG_MF_MC_BRESP:DEBUG_MF_MC_RDATACONTROL:DEBUG_MC_MP_ARADDRCONTROL:DEBUG_MC_MP_AWADDRCONTROL:DEBUG_MC_MP_BRESP:DEBUG_MC_MP_RDATACONTROL:DEBUG_MP_MR_ARADDRCONTROL:DEBUG_MP_MR_AWADDRCONTROL:DEBUG_MP_MR_BRESP:DEBUG_MP_MR_RDATACONTROL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_AXI_ADDR_WIDTH = 32, DT = INTEGER, RANGE = (32), ASSIGNMENT = UPDATE, AFFECTS_PORTS_VEC = S_AXI_AWADDR:S_AXI_ARADDR:M_AXI_AWADDR:M_AXI_ARADDR:DEBUG_SR_SC_ARADDR:DEBUG_SR_SC_AWADDR:DEBUG_SC_SF_ARADDR:DEBUG_SC_SF_AWADDR:DEBUG_SF_CB_ARADDR:DEBUG_SF_CB_AWADDR:DEBUG_CB_MF_ARADDR:DEBUG_CB_MF_AWADDR:DEBUG_MF_MC_ARADDR:DEBUG_MF_MC_AWADDR:DEBUG_MC_MP_ARADDR:DEBUG_MC_MP_AWADDR:DEBUG_MP_MR_ARADDR:DEBUG_MP_MR_AWADDR, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32
 PARAMETER C_AXI_DATA_MAX_WIDTH = 32, DT = INTEGER, ASSIGNMENT = UPDATE, RANGE = (32, 64, 128, 256, 512, 1024), AFFECTS_PORTS_VEC = S_AXI_WDATA:S_AXI_WSTRB:S_AXI_RDATA:M_AXI_WDATA:M_AXI_WSTRB:M_AXI_RDATA:DEBUG_SR_SC_RDATA:DEBUG_SR_SC_WDATA:DEBUG_SR_SC_WDATACONTROL:DEBUG_SC_SF_RDATA:DEBUG_SC_SF_WDATA:DEBUG_SC_SF_WDATACONTROL:DEBUG_SF_CB_RDATA:DEBUG_SF_CB_WDATA:DEBUG_SF_CB_WDATACONTROL:DEBUG_CB_MF_RDATA:DEBUG_CB_MF_WDATA:DEBUG_CB_MF_WDATACONTROL:DEBUG_MF_MC_RDATA:DEBUG_MF_MC_WDATA:DEBUG_MF_MC_WDATACONTROL:DEBUG_MC_MP_RDATA:DEBUG_MC_MP_WDATA:DEBUG_MC_MP_WDATACONTROL:DEBUG_MP_MR_RDATA:DEBUG_MP_MR_WDATA:DEBUG_MP_MR_WDATACONTROL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32
 PARAMETER C_S_AXI_DATA_WIDTH = 0x00000020000000200000002000000020000000200000002000000020000000200000002000000020000000200000002000000020000000200000002000000020, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000020, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000020000000200000002000000020000000200000002000000020000000200000002000000020000000200000002000000020000000200000002000000020
 PARAMETER C_M_AXI_DATA_WIDTH = 0x00000020000000200000002000000020000000200000002000000020000000200000002000000020000000200000002000000020000000200000002000000020, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000020, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000020000000200000002000000020000000200000002000000020000000200000002000000020000000200000002000000020000000200000002000000020
 PARAMETER C_INTERCONNECT_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32, 64, 128, 256, 512, 1024), ASSIGNMENT = OPTIONAL_UPDATE, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32
 PARAMETER C_S_AXI_PROTOCOL = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_M_AXI_PROTOCOL = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_M_AXI_BASE_ADDR = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, STRIDE = 256, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16384, MPD_VALUE = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
 PARAMETER C_M_AXI_HIGH_ADDR = 0xx0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_S_AXI_BASE_ID = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_S_AXI_THREAD_ID_WIDTH = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_S_AXI_IS_INTERCONNECT = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 0, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b0000000000000000
 PARAMETER C_S_AXI_ACLK_RATIO = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000001, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001
 PARAMETER C_S_AXI_IS_ACLK_ASYNC = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 0, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b0000000000000000
 PARAMETER C_M_AXI_ACLK_RATIO = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000001, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001
 PARAMETER C_M_AXI_IS_ACLK_ASYNC = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 0, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b0000000000000000
 PARAMETER C_INTERCONNECT_ACLK_RATIO = 1, DT = INTEGER, RANGE = (1 : 2147483647), ASSIGNMENT = UPDATE, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_S_AXI_SUPPORTS_WRITE = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 1, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b1111111111111111
 PARAMETER C_S_AXI_SUPPORTS_READ = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 1, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b1111111111111111
 PARAMETER C_M_AXI_SUPPORTS_WRITE = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 1, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b1111111111111111
 PARAMETER C_M_AXI_SUPPORTS_READ = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 1, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b1111111111111111
 PARAMETER C_AXI_SUPPORTS_USER_SIGNALS = 0, DT = INTEGER, RANGE = (1, 0), ASSIGNMENT = OPTIONAL_UPDATE, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_AXI_AWUSER_WIDTH = 1, DT = INTEGER, RANGE = (1 : 256), ASSIGNMENT = OPTIONAL_UPDATE, AFFECTS_PORTS_VEC = S_AXI_AWUSER:M_AXI_AWUSER, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_AXI_ARUSER_WIDTH = 1, DT = INTEGER, RANGE = (1 : 256), ASSIGNMENT = OPTIONAL_UPDATE, AFFECTS_PORTS_VEC = S_AXI_ARUSER:M_AXI_ARUSER, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_AXI_WUSER_WIDTH = 1, DT = INTEGER, RANGE = (1 : 256), ASSIGNMENT = OPTIONAL_UPDATE, AFFECTS_PORTS_VEC = S_AXI_WUSER:M_AXI_WUSER, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_AXI_RUSER_WIDTH = 1, DT = INTEGER, RANGE = (1 : 256), ASSIGNMENT = OPTIONAL_UPDATE, AFFECTS_PORTS_VEC = S_AXI_RUSER:M_AXI_RUSER, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_AXI_BUSER_WIDTH = 1, DT = INTEGER, RANGE = (1 : 256), ASSIGNMENT = OPTIONAL_UPDATE, AFFECTS_PORTS_VEC = S_AXI_BUSER:M_AXI_BUSER, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_AXI_CONNECTIVITY = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = ffffffff, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
 PARAMETER C_S_AXI_SINGLE_THREAD = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 0, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b0000000000000000
 PARAMETER C_M_AXI_SUPPORTS_REORDERING = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = CONSTANT, DEF_STRIDE_VAL = 1, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b1111111111111111
 PARAMETER C_S_AXI_SUPPORTS_NARROW_BURST = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 1, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b1111111111111111
 PARAMETER C_M_AXI_SUPPORTS_NARROW_BURST = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 1, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b1111111111111111
 PARAMETER C_S_AXI_WRITE_ACCEPTANCE = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000001, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001
 PARAMETER C_S_AXI_READ_ACCEPTANCE = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000001, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001
 PARAMETER C_M_AXI_WRITE_ISSUING = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000001, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001
 PARAMETER C_M_AXI_READ_ISSUING = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000001, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001
 PARAMETER C_S_AXI_ARB_PRIORITY = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_M_AXI_SECURE = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 0, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b0000000000000000
 PARAMETER C_S_AXI_WRITE_FIFO_DEPTH = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_S_AXI_WRITE_FIFO_TYPE = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = CONSTANT, DEF_STRIDE_VAL = 1, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b1111111111111111
 PARAMETER C_S_AXI_WRITE_FIFO_DELAY = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 0, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b0000000000000000
 PARAMETER C_S_AXI_READ_FIFO_DEPTH = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_S_AXI_READ_FIFO_TYPE = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = CONSTANT, DEF_STRIDE_VAL = 1, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b1111111111111111
 PARAMETER C_S_AXI_READ_FIFO_DELAY = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 0, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b0000000000000000
 PARAMETER C_M_AXI_WRITE_FIFO_DEPTH = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_M_AXI_WRITE_FIFO_TYPE = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = CONSTANT, DEF_STRIDE_VAL = 1, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b1111111111111111
 PARAMETER C_M_AXI_WRITE_FIFO_DELAY = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 0, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b0000000000000000
 PARAMETER C_M_AXI_READ_FIFO_DEPTH = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_M_AXI_READ_FIFO_TYPE = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = CONSTANT, DEF_STRIDE_VAL = 1, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b1111111111111111
 PARAMETER C_M_AXI_READ_FIFO_DELAY = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 0, STRIDE = 1, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 16, MPD_VALUE = 0b0000000000000000
 PARAMETER C_S_AXI_AW_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_S_AXI_AR_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_S_AXI_W_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_S_AXI_R_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_S_AXI_B_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_M_AXI_AW_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_M_AXI_AR_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_M_AXI_W_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_M_AXI_R_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_M_AXI_B_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, DEF_STRIDE_VAL = 00000000, STRIDE = 8, TYPE = HDL, GUI_PERMIT = , BITWIDTH = 512, MPD_VALUE = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 PARAMETER C_INTERCONNECT_R_REGISTER = 0, DT = INTEGER, RANGE = (0, 1, 7, 8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_INTERCONNECT_CONNECTIVITY_MODE = 1, DT = INTEGER, RANGE = (0,1), VALUES = (0= Shared Access (Area optimized) , 1= Crossbar (Performance optimized) ), DESC = Interconnect Architecture, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1, MHS_VALUE = 1
 PARAMETER C_USE_CTRL_PORT = 0, DT = INTEGER, RANGE = (1, 0), ASSIGNMENT = CONSTANT, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_S_AXI_CTRL_PROTOCOL:C_S_AXI_CTRL_ADDR_WIDTH:C_S_AXI_CTRL_DATA_WIDTH:C_BASEADDR:C_HIGHADDR, MPD_VALUE = 0
 PARAMETER C_USE_INTERRUPT = 1, DT = INTEGER, RANGE = (1, 0), ASSIGNMENT = CONSTANT, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_RANGE_CHECK = 2, DT = INTEGER, VALUES = (2 = AUTOMATIC, 0 = OFF, 1 = ON), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_range_check, DESC = Check for transaction errors (DECERR), TYPE = HDL, GUI_PERMIT = , MPD_VALUE = 2
 PARAMETER C_S_AXI_CTRL_PROTOCOL = AXI4LITE, DT = STRING, BUS = S_AXI_CTRL, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_CTRL_PORT != 0), GUI_PERMIT = , MPD_VALUE = AXI4LITE, RESOLVED_BUS = 
 PARAMETER C_S_AXI_CTRL_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_CTRL, RANGE = (32), ASSIGNMENT = CONSTANT, ISVALID = (C_USE_CTRL_PORT != 0), AFFECTS_PORTS_VEC = S_AXI_CTRL_AWADDR:S_AXI_CTRL_ARADDR, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32, RESOLVED_BUS = 
 PARAMETER C_S_AXI_CTRL_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI_CTRL, RANGE = (32), ASSIGNMENT = CONSTANT, ISVALID = (C_USE_CTRL_PORT != 0), AFFECTS_PORTS_VEC = S_AXI_CTRL_WDATA:S_AXI_CTRL_RDATA, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32, RESOLVED_BUS = 
 PARAMETER C_BASEADDR = 0xFFFFFFFF, BUS = S_AXI_CTRL, ADDRESS = BASE, PAIR = C_HIGHADDR, DT = STD_LOGIC_VECTOR, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, ISVALID = (C_USE_CTRL_PORT != 0), ADDR_TYPE = REGISTER, BITWIDTH = 32, DEF_STRIDE_VAL = , STRIDE = 0, GUI_PERMIT = , MPD_VALUE = 0xFFFFFFFF, RESOLVED_BUS = 
 PARAMETER C_HIGHADDR = 0x00000000, BUS = S_AXI_CTRL, ADDRESS = HIGH, PAIR = C_BASEADDR, DT = STD_LOGIC_VECTOR, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, ISVALID = (C_USE_CTRL_PORT != 0), ADDR_TYPE = REGISTER, BITWIDTH = 32, DEF_STRIDE_VAL = , STRIDE = 0, GUI_PERMIT = , MPD_VALUE = 0x00000000, RESOLVED_BUS = 
 PARAMETER C_DEBUG = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (0:1), TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_S_AXI_DEBUG_SLOT:C_M_AXI_DEBUG_SLOT:C_MAX_DEBUG_THREADS, MPD_VALUE = 0
 PARAMETER C_S_AXI_DEBUG_SLOT = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL, ISVALID = (C_DEBUG != 0), RANGE = (0:15), TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_M_AXI_DEBUG_SLOT = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL, ISVALID = (C_DEBUG != 0), RANGE = (0:15), TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_MAX_DEBUG_THREADS = 1, DT = INTEGER, ASSIGNMENT = OPTIONAL, ISVALID = (C_DEBUG != 0), RANGE = (1:256), AFFECTS_PORTS_VEC = DEBUG_AW_TRANS_QUAL:DEBUG_AW_ACCEPT_CNT:DEBUG_AW_ACTIVE_TARGET:DEBUG_AW_ACTIVE_REGION:DEBUG_AR_TRANS_QUAL:DEBUG_AR_ACCEPT_CNT:DEBUG_AR_ACTIVE_TARGET:DEBUG_AR_ACTIVE_REGION:DEBUG_B_TRANS_SEQ:DEBUG_R_BEAT_CNT:DEBUG_R_TRANS_SEQ, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER HW_VER = 1.06.a
 PORT INTERCONNECT_ACLK = processing_system7_0_FCLK_CLK0, DIR = I, SIGIS = CLK, ASSIGNMENT = OPTIONAL, BUS = S_AXI_CTRL, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = processing_system7_0_FCLK_CLK0, RESOLVED_BUS = 
 PORT INTERCONNECT_ARESETN = processing_system7_0_FCLK_RESET0_N, DIR = I, SIGIS = RST, ASSIGNMENT = REQUIRE, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = processing_system7_0_FCLK_RESET0_N
 PORT S_AXI_ARESET_OUT_N = ARESETN, DIR = O, VEC = [(C_NUM_SLAVE_SLOTS-1):0], SIGIS = RST, DEFAULT = ARESETN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARESET_OUT_N = ARESETN, DIR = O, VEC = [(C_NUM_MASTER_SLOTS-1):0], SIGIS = RST, DEFAULT = ARESETN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ACLK = ACLK, DIR = I, VEC = [(C_NUM_SLAVE_SLOTS-1):0], SIGIS = CLK, DEFAULT = ACLK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWID = AWID, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH, DEFAULT = AWID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ADDR_WIDTH)-1):0], CONTRIBUTION = C_AXI_ADDR_WIDTH, DEFAULT = AWADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWLEN = AWLEN, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*8)-1):0], CONTRIBUTION = 8, DEFAULT = AWLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWSIZE = AWSIZE, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*3)-1):0], CONTRIBUTION = 3, DEFAULT = AWSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWBURST = AWBURST, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = AWBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWLOCK = AWLOCK, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = AWLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWCACHE = AWCACHE, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*4)-1):0], CONTRIBUTION = 4, DEFAULT = AWCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWPROT = AWPROT, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*3)-1):0], CONTRIBUTION = 3, DEFAULT = AWPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWQOS = AWQOS, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*4)-1):0], CONTRIBUTION = 4, DEFAULT = AWQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWUSER = AWUSER, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_AWUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_AWUSER_WIDTH, DEFAULT = AWUSER, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWVALID = AWVALID, DIR = I, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = AWVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_AWREADY = AWREADY, DIR = O, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = AWREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_WID = WID, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH, DEFAULT = WID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_DATA_MAX_WIDTH)-1):0], CONTRIBUTION = C_AXI_DATA_MAX_WIDTH, DEFAULT = WDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [(((C_NUM_SLAVE_SLOTS*C_AXI_DATA_MAX_WIDTH)/8)-1):0], CONTRIBUTION = C_AXI_DATA_MAX_WIDTH/8, DEFAULT = WSTRB, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_WLAST = WLAST, DIR = I, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = WLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_WUSER = WUSER, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_WUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_WUSER_WIDTH, DEFAULT = WUSER, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_WVALID = WVALID, DIR = I, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = WVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_WREADY = WREADY, DIR = O, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = WREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_BID = BID, DIR = O, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH, DEFAULT = BID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [((C_NUM_SLAVE_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = BRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_BUSER = BUSER, DIR = O, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_BUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_BUSER_WIDTH, DEFAULT = BUSER, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_BVALID = BVALID, DIR = O, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = BVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_BREADY = BREADY, DIR = I, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = BREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARID = ARID, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH, DEFAULT = ARID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ADDR_WIDTH)-1):0], CONTRIBUTION = C_AXI_ADDR_WIDTH, DEFAULT = ARADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARLEN = ARLEN, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*8)-1):0], CONTRIBUTION = 8, DEFAULT = ARLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARSIZE = ARSIZE, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*3)-1):0], CONTRIBUTION = 3, DEFAULT = ARSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARBURST = ARBURST, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = ARBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARLOCK = ARLOCK, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = ARLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARCACHE = ARCACHE, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*4)-1):0], CONTRIBUTION = 4, DEFAULT = ARCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARPROT = ARPROT, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*3)-1):0], CONTRIBUTION = 3, DEFAULT = ARPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARQOS = ARQOS, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*4)-1):0], CONTRIBUTION = 4, DEFAULT = ARQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARUSER = ARUSER, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ARUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_ARUSER_WIDTH, DEFAULT = ARUSER, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARVALID = ARVALID, DIR = I, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = ARVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_ARREADY = ARREADY, DIR = O, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = ARREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_RID = RID, DIR = O, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH, DEFAULT = RID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_DATA_MAX_WIDTH)-1):0], CONTRIBUTION = C_AXI_DATA_MAX_WIDTH, DEFAULT = RDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [((C_NUM_SLAVE_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = RRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_RLAST = RLAST, DIR = O, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = RLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_RUSER = RUSER, DIR = O, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_RUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_RUSER_WIDTH, DEFAULT = RUSER, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_RVALID = RVALID, DIR = O, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = RVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_RREADY = RREADY, DIR = I, VEC = [(C_NUM_SLAVE_SLOTS-1):0], DEFAULT = RREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ACLK = ACLK, DIR = I, VEC = [(C_NUM_MASTER_SLOTS-1):0], SIGIS = CLK, DEFAULT = ACLK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWID = AWID, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH, DEFAULT = AWID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWADDR = AWADDR, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ADDR_WIDTH)-1):0], CONTRIBUTION = C_AXI_ADDR_WIDTH, DEFAULT = AWADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWLEN = AWLEN, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*8)-1):0], CONTRIBUTION = 8, DEFAULT = AWLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWSIZE = AWSIZE, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*3)-1):0], CONTRIBUTION = 3, DEFAULT = AWSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWBURST = AWBURST, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = AWBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWLOCK = AWLOCK, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = AWLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWCACHE = AWCACHE, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*4)-1):0], CONTRIBUTION = 4, DEFAULT = AWCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWPROT = AWPROT, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*3)-1):0], CONTRIBUTION = 3, DEFAULT = AWPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWREGION = AWREGION, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*4)-1):0], CONTRIBUTION = 4, DEFAULT = AWREGION, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWQOS = AWQOS, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*4)-1):0], CONTRIBUTION = 4, DEFAULT = AWQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWUSER = AWUSER, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_AWUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_AWUSER_WIDTH, DEFAULT = AWUSER, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWVALID = AWVALID, DIR = O, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = AWVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_AWREADY = AWREADY, DIR = I, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = AWREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_WID = WID, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH, DEFAULT = WID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_WDATA = WDATA, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_DATA_MAX_WIDTH)-1):0], CONTRIBUTION = C_AXI_DATA_MAX_WIDTH, DEFAULT = WDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_WSTRB = WSTRB, DIR = O, VEC = [(((C_NUM_MASTER_SLOTS*C_AXI_DATA_MAX_WIDTH)/8)-1):0], CONTRIBUTION = C_AXI_DATA_MAX_WIDTH/8, DEFAULT = WSTRB, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_WLAST = WLAST, DIR = O, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = WLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_WUSER = WUSER, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_WUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_WUSER_WIDTH, DEFAULT = WUSER, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_WVALID = WVALID, DIR = O, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = WVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_WREADY = WREADY, DIR = I, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = WREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_BID = BID, DIR = I, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH, DEFAULT = BID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_BRESP = BRESP, DIR = I, VEC = [((C_NUM_MASTER_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = BRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_BUSER = BUSER, DIR = I, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_BUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_BUSER_WIDTH, DEFAULT = BUSER, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_BVALID = BVALID, DIR = I, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = BVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_BREADY = BREADY, DIR = O, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = BREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARID = ARID, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH, DEFAULT = ARID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARADDR = ARADDR, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ADDR_WIDTH)-1):0], CONTRIBUTION = C_AXI_ADDR_WIDTH, DEFAULT = ARADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARLEN = ARLEN, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*8)-1):0], CONTRIBUTION = 8, DEFAULT = ARLEN, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARSIZE = ARSIZE, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*3)-1):0], CONTRIBUTION = 3, DEFAULT = ARSIZE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARBURST = ARBURST, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = ARBURST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARLOCK = ARLOCK, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = ARLOCK, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARCACHE = ARCACHE, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*4)-1):0], CONTRIBUTION = 4, DEFAULT = ARCACHE, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARPROT = ARPROT, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*3)-1):0], CONTRIBUTION = 3, DEFAULT = ARPROT, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARREGION = ARREGION, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*4)-1):0], CONTRIBUTION = 4, DEFAULT = ARREGION, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARQOS = ARQOS, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*4)-1):0], CONTRIBUTION = 4, DEFAULT = ARQOS, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARUSER = ARUSER, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ARUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_ARUSER_WIDTH, DEFAULT = ARUSER, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARVALID = ARVALID, DIR = O, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = ARVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_ARREADY = ARREADY, DIR = I, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = ARREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_RID = RID, DIR = I, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH, DEFAULT = RID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_RDATA = RDATA, DIR = I, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_DATA_MAX_WIDTH)-1):0], CONTRIBUTION = C_AXI_DATA_MAX_WIDTH, DEFAULT = RDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_RRESP = RRESP, DIR = I, VEC = [((C_NUM_MASTER_SLOTS*2)-1):0], CONTRIBUTION = 2, DEFAULT = RRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_RLAST = RLAST, DIR = I, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = RLAST, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_RUSER = RUSER, DIR = I, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_RUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_RUSER_WIDTH, DEFAULT = RUSER, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_RVALID = RVALID, DIR = I, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = RVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT M_AXI_RREADY = RREADY, DIR = O, VEC = [(C_NUM_MASTER_SLOTS-1):0], DEFAULT = RREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT S_AXI_CTRL_AWADDR = AWADDR, DIR = I, BUS = S_AXI_CTRL, VEC = [(C_S_AXI_CTRL_ADDR_WIDTH - 1) : 0], DEFAULT = AWADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_AWVALID = AWVALID, DIR = I, BUS = S_AXI_CTRL, DEFAULT = AWVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_AWREADY = AWREADY, DIR = O, BUS = S_AXI_CTRL, DEFAULT = AWREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_WDATA = WDATA, DIR = I, BUS = S_AXI_CTRL, VEC = [(C_S_AXI_CTRL_DATA_WIDTH - 1) : 0], DEFAULT = WDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_WVALID = WVALID, DIR = I, BUS = S_AXI_CTRL, DEFAULT = WVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_WREADY = WREADY, DIR = O, BUS = S_AXI_CTRL, DEFAULT = WREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_BRESP = BRESP, DIR = O, BUS = S_AXI_CTRL, VEC = [1 : 0], DEFAULT = BRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_BVALID = BVALID, DIR = O, BUS = S_AXI_CTRL, DEFAULT = BVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_BREADY = BREADY, DIR = I, BUS = S_AXI_CTRL, DEFAULT = BREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_ARADDR = ARADDR, DIR = I, BUS = S_AXI_CTRL, VEC = [(C_S_AXI_CTRL_ADDR_WIDTH - 1) : 0], DEFAULT = ARADDR, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_ARVALID = ARVALID, DIR = I, BUS = S_AXI_CTRL, DEFAULT = ARVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_ARREADY = ARREADY, DIR = O, BUS = S_AXI_CTRL, DEFAULT = ARREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_RDATA = RDATA, DIR = O, BUS = S_AXI_CTRL, VEC = [(C_S_AXI_CTRL_DATA_WIDTH - 1) : 0], DEFAULT = RDATA, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_RRESP = RRESP, DIR = O, BUS = S_AXI_CTRL, VEC = [1 : 0], DEFAULT = RRESP, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_RVALID = RVALID, DIR = O, BUS = S_AXI_CTRL, DEFAULT = RVALID, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
 PORT S_AXI_CTRL_RREADY = RREADY, DIR = I, BUS = S_AXI_CTRL, DEFAULT = RREADY, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, RESOLVED_BUS = 
END

BEGIN chipscope_ila
 PARAMETER INSTANCE = chipscope_ila_0
 PARAMETER C_FAMILY = virtex5, DT = string, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = virtex5
 PARAMETER C_DEVICE = xc5vlx50, DT = string, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = xc5vlx50
 PARAMETER C_PACKAGE = ffg676, DT = string, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = ffg676
 PARAMETER C_SPEEDGRADE = -11, DT = string, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = -11
 PARAMETER C_NUM_DATA_SAMPLES = 1024, DT = integer, RANGE = (1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1024, MHS_VALUE = 1024
 PARAMETER C_DATA_SAME_AS_TRIGGER = 1, DT = integer, RANGE = (0,1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_DATA_IN_WIDTH, MPD_VALUE = 1
 PARAMETER C_DATA_IN_WIDTH = 32, DT = integer, RANGE = (1:1024), ISVALID = (C_DATA_SAME_AS_TRIGGER == 0), AFFECTS_PORTS_VEC = DATA, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 32
 PARAMETER C_ENABLE_TRIGGER_OUT = 1, DT = integer, RANGE = (0,1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_DISABLE_RPM = 0, DT = integer, RANGE = (0,1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_RISING_CLOCK_EDGE = 1, DT = integer, RANGE = (0,1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_MAX_SEQUENCER_LEVELS = 1, DT = integer, RANGE = (1:16), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_ENABLE_STORAGE_QUALIFICATION = 1, DT = integer, RANGE = (0,1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER C_TRIG0_UNITS = 1, DT = integer, RANGE = (0:16), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_TRIG0_TRIGGER_IN_WIDTH:C_TRIG0_UNIT_COUNTER_WIDTH:C_TRIG0_UNIT_MATCH_TYPE, MPD_VALUE = 1, MHS_VALUE = 1
 PARAMETER C_TRIG0_TRIGGER_IN_WIDTH = 1, DT = integer, RANGE = (1:256), ISVALID = (C_TRIG0_UNITS >= 1), AFFECTS_PORTS_VEC = TRIG0, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8, MHS_VALUE = 1
 PARAMETER C_TRIG0_UNIT_COUNTER_WIDTH = 0, DT = integer, RANGE = (0:32), ISVALID = (C_TRIG0_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_TRIG0_UNIT_MATCH_TYPE = basic, DT = string, VALUES = (basic=basic, basic with edges=basic with edges, extended=extended, extended with edges=extended with edges, range=range, range with edges=range with edges), ISVALID = (C_TRIG0_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = basic
 PARAMETER C_TRIG1_UNITS = 0, DT = integer, RANGE = (0:16), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_TRIG1_TRIGGER_IN_WIDTH:C_TRIG1_UNIT_COUNTER_WIDTH:C_TRIG1_UNIT_MATCH_TYPE, MPD_VALUE = 0
 PARAMETER C_TRIG1_TRIGGER_IN_WIDTH = 8, DT = integer, RANGE = (1:256), ISVALID = (C_TRIG1_UNITS >= 1), AFFECTS_PORTS_VEC = TRIG1, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8
 PARAMETER C_TRIG1_UNIT_COUNTER_WIDTH = 0, DT = integer, RANGE = (0:32), ISVALID = (C_TRIG1_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_TRIG1_UNIT_MATCH_TYPE = basic, DT = string, VALUES = (basic=basic, basic with edges=basic with edges, extended=extended, extended with edges=extended with edges, range=range, range with edges=range with edges), ISVALID = (C_TRIG1_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = basic
 PARAMETER C_TRIG2_UNITS = 0, DT = integer, RANGE = (0:16), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_TRIG2_TRIGGER_IN_WIDTH:C_TRIG2_UNIT_COUNTER_WIDTH:C_TRIG2_UNIT_MATCH_TYPE, MPD_VALUE = 0
 PARAMETER C_TRIG2_TRIGGER_IN_WIDTH = 8, DT = integer, RANGE = (1:256), ISVALID = (C_TRIG2_UNITS >= 1), AFFECTS_PORTS_VEC = TRIG2, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8
 PARAMETER C_TRIG2_UNIT_COUNTER_WIDTH = 0, DT = integer, RANGE = (0:32), ISVALID = (C_TRIG2_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_TRIG2_UNIT_MATCH_TYPE = basic, DT = string, VALUES = (basic=basic, basic with edges=basic with edges, extended=extended, extended with edges=extended with edges, range=range, range with edges=range with edges), ISVALID = (C_TRIG2_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = basic
 PARAMETER C_TRIG3_UNITS = 0, DT = integer, RANGE = (0:16), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_TRIG3_TRIGGER_IN_WIDTH:C_TRIG3_UNIT_COUNTER_WIDTH:C_TRIG3_UNIT_MATCH_TYPE, MPD_VALUE = 0
 PARAMETER C_TRIG3_TRIGGER_IN_WIDTH = 8, DT = integer, RANGE = (1:256), ISVALID = (C_TRIG3_UNITS >= 1), AFFECTS_PORTS_VEC = TRIG3, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8
 PARAMETER C_TRIG3_UNIT_COUNTER_WIDTH = 0, DT = integer, RANGE = (0:32), ISVALID = (C_TRIG3_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_TRIG3_UNIT_MATCH_TYPE = basic, DT = string, VALUES = (basic=basic, basic with edges=basic with edges, extended=extended, extended with edges=extended with edges, range=range, range with edges=range with edges), ISVALID = (C_TRIG3_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = basic
 PARAMETER C_TRIG4_UNITS = 0, DT = integer, RANGE = (0:16), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_TRIG4_TRIGGER_IN_WIDTH:C_TRIG4_UNIT_COUNTER_WIDTH:C_TRIG4_UNIT_MATCH_TYPE, MPD_VALUE = 0
 PARAMETER C_TRIG4_TRIGGER_IN_WIDTH = 8, DT = integer, RANGE = (1:256), ISVALID = (C_TRIG4_UNITS >= 1), AFFECTS_PORTS_VEC = TRIG4, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8
 PARAMETER C_TRIG4_UNIT_COUNTER_WIDTH = 0, DT = integer, RANGE = (0:32), ISVALID = (C_TRIG4_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_TRIG4_UNIT_MATCH_TYPE = basic, DT = string, VALUES = (basic=basic, basic with edges=basic with edges, extended=extended, extended with edges=extended with edges, range=range, range with edges=range with edges), ISVALID = (C_TRIG4_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = basic
 PARAMETER C_TRIG5_UNITS = 0, DT = integer, RANGE = (0:16), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_TRIG5_TRIGGER_IN_WIDTH:C_TRIG5_UNIT_COUNTER_WIDTH:C_TRIG5_UNIT_MATCH_TYPE, MPD_VALUE = 0
 PARAMETER C_TRIG5_TRIGGER_IN_WIDTH = 8, DT = integer, RANGE = (1:256), ISVALID = (C_TRIG5_UNITS >= 1), AFFECTS_PORTS_VEC = TRIG5, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8
 PARAMETER C_TRIG5_UNIT_COUNTER_WIDTH = 0, DT = integer, RANGE = (0:32), ISVALID = (C_TRIG5_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_TRIG5_UNIT_MATCH_TYPE = basic, DT = string, VALUES = (basic=basic, basic with edges=basic with edges, extended=extended, extended with edges=extended with edges, range=range, range with edges=range with edges), ISVALID = (C_TRIG5_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = basic
 PARAMETER C_TRIG6_UNITS = 0, DT = integer, RANGE = (0:16), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_TRIG6_TRIGGER_IN_WIDTH:C_TRIG6_UNIT_COUNTER_WIDTH:C_TRIG6_UNIT_MATCH_TYPE, MPD_VALUE = 0
 PARAMETER C_TRIG6_TRIGGER_IN_WIDTH = 8, DT = integer, RANGE = (1:256), ISVALID = (C_TRIG6_UNITS >= 1), AFFECTS_PORTS_VEC = TRIG6, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8
 PARAMETER C_TRIG6_UNIT_COUNTER_WIDTH = 0, DT = integer, RANGE = (0:32), ISVALID = (C_TRIG6_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_TRIG6_UNIT_MATCH_TYPE = basic, DT = string, VALUES = (basic=basic, basic with edges=basic with edges, extended=extended, extended with edges=extended with edges, range=range, range with edges=range with edges), ISVALID = (C_TRIG6_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = basic
 PARAMETER C_TRIG7_UNITS = 0, DT = integer, RANGE = (0:16), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_TRIG7_TRIGGER_IN_WIDTH:C_TRIG7_UNIT_COUNTER_WIDTH:C_TRIG7_UNIT_MATCH_TYPE, MPD_VALUE = 0
 PARAMETER C_TRIG7_TRIGGER_IN_WIDTH = 8, DT = integer, RANGE = (1:256), ISVALID = (C_TRIG7_UNITS >= 1), AFFECTS_PORTS_VEC = TRIG7, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8
 PARAMETER C_TRIG7_UNIT_COUNTER_WIDTH = 0, DT = integer, RANGE = (0:32), ISVALID = (C_TRIG7_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_TRIG7_UNIT_MATCH_TYPE = basic, DT = string, VALUES = (basic=basic, basic with edges=basic with edges, extended=extended, extended with edges=extended with edges, range=range, range with edges=range with edges), ISVALID = (C_TRIG7_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = basic
 PARAMETER C_TRIG8_UNITS = 0, DT = integer, RANGE = (0:16), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_TRIG8_TRIGGER_IN_WIDTH:C_TRIG8_UNIT_COUNTER_WIDTH:C_TRIG8_UNIT_MATCH_TYPE, MPD_VALUE = 0
 PARAMETER C_TRIG8_TRIGGER_IN_WIDTH = 8, DT = integer, RANGE = (1:256), ISVALID = (C_TRIG8_UNITS >= 1), AFFECTS_PORTS_VEC = TRIG8, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8
 PARAMETER C_TRIG8_UNIT_COUNTER_WIDTH = 0, DT = integer, RANGE = (0:32), ISVALID = (C_TRIG8_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_TRIG8_UNIT_MATCH_TYPE = basic, DT = string, VALUES = (basic=basic, basic with edges=basic with edges, extended=extended, extended with edges=extended with edges, range=range, range with edges=range with edges), ISVALID = (C_TRIG8_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = basic
 PARAMETER C_TRIG9_UNITS = 0, DT = integer, RANGE = (0:16), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_TRIG9_TRIGGER_IN_WIDTH:C_TRIG9_UNIT_COUNTER_WIDTH:C_TRIG9_UNIT_MATCH_TYPE, MPD_VALUE = 0
 PARAMETER C_TRIG9_TRIGGER_IN_WIDTH = 8, DT = integer, RANGE = (1:256), ISVALID = (C_TRIG9_UNITS >= 1), AFFECTS_PORTS_VEC = TRIG9, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8
 PARAMETER C_TRIG9_UNIT_COUNTER_WIDTH = 0, DT = integer, RANGE = (0:32), ISVALID = (C_TRIG9_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_TRIG9_UNIT_MATCH_TYPE = basic, DT = string, VALUES = (basic=basic, basic with edges=basic with edges, extended=extended, extended with edges=extended with edges, range=range, range with edges=range with edges), ISVALID = (C_TRIG9_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = basic
 PARAMETER C_TRIG10_UNITS = 0, DT = integer, RANGE = (0:16), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_TRIG10_TRIGGER_IN_WIDTH:C_TRIG10_UNIT_COUNTER_WIDTH:C_TRIG10_UNIT_MATCH_TYPE, MPD_VALUE = 0
 PARAMETER C_TRIG10_TRIGGER_IN_WIDTH = 8, DT = integer, RANGE = (1:256), ISVALID = (C_TRIG10_UNITS >= 1), AFFECTS_PORTS_VEC = TRIG10, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8
 PARAMETER C_TRIG10_UNIT_COUNTER_WIDTH = 0, DT = integer, RANGE = (0:32), ISVALID = (C_TRIG10_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_TRIG10_UNIT_MATCH_TYPE = basic, DT = string, VALUES = (basic=basic, basic with edges=basic with edges, extended=extended, extended with edges=extended with edges, range=range, range with edges=range with edges), ISVALID = (C_TRIG10_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = basic
 PARAMETER C_TRIG11_UNITS = 0, DT = integer, RANGE = (0:16), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_TRIG11_TRIGGER_IN_WIDTH:C_TRIG11_UNIT_COUNTER_WIDTH:C_TRIG11_UNIT_MATCH_TYPE, MPD_VALUE = 0
 PARAMETER C_TRIG11_TRIGGER_IN_WIDTH = 8, DT = integer, RANGE = (1:256), ISVALID = (C_TRIG11_UNITS >= 1), AFFECTS_PORTS_VEC = TRIG11, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8
 PARAMETER C_TRIG11_UNIT_COUNTER_WIDTH = 0, DT = integer, RANGE = (0:32), ISVALID = (C_TRIG11_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_TRIG11_UNIT_MATCH_TYPE = basic, DT = string, VALUES = (basic=basic, basic with edges=basic with edges, extended=extended, extended with edges=extended with edges, range=range, range with edges=range with edges), ISVALID = (C_TRIG11_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = basic
 PARAMETER C_TRIG12_UNITS = 0, DT = integer, RANGE = (0:16), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_TRIG12_TRIGGER_IN_WIDTH:C_TRIG12_UNIT_COUNTER_WIDTH:C_TRIG12_UNIT_MATCH_TYPE, MPD_VALUE = 0
 PARAMETER C_TRIG12_TRIGGER_IN_WIDTH = 8, DT = integer, RANGE = (1:256), ISVALID = (C_TRIG12_UNITS >= 1), AFFECTS_PORTS_VEC = TRIG12, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8
 PARAMETER C_TRIG12_UNIT_COUNTER_WIDTH = 0, DT = integer, RANGE = (0:32), ISVALID = (C_TRIG12_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_TRIG12_UNIT_MATCH_TYPE = basic, DT = string, VALUES = (basic=basic, basic with edges=basic with edges, extended=extended, extended with edges=extended with edges, range=range, range with edges=range with edges), ISVALID = (C_TRIG12_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = basic
 PARAMETER C_TRIG13_UNITS = 0, DT = integer, RANGE = (0:16), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_TRIG13_TRIGGER_IN_WIDTH:C_TRIG13_UNIT_COUNTER_WIDTH:C_TRIG13_UNIT_MATCH_TYPE, MPD_VALUE = 0
 PARAMETER C_TRIG13_TRIGGER_IN_WIDTH = 8, DT = integer, RANGE = (1:256), ISVALID = (C_TRIG13_UNITS >= 1), AFFECTS_PORTS_VEC = TRIG13, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8
 PARAMETER C_TRIG13_UNIT_COUNTER_WIDTH = 0, DT = integer, RANGE = (0:32), ISVALID = (C_TRIG13_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_TRIG13_UNIT_MATCH_TYPE = basic, DT = string, VALUES = (basic=basic, basic with edges=basic with edges, extended=extended, extended with edges=extended with edges, range=range, range with edges=range with edges), ISVALID = (C_TRIG13_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = basic
 PARAMETER C_TRIG14_UNITS = 0, DT = integer, RANGE = (0:16), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_TRIG14_TRIGGER_IN_WIDTH:C_TRIG14_UNIT_COUNTER_WIDTH:C_TRIG14_UNIT_MATCH_TYPE, MPD_VALUE = 0
 PARAMETER C_TRIG14_TRIGGER_IN_WIDTH = 8, DT = integer, RANGE = (1:256), ISVALID = (C_TRIG14_UNITS >= 1), AFFECTS_PORTS_VEC = TRIG14, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8
 PARAMETER C_TRIG14_UNIT_COUNTER_WIDTH = 0, DT = integer, RANGE = (0:32), ISVALID = (C_TRIG14_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_TRIG14_UNIT_MATCH_TYPE = basic, DT = string, VALUES = (basic=basic, basic with edges=basic with edges, extended=extended, extended with edges=extended with edges, range=range, range with edges=range with edges), ISVALID = (C_TRIG14_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = basic
 PARAMETER C_TRIG15_UNITS = 0, DT = integer, RANGE = (0:16), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, AFFECTS_PARAMS_ISVALID = C_TRIG15_TRIGGER_IN_WIDTH:C_TRIG15_UNIT_COUNTER_WIDTH:C_TRIG15_UNIT_MATCH_TYPE, MPD_VALUE = 0
 PARAMETER C_TRIG15_TRIGGER_IN_WIDTH = 8, DT = integer, RANGE = (1:256), ISVALID = (C_TRIG15_UNITS >= 1), AFFECTS_PORTS_VEC = TRIG15, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 8
 PARAMETER C_TRIG15_UNIT_COUNTER_WIDTH = 0, DT = integer, RANGE = (0:32), ISVALID = (C_TRIG15_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_TRIG15_UNIT_MATCH_TYPE = basic, DT = string, VALUES = (basic=basic, basic with edges=basic with edges, extended=extended, extended with edges=extended with edges, range=range, range with edges=range with edges), ISVALID = (C_TRIG15_UNITS >= 1), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = basic
 PARAMETER HW_VER = 1.05.a
 PORT CHIPSCOPE_ILA_CONTROL = chipscope_ila_0_icon_control, DIR = I, VEC = [35:0], DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = chipscope_ila_0_icon_control
 PORT CLK = processing_system7_0_FCLK_CLK0, DIR = I, SIGIS = CLK, DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = processing_system7_0_FCLK_CLK0
 PORT TRIG0 = axi_dma_0_s2mm_prmry_reset_out_n_to_chipscope_ila_0, DIR = I, VEC = [(C_TRIG0_TRIGGER_IN_WIDTH-1):0], ISVALID = (C_TRIG0_UNITS >= 1), DEFAULT = , ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = axi_dma_0_s2mm_prmry_reset_out_n_to_chipscope_ila_0
END

BEGIN chipscope_icon
 PARAMETER INSTANCE = chipscope_icon_0
 PARAMETER C_FAMILY = virtex5, DT = string, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , AFFECTS_PARAMS_ISVALID = C_FORCE_BSCAN_USER_PORT, MPD_VALUE = virtex5
 PARAMETER C_DEVICE = xc5vlx50, DT = string, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = xc5vlx50
 PARAMETER C_PACKAGE = ffg676, DT = string, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = ffg676
 PARAMETER C_SPEEDGRADE = -11, DT = string, ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , MPD_VALUE = -11
 PARAMETER C_NUM_CONTROL_PORTS = 1, DT = integer, RANGE = (1:15), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1, MHS_VALUE = 1
 PARAMETER C_SYSTEM_CONTAINS_MDM = 0, DT = integer, RANGE = (0,1), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_mdm_param, ASSIGNMENT = UPDATE, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 0
 PARAMETER C_FORCE_BSCAN_USER_PORT = 1, DT = integer, RANGE = (1:4), VALUES = (1=USER1, 2=USER2, 3=USER3, 4=USER4), ISVALID = (([xstrncmp C_FAMILY  virtex4 ]) || ([xstrncmp C_FAMILY  virtex5 ]) || ([xstrncmp C_FAMILY  virtex6 ]) || ([xstrncmp C_FAMILY  spartan6 ]) || ([xstrncmp C_FAMILY  virtex6l ]) || ([xstrncmp C_FAMILY  kintex7 ]) || ([xstrncmp C_FAMILY  virtex7 ]) || ([xstrncmp C_FAMILY  zynq ]) || ([xstrncmp C_FAMILY  artix7 ]) || ([xstrncmp C_FAMILY  virtex7l ]) || ([xstrncmp C_FAMILY  kintex7l ]) || ([xstrncmp C_FAMILY  artix7l ]) || ([xstrncmp C_FAMILY  aartix7 ]) || ([xstrncmp C_FAMILY  qkintex7l ]) || ([xstrncmp C_FAMILY  qkintex7 ]) || ([xstrncmp C_FAMILY  qvirtex7l ]) || ([xstrncmp C_FAMILY  qvirtex7 ]) || ([xstrncmp C_FAMILY  qartix7l ]) || ([xstrncmp C_FAMILY  qartix7 ]) || ([xstrncmp C_FAMILY  qzynq ]) || ([xstrncmp C_FAMILY  azynq ]) || ([xstrncmp C_FAMILY  qspartan6 ]) || ([xstrncmp C_FAMILY  qspartan6l ]) || ([xstrncmp C_FAMILY  qvirtex5 ]) || ([xstrncmp C_FAMILY  qvirtex6 ]) || ([xstrncmp C_FAMILY  qvirtex6l ])), ASSIGNMENT = OPTIONAL, TYPE = HDL, GUI_PERMIT = , CONST_RANGE = , IS_RANGE_CONST = TRUE, MPD_VALUE = 1
 PARAMETER HW_VER = 1.06.a
 PORT control0 = chipscope_ila_0_icon_control, DIR = O, VEC = [35:0], ASSIGNMENT = REQUIRE, DEFAULT = , ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER, MHS_VALUE = chipscope_ila_0_icon_control
 PORT tdi_in = bscan_tdi, DIR = I, DEFAULT = bscan_tdi, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT reset_in = bscan_reset, DIR = I, DEFAULT = bscan_reset, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT shift_in = bscan_shift, DIR = I, DEFAULT = bscan_shift, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT update_in = bscan_update, DIR = I, DEFAULT = bscan_update, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT sel_in = bscan_sel1, DIR = I, DEFAULT = bscan_sel1, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT drck_in = bscan_drck1, DIR = I, DEFAULT = bscan_drck1, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT capture_in = bscan_capture, DIR = I, DEFAULT = bscan_capture, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
 PORT tdo_out = bscan_tdo1, DIR = O, DEFAULT = bscan_tdo1, ASSIGNMENT = OPTIONAL, ENDIAN = BIG, GUI_PERMIT = ALL_USERS, INITVAL = GND, INTERRUPT_PRIORITY = LOW, SIGIS = , THREE_STATE = FALSE, IOB_STATE = INFER
END

